{"mappings":"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","sources":["node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","node_modules/lodash/isBuffer.js","node_modules/lodash/_root.js","node_modules/lodash/_freeGlobal.js","node_modules/lodash/stubFalse.js","node_modules/lodash/_nodeUtil.js","node_modules/@parcel/runtime-js/lib/runtime-272be63516342880.js","components/header/index.ts","components/button/index.ts","components/message/index.ts","node_modules/process/browser.js","node_modules/@firebase/util/src/crypt.ts","node_modules/@firebase/util/src/deepCopy.ts","node_modules/@firebase/util/src/environment.ts","node_modules/@firebase/util/src/defaults.ts","node_modules/@firebase/util/src/deferred.ts","node_modules/@firebase/util/src/emulator.ts","node_modules/@firebase/util/src/errors.ts","node_modules/@firebase/util/src/json.ts","node_modules/@firebase/util/src/jwt.ts","node_modules/@firebase/util/src/obj.ts","node_modules/@firebase/util/src/query.ts","node_modules/@firebase/util/src/promise.ts","node_modules/@firebase/util/src/sha1.ts","node_modules/@firebase/util/src/subscribe.ts","node_modules/@firebase/util/src/validation.ts","node_modules/@firebase/util/src/utf8.ts","node_modules/@firebase/util/src/exponential_backoff.ts","node_modules/@firebase/util/src/formatters.ts","node_modules/@firebase/util/src/compat.ts","node_modules/@firebase/component/src/component.ts","node_modules/@firebase/component/src/constants.ts","node_modules/@firebase/component/src/provider.ts","node_modules/@firebase/component/src/component_container.ts","node_modules/@firebase/logger/src/logger.ts","node_modules/idb/build/wrap-idb-value.js","node_modules/idb/build/index.js","node_modules/@firebase/app/src/platformLoggerService.ts","node_modules/@firebase/app/src/constants.ts","node_modules/@firebase/app/src/internal.ts","node_modules/@firebase/app/src/errors.ts","node_modules/@firebase/app/src/firebaseApp.ts","node_modules/@firebase/app/src/api.ts","node_modules/@firebase/app/src/indexeddb.ts","node_modules/@firebase/app/src/heartbeatService.ts","node_modules/@firebase/database/src/core/storage/DOMStorageWrapper.ts","node_modules/@firebase/database/src/core/storage/MemoryStorage.ts","node_modules/@firebase/database/src/core/storage/storage.ts","node_modules/@firebase/database/src/core/util/util.ts","node_modules/@firebase/database/src/core/AppCheckTokenProvider.ts","node_modules/@firebase/database/src/core/AuthTokenProvider.ts","node_modules/@firebase/database/src/core/RepoInfo.ts","node_modules/@firebase/database/src/core/stats/StatsManager.ts","node_modules/@firebase/database/src/realtime/polling/PacketReceiver.ts","node_modules/@firebase/database/src/realtime/BrowserPollConnection.ts","node_modules/@firebase/database/src/realtime/WebSocketConnection.ts","node_modules/@firebase/database/src/realtime/TransportManager.ts","node_modules/@firebase/database/src/realtime/Connection.ts","node_modules/@firebase/database/src/core/ServerActions.ts","node_modules/@firebase/database/src/core/util/EventEmitter.ts","node_modules/@firebase/database/src/core/util/OnlineMonitor.ts","node_modules/@firebase/database/src/core/util/Path.ts","node_modules/@firebase/database/src/core/util/VisibilityMonitor.ts","node_modules/@firebase/database/src/core/PersistentConnection.ts","node_modules/@firebase/database/src/core/snap/indexes/Index.ts","node_modules/@firebase/database/src/core/snap/indexes/KeyIndex.ts","node_modules/@firebase/database/src/core/util/SortedMap.ts","node_modules/@firebase/database/src/core/snap/comparators.ts","node_modules/@firebase/database/src/core/snap/snap.ts","node_modules/@firebase/database/src/core/snap/LeafNode.ts","node_modules/@firebase/database/src/core/snap/indexes/PriorityIndex.ts","node_modules/@firebase/database/src/core/snap/childSet.ts","node_modules/@firebase/database/src/core/snap/IndexMap.ts","node_modules/@firebase/database/src/core/snap/ChildrenNode.ts","node_modules/@firebase/database/src/core/snap/nodeFromJSON.ts","node_modules/@firebase/database/src/core/snap/indexes/PathIndex.ts","node_modules/@firebase/database/src/core/snap/indexes/ValueIndex.ts","node_modules/@firebase/database/src/core/view/Change.ts","node_modules/@firebase/database/src/core/view/filter/IndexedFilter.ts","node_modules/@firebase/database/src/core/view/filter/RangedFilter.ts","node_modules/@firebase/database/src/core/view/filter/LimitedFilter.ts","node_modules/@firebase/database/src/core/view/QueryParams.ts","node_modules/@firebase/database/src/core/ReadonlyRestClient.ts","node_modules/@firebase/database/src/core/SparseSnapshotTree.ts","node_modules/@firebase/database/src/core/SnapshotHolder.ts","node_modules/@firebase/database/src/core/stats/StatsListener.ts","node_modules/@firebase/database/src/core/stats/StatsReporter.ts","node_modules/@firebase/database/src/core/operation/Operation.ts","node_modules/@firebase/database/src/core/operation/ListenComplete.ts","node_modules/@firebase/database/src/core/operation/Overwrite.ts","node_modules/@firebase/database/src/core/operation/Merge.ts","node_modules/@firebase/database/src/core/view/CacheNode.ts","node_modules/@firebase/database/src/core/view/EventGenerator.ts","node_modules/@firebase/database/src/core/view/ViewCache.ts","node_modules/@firebase/database/src/core/util/ImmutableTree.ts","node_modules/@firebase/database/src/core/CompoundWrite.ts","node_modules/@firebase/database/src/core/WriteTree.ts","node_modules/@firebase/database/src/core/view/ChildChangeAccumulator.ts","node_modules/@firebase/database/src/core/view/CompleteChildSource.ts","node_modules/@firebase/database/src/core/view/ViewProcessor.ts","node_modules/@firebase/database/src/core/view/View.ts","node_modules/@firebase/database/src/core/SyncPoint.ts","node_modules/@firebase/database/src/core/SyncTree.ts","node_modules/@firebase/database/src/core/util/ServerValues.ts","node_modules/@firebase/database/src/core/util/Tree.ts","node_modules/@firebase/database/src/core/util/validation.ts","node_modules/@firebase/database/src/core/view/EventQueue.ts","node_modules/@firebase/database/src/core/Repo.ts","node_modules/@firebase/database/src/core/util/libs/parser.ts","node_modules/@firebase/database/src/core/view/Event.ts","node_modules/@firebase/database/src/core/view/EventRegistration.ts","node_modules/@firebase/database/src/api/Reference_impl.ts","node_modules/@firebase/database/src/api/OnDisconnect.ts","node_modules/@firebase/database/src/core/util/NextPushId.ts","node_modules/@firebase/database/src/api/Database.ts","node_modules/@firebase/database/src/register.ts","node_modules/@firebase/database/src/api/ServerValue.ts","node_modules/@firebase/database/src/api/Transaction.ts","node_modules/@firebase/database/src/api/test_access.ts","node_modules/@firebase/database/src/realtime/Constants.ts","node_modules/@firebase/database/src/core/snap/Node.ts","node_modules/@firebase/database/src/core/stats/StatsCollection.ts","rtdb.ts","node_modules/@vaadin/router/src/utils.js","node_modules/@vaadin/router/src/triggers/click.js","node_modules/@vaadin/router/src/triggers/popstate.js","node_modules/@vaadin/router/node_modules/path-to-regexp/index.js","node_modules/@vaadin/router/src/resolver/matchPath.js","node_modules/@vaadin/router/src/resolver/matchRoute.js","node_modules/@vaadin/router/src/resolver/resolveRoute.js","node_modules/@vaadin/router/src/resolver/resolver.js","node_modules/@vaadin/router/src/resolver/generateUrls.js","node_modules/@vaadin/router/src/triggers/setNavigationTriggers.js","node_modules/@vaadin/router/src/transitions/animate.js","node_modules/@vaadin/router/src/router.js","node_modules/@vaadin/router/node_modules/@vaadin/vaadin-development-mode-detector/vaadin-development-mode-detector.js","node_modules/@vaadin/router/node_modules/@vaadin/vaadin-usage-statistics/vaadin-usage-statistics-collect.js","node_modules/@vaadin/router/src/router-meta.js","node_modules/@vaadin/router/src/router-config.js","node_modules/lodash/_arrayMap.js","node_modules/lodash/_listCacheClear.js","node_modules/lodash/eq.js","node_modules/lodash/_assocIndexOf.js","node_modules/lodash/_listCacheDelete.js","node_modules/lodash/_listCacheGet.js","node_modules/lodash/_listCacheHas.js","node_modules/lodash/_ListCache.js","node_modules/lodash/_listCacheSet.js","node_modules/lodash/_stackClear.js","node_modules/lodash/_stackDelete.js","node_modules/lodash/_stackGet.js","node_modules/lodash/_stackHas.js","node_modules/lodash/_Symbol.js","node_modules/lodash/_getRawTag.js","node_modules/lodash/_objectToString.js","node_modules/lodash/_baseGetTag.js","node_modules/lodash/isObject.js","node_modules/lodash/isFunction.js","node_modules/lodash/_isMasked.js","node_modules/lodash/_coreJsData.js","node_modules/lodash/_toSource.js","node_modules/lodash/_baseIsNative.js","node_modules/lodash/_getValue.js","node_modules/lodash/_Map.js","node_modules/lodash/_getNative.js","node_modules/lodash/_nativeCreate.js","node_modules/lodash/_hashClear.js","node_modules/lodash/_hashDelete.js","node_modules/lodash/_hashGet.js","node_modules/lodash/_hashHas.js","node_modules/lodash/_Hash.js","node_modules/lodash/_hashSet.js","node_modules/lodash/_mapCacheClear.js","node_modules/lodash/_isKeyable.js","node_modules/lodash/_getMapData.js","node_modules/lodash/_mapCacheDelete.js","node_modules/lodash/_mapCacheGet.js","node_modules/lodash/_mapCacheHas.js","node_modules/lodash/_MapCache.js","node_modules/lodash/_mapCacheSet.js","node_modules/lodash/_Stack.js","node_modules/lodash/_stackSet.js","node_modules/lodash/_setCacheAdd.js","node_modules/lodash/_SetCache.js","node_modules/lodash/_setCacheHas.js","node_modules/lodash/_arraySome.js","node_modules/lodash/_cacheHas.js","node_modules/lodash/_equalArrays.js","node_modules/lodash/_Uint8Array.js","node_modules/lodash/_mapToArray.js","node_modules/lodash/_setToArray.js","node_modules/lodash/_equalByTag.js","node_modules/lodash/_arrayPush.js","node_modules/lodash/isArray.js","node_modules/lodash/_baseGetAllKeys.js","node_modules/lodash/_arrayFilter.js","node_modules/lodash/stubArray.js","node_modules/lodash/_getSymbols.js","node_modules/lodash/_baseTimes.js","node_modules/lodash/isObjectLike.js","node_modules/lodash/_baseIsArguments.js","node_modules/lodash/isArguments.js","node_modules/lodash/_isIndex.js","node_modules/lodash/isLength.js","node_modules/lodash/_baseIsTypedArray.js","node_modules/lodash/_baseUnary.js","node_modules/lodash/isTypedArray.js","node_modules/lodash/_arrayLikeKeys.js","node_modules/lodash/_isPrototype.js","node_modules/lodash/_nativeKeys.js","node_modules/lodash/_overArg.js","node_modules/lodash/_baseKeys.js","node_modules/lodash/isArrayLike.js","node_modules/lodash/keys.js","node_modules/lodash/_getAllKeys.js","node_modules/lodash/_equalObjects.js","node_modules/lodash/_DataView.js","node_modules/lodash/_Promise.js","node_modules/lodash/_Set.js","node_modules/lodash/_WeakMap.js","node_modules/lodash/_getTag.js","node_modules/lodash/_baseIsEqualDeep.js","node_modules/lodash/_baseIsEqual.js","node_modules/lodash/_baseIsMatch.js","node_modules/lodash/_isStrictComparable.js","node_modules/lodash/_getMatchData.js","node_modules/lodash/_matchesStrictComparable.js","node_modules/lodash/_baseMatches.js","node_modules/lodash/isSymbol.js","node_modules/lodash/_isKey.js","node_modules/lodash/memoize.js","node_modules/lodash/_stringToPath.js","node_modules/lodash/_memoizeCapped.js","node_modules/lodash/_baseToString.js","node_modules/lodash/toString.js","node_modules/lodash/_castPath.js","node_modules/lodash/_toKey.js","node_modules/lodash/_baseGet.js","node_modules/lodash/get.js","node_modules/lodash/_baseHasIn.js","node_modules/lodash/_hasPath.js","node_modules/lodash/hasIn.js","node_modules/lodash/_baseMatchesProperty.js","node_modules/lodash/identity.js","node_modules/lodash/_baseProperty.js","node_modules/lodash/_basePropertyDeep.js","node_modules/lodash/property.js","node_modules/lodash/_baseIteratee.js","node_modules/lodash/_baseFor.js","node_modules/lodash/_createBaseFor.js","node_modules/lodash/_baseEach.js","node_modules/lodash/_createBaseEach.js","node_modules/lodash/_baseForOwn.js","node_modules/lodash/_baseMap.js","node_modules/lodash/map.js","state.ts","types/storage.ts","node_modules/@parcel/runtime-js/lib/runtime-8aa9e756af3d4b5b.js","pages/chat/index.ts","pages/home/index.ts","pages/signup/index.ts","router.ts","node_modules/path-browserify/index.js","node_modules/dotenv/lib/main.js","node_modules/dotenv/package.json","node_modules/os-browserify/browser.js","index.ts"],"sourcesContent":["\"use strict\";\n\nvar mapping = {};\n\nfunction register(pairs) {\n  var keys = Object.keys(pairs);\n\n  for (var i = 0; i < keys.length; i++) {\n    mapping[keys[i]] = pairs[keys[i]];\n  }\n}\n\nfunction resolve(id) {\n  var resolved = mapping[id];\n\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n\n  return resolved;\n}\n\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","var root = require('./_root'),\n    stubFalse = require('./stubFalse');\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\nmodule.exports = isBuffer;\n","var freeGlobal = require('./_freeGlobal');\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\nmodule.exports = root;\n","/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\nmodule.exports = freeGlobal;\n","/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = stubFalse;\n","var freeGlobal = require('./_freeGlobal');\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    // Use `util.types` for Node.js 10+.\n    var types = freeModule && freeModule.require && freeModule.require('util').types;\n\n    if (types) {\n      return types;\n    }\n\n    // Legacy `process.binding('util')` for Node.js < 10.\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\nmodule.exports = nodeUtil;\n","require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"fKftx\\\":\\\"index.67207471.js\\\",\\\"hvwKx\\\":\\\"send.714109ce.svg\\\"}\"));","class CustomHeader extends HTMLElement {\n  shadow: ShadowRoot;\n  constructor() {\n    super();\n    this.shadow = this.attachShadow({ mode: \"open\" });\n    this.render();\n  }\n\n  render() {\n    const div = document.createElement(\"div\");\n    div.classList.add(\"header\");\n    const style = document.createElement(\"style\");\n\n    style.textContent = `\n        .header {\n          background-color: var(--color-2);\n          margin:0;\n          height: 60px;\n          display:flex;\n          justify-content: center;\n          align-items: center;\n          font-size: 22px;\n          font-weight: 500;\n        }\n      `;\n\n    this.shadow.appendChild(style);\n    this.shadow.appendChild(div);\n  }\n}\n\ncustomElements.define(\"x-header\", CustomHeader);\n","class Button extends HTMLElement {\n  shadow: ShadowRoot;\n  text: string;\n  constructor() {\n    super();\n    this.text = this.getAttribute(\"text\") || \"text\";\n    this.shadow = this.attachShadow({ mode: \"open\" });\n  }\n  connectedCallback() {\n    this.render();\n  }\n\n  render() {\n    const style = document.createElement(\"style\");\n    style.textContent = `\n        .btn   {\n            width:312px;\n            height:55px;\n            border-radius: 4px;\n            border:none;\n            font-size:22px;\n            font-weight: 500;\n            background-color:var(--color-2);\n            color:#eee;\n            \n        }\n      `;\n\n    this.shadow.innerHTML = `\n        <button class=\"btn\">\n          ${this.text}\n        </button>\n    `;\n\n    this.shadow.appendChild(style);\n  }\n}\n\ncustomElements.define(\"x-btn\", Button);\n","class TextMessage extends HTMLElement {\n  shadow: ShadowRoot;\n  sender: string;\n  textMessage: string;\n  owner: boolean;\n  constructor() {\n    super();\n    this.shadow = this.attachShadow({ mode: \"open\" });\n    this.sender = this.getAttribute(\"from\") || \"undefinded\";\n    this.textMessage = this.getAttribute(\"message\") || \"undefinded\";\n  }\n  connectedCallback() {\n    this.render();\n  }\n  render() {\n    const style = document.createElement(\"style\");\n    style.innerHTML = `\n        .root {\n          font-family: 'Roboto', sans-serif;\n          display:flex;\n          flex-direction:column;\n          width:fit-content;\n          height:45px;\n          color:#eee;\n          font-weight:500;\n        }\n        .sender {\n          font-size:10px;\n        }\n        .message {\n          padding: 2px;\n          font-size:22px;\n          border-radius:4px;\n        }\n        .own-message {\n          align-self: flex-end;\n\n        }\n      `;\n\n    this.shadow.innerHTML = `\n        <div class=\"root\">\n          <div class=\"sender\">\n            ${this.sender}\n          </div>\n          <div class=\"message ${this.owner ? \"own-message\" : \"\"}\">\n            ${this.textMessage}\n          </div>\n        </div>\n      `;\n    this.shadow.appendChild(style);\n  }\n}\n\ncustomElements.define(\"x-message\", TextMessage);\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst stringToByteArray = function (str: string): number[] {\n  // TODO(user): Use native implementations if/when available\n  const out: number[] = [];\n  let p = 0;\n  for (let i = 0; i < str.length; i++) {\n    let c = str.charCodeAt(i);\n    if (c < 128) {\n      out[p++] = c;\n    } else if (c < 2048) {\n      out[p++] = (c >> 6) | 192;\n      out[p++] = (c & 63) | 128;\n    } else if (\n      (c & 0xfc00) === 0xd800 &&\n      i + 1 < str.length &&\n      (str.charCodeAt(i + 1) & 0xfc00) === 0xdc00\n    ) {\n      // Surrogate Pair\n      c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);\n      out[p++] = (c >> 18) | 240;\n      out[p++] = ((c >> 12) & 63) | 128;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    } else {\n      out[p++] = (c >> 12) | 224;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    }\n  }\n  return out;\n};\n\n/**\n * Turns an array of numbers into the string given by the concatenation of the\n * characters to which the numbers correspond.\n * @param bytes Array of numbers representing characters.\n * @return Stringification of the array.\n */\nconst byteArrayToString = function (bytes: number[]): string {\n  // TODO(user): Use native implementations if/when available\n  const out: string[] = [];\n  let pos = 0,\n    c = 0;\n  while (pos < bytes.length) {\n    const c1 = bytes[pos++];\n    if (c1 < 128) {\n      out[c++] = String.fromCharCode(c1);\n    } else if (c1 > 191 && c1 < 224) {\n      const c2 = bytes[pos++];\n      out[c++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));\n    } else if (c1 > 239 && c1 < 365) {\n      // Surrogate Pair\n      const c2 = bytes[pos++];\n      const c3 = bytes[pos++];\n      const c4 = bytes[pos++];\n      const u =\n        (((c1 & 7) << 18) | ((c2 & 63) << 12) | ((c3 & 63) << 6) | (c4 & 63)) -\n        0x10000;\n      out[c++] = String.fromCharCode(0xd800 + (u >> 10));\n      out[c++] = String.fromCharCode(0xdc00 + (u & 1023));\n    } else {\n      const c2 = bytes[pos++];\n      const c3 = bytes[pos++];\n      out[c++] = String.fromCharCode(\n        ((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63)\n      );\n    }\n  }\n  return out.join('');\n};\n\ninterface Base64 {\n  byteToCharMap_: { [key: number]: string } | null;\n  charToByteMap_: { [key: string]: number } | null;\n  byteToCharMapWebSafe_: { [key: number]: string } | null;\n  charToByteMapWebSafe_: { [key: string]: number } | null;\n  ENCODED_VALS_BASE: string;\n  readonly ENCODED_VALS: string;\n  readonly ENCODED_VALS_WEBSAFE: string;\n  HAS_NATIVE_SUPPORT: boolean;\n  encodeByteArray(input: number[] | Uint8Array, webSafe?: boolean): string;\n  encodeString(input: string, webSafe?: boolean): string;\n  decodeString(input: string, webSafe: boolean): string;\n  decodeStringToByteArray(input: string, webSafe: boolean): number[];\n  init_(): void;\n}\n\n// We define it as an object literal instead of a class because a class compiled down to es5 can't\n// be treeshaked. https://github.com/rollup/rollup/issues/1691\n// Static lookup maps, lazily populated by init_()\nexport const base64: Base64 = {\n  /**\n   * Maps bytes to characters.\n   */\n  byteToCharMap_: null,\n\n  /**\n   * Maps characters to bytes.\n   */\n  charToByteMap_: null,\n\n  /**\n   * Maps bytes to websafe characters.\n   * @private\n   */\n  byteToCharMapWebSafe_: null,\n\n  /**\n   * Maps websafe characters to bytes.\n   * @private\n   */\n  charToByteMapWebSafe_: null,\n\n  /**\n   * Our default alphabet, shared between\n   * ENCODED_VALS and ENCODED_VALS_WEBSAFE\n   */\n  ENCODED_VALS_BASE:\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',\n\n  /**\n   * Our default alphabet. Value 64 (=) is special; it means \"nothing.\"\n   */\n  get ENCODED_VALS() {\n    return this.ENCODED_VALS_BASE + '+/=';\n  },\n\n  /**\n   * Our websafe alphabet.\n   */\n  get ENCODED_VALS_WEBSAFE() {\n    return this.ENCODED_VALS_BASE + '-_.';\n  },\n\n  /**\n   * Whether this browser supports the atob and btoa functions. This extension\n   * started at Mozilla but is now implemented by many browsers. We use the\n   * ASSUME_* variables to avoid pulling in the full useragent detection library\n   * but still allowing the standard per-browser compilations.\n   *\n   */\n  HAS_NATIVE_SUPPORT: typeof atob === 'function',\n\n  /**\n   * Base64-encode an array of bytes.\n   *\n   * @param input An array of bytes (numbers with\n   *     value in [0, 255]) to encode.\n   * @param webSafe Boolean indicating we should use the\n   *     alternative alphabet.\n   * @return The base64 encoded string.\n   */\n  encodeByteArray(input: number[] | Uint8Array, webSafe?: boolean): string {\n    if (!Array.isArray(input)) {\n      throw Error('encodeByteArray takes an array as a parameter');\n    }\n\n    this.init_();\n\n    const byteToCharMap = webSafe\n      ? this.byteToCharMapWebSafe_!\n      : this.byteToCharMap_!;\n\n    const output = [];\n\n    for (let i = 0; i < input.length; i += 3) {\n      const byte1 = input[i];\n      const haveByte2 = i + 1 < input.length;\n      const byte2 = haveByte2 ? input[i + 1] : 0;\n      const haveByte3 = i + 2 < input.length;\n      const byte3 = haveByte3 ? input[i + 2] : 0;\n\n      const outByte1 = byte1 >> 2;\n      const outByte2 = ((byte1 & 0x03) << 4) | (byte2 >> 4);\n      let outByte3 = ((byte2 & 0x0f) << 2) | (byte3 >> 6);\n      let outByte4 = byte3 & 0x3f;\n\n      if (!haveByte3) {\n        outByte4 = 64;\n\n        if (!haveByte2) {\n          outByte3 = 64;\n        }\n      }\n\n      output.push(\n        byteToCharMap[outByte1],\n        byteToCharMap[outByte2],\n        byteToCharMap[outByte3],\n        byteToCharMap[outByte4]\n      );\n    }\n\n    return output.join('');\n  },\n\n  /**\n   * Base64-encode a string.\n   *\n   * @param input A string to encode.\n   * @param webSafe If true, we should use the\n   *     alternative alphabet.\n   * @return The base64 encoded string.\n   */\n  encodeString(input: string, webSafe?: boolean): string {\n    // Shortcut for Mozilla browsers that implement\n    // a native base64 encoder in the form of \"btoa/atob\"\n    if (this.HAS_NATIVE_SUPPORT && !webSafe) {\n      return btoa(input);\n    }\n    return this.encodeByteArray(stringToByteArray(input), webSafe);\n  },\n\n  /**\n   * Base64-decode a string.\n   *\n   * @param input to decode.\n   * @param webSafe True if we should use the\n   *     alternative alphabet.\n   * @return string representing the decoded value.\n   */\n  decodeString(input: string, webSafe: boolean): string {\n    // Shortcut for Mozilla browsers that implement\n    // a native base64 encoder in the form of \"btoa/atob\"\n    if (this.HAS_NATIVE_SUPPORT && !webSafe) {\n      return atob(input);\n    }\n    return byteArrayToString(this.decodeStringToByteArray(input, webSafe));\n  },\n\n  /**\n   * Base64-decode a string.\n   *\n   * In base-64 decoding, groups of four characters are converted into three\n   * bytes.  If the encoder did not apply padding, the input length may not\n   * be a multiple of 4.\n   *\n   * In this case, the last group will have fewer than 4 characters, and\n   * padding will be inferred.  If the group has one or two characters, it decodes\n   * to one byte.  If the group has three characters, it decodes to two bytes.\n   *\n   * @param input Input to decode.\n   * @param webSafe True if we should use the web-safe alphabet.\n   * @return bytes representing the decoded value.\n   */\n  decodeStringToByteArray(input: string, webSafe: boolean): number[] {\n    this.init_();\n\n    const charToByteMap = webSafe\n      ? this.charToByteMapWebSafe_!\n      : this.charToByteMap_!;\n\n    const output: number[] = [];\n\n    for (let i = 0; i < input.length; ) {\n      const byte1 = charToByteMap[input.charAt(i++)];\n\n      const haveByte2 = i < input.length;\n      const byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;\n      ++i;\n\n      const haveByte3 = i < input.length;\n      const byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;\n      ++i;\n\n      const haveByte4 = i < input.length;\n      const byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;\n      ++i;\n\n      if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {\n        throw Error();\n      }\n\n      const outByte1 = (byte1 << 2) | (byte2 >> 4);\n      output.push(outByte1);\n\n      if (byte3 !== 64) {\n        const outByte2 = ((byte2 << 4) & 0xf0) | (byte3 >> 2);\n        output.push(outByte2);\n\n        if (byte4 !== 64) {\n          const outByte3 = ((byte3 << 6) & 0xc0) | byte4;\n          output.push(outByte3);\n        }\n      }\n    }\n\n    return output;\n  },\n\n  /**\n   * Lazy static initialization function. Called before\n   * accessing any of the static map variables.\n   * @private\n   */\n  init_() {\n    if (!this.byteToCharMap_) {\n      this.byteToCharMap_ = {};\n      this.charToByteMap_ = {};\n      this.byteToCharMapWebSafe_ = {};\n      this.charToByteMapWebSafe_ = {};\n\n      // We want quick mappings back and forth, so we precompute two maps.\n      for (let i = 0; i < this.ENCODED_VALS.length; i++) {\n        this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);\n        this.charToByteMap_[this.byteToCharMap_[i]] = i;\n        this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);\n        this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;\n\n        // Be forgiving when decoding and correctly decode both encodings.\n        if (i >= this.ENCODED_VALS_BASE.length) {\n          this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;\n          this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;\n        }\n      }\n    }\n  }\n};\n\n/**\n * URL-safe base64 encoding\n */\nexport const base64Encode = function (str: string): string {\n  const utf8Bytes = stringToByteArray(str);\n  return base64.encodeByteArray(utf8Bytes, true);\n};\n\n/**\n * URL-safe base64 encoding (without \".\" padding in the end).\n * e.g. Used in JSON Web Token (JWT) parts.\n */\nexport const base64urlEncodeWithoutPadding = function (str: string): string {\n  // Use base64url encoding and remove padding in the end (dot characters).\n  return base64Encode(str).replace(/\\./g, '');\n};\n\n/**\n * URL-safe base64 decoding\n *\n * NOTE: DO NOT use the global atob() function - it does NOT support the\n * base64Url variant encoding.\n *\n * @param str To be decoded\n * @return Decoded result, if possible\n */\nexport const base64Decode = function (str: string): string | null {\n  try {\n    return base64.decodeString(str, true);\n  } catch (e) {\n    console.error('base64Decode failed: ', e);\n  }\n  return null;\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Do a deep-copy of basic JavaScript Objects or Arrays.\n */\nexport function deepCopy<T>(value: T): T {\n  return deepExtend(undefined, value) as T;\n}\n\n/**\n * Copy properties from source to target (recursively allows extension\n * of Objects and Arrays).  Scalar values in the target are over-written.\n * If target is undefined, an object of the appropriate type will be created\n * (and returned).\n *\n * We recursively copy all child properties of plain Objects in the source- so\n * that namespace- like dictionaries are merged.\n *\n * Note that the target can be a function, in which case the properties in\n * the source Object are copied onto it as static properties of the Function.\n *\n * Note: we don't merge __proto__ to prevent prototype pollution\n */\nexport function deepExtend(target: unknown, source: unknown): unknown {\n  if (!(source instanceof Object)) {\n    return source;\n  }\n\n  switch (source.constructor) {\n    case Date:\n      // Treat Dates like scalars; if the target date object had any child\n      // properties - they will be lost!\n      const dateValue = source as Date;\n      return new Date(dateValue.getTime());\n\n    case Object:\n      if (target === undefined) {\n        target = {};\n      }\n      break;\n    case Array:\n      // Always copy the array source and overwrite the target.\n      target = [];\n      break;\n\n    default:\n      // Not a plain Object - treat it as a scalar.\n      return source;\n  }\n\n  for (const prop in source) {\n    // use isValidKey to guard against prototype pollution. See https://snyk.io/vuln/SNYK-JS-LODASH-450202\n    if (!source.hasOwnProperty(prop) || !isValidKey(prop)) {\n      continue;\n    }\n    (target as Record<string, unknown>)[prop] = deepExtend(\n      (target as Record<string, unknown>)[prop],\n      (source as Record<string, unknown>)[prop]\n    );\n  }\n\n  return target;\n}\n\nfunction isValidKey(key: string): boolean {\n  return key !== '__proto__';\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CONSTANTS } from './constants';\n\n/**\n * Returns navigator.userAgent string or '' if it's not defined.\n * @return user agent string\n */\nexport function getUA(): string {\n  if (\n    typeof navigator !== 'undefined' &&\n    typeof navigator['userAgent'] === 'string'\n  ) {\n    return navigator['userAgent'];\n  } else {\n    return '';\n  }\n}\n\n/**\n * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.\n *\n * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap\n * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally\n * wait for a callback.\n */\nexport function isMobileCordova(): boolean {\n  return (\n    typeof window !== 'undefined' &&\n    // @ts-ignore Setting up an broadly applicable index signature for Window\n    // just to deal with this case would probably be a bad idea.\n    !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) &&\n    /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA())\n  );\n}\n\n/**\n * Detect Node.js.\n *\n * @return true if Node.js environment is detected.\n */\n// Node detection logic from: https://github.com/iliakan/detect-node/\nexport function isNode(): boolean {\n  try {\n    return (\n      Object.prototype.toString.call(global.process) === '[object process]'\n    );\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Detect Browser Environment\n */\nexport function isBrowser(): boolean {\n  return typeof self === 'object' && self.self === self;\n}\n\n/**\n * Detect browser extensions (Chrome and Firefox at least).\n */\ninterface BrowserRuntime {\n  id?: unknown;\n}\ndeclare const chrome: { runtime?: BrowserRuntime };\ndeclare const browser: { runtime?: BrowserRuntime };\nexport function isBrowserExtension(): boolean {\n  const runtime =\n    typeof chrome === 'object'\n      ? chrome.runtime\n      : typeof browser === 'object'\n      ? browser.runtime\n      : undefined;\n  return typeof runtime === 'object' && runtime.id !== undefined;\n}\n\n/**\n * Detect React Native.\n *\n * @return true if ReactNative environment is detected.\n */\nexport function isReactNative(): boolean {\n  return (\n    typeof navigator === 'object' && navigator['product'] === 'ReactNative'\n  );\n}\n\n/** Detects Electron apps. */\nexport function isElectron(): boolean {\n  return getUA().indexOf('Electron/') >= 0;\n}\n\n/** Detects Internet Explorer. */\nexport function isIE(): boolean {\n  const ua = getUA();\n  return ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0;\n}\n\n/** Detects Universal Windows Platform apps. */\nexport function isUWP(): boolean {\n  return getUA().indexOf('MSAppHost/') >= 0;\n}\n\n/**\n * Detect whether the current SDK build is the Node version.\n *\n * @return true if it's the Node SDK build.\n */\nexport function isNodeSdk(): boolean {\n  return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;\n}\n\n/** Returns true if we are running in Safari. */\nexport function isSafari(): boolean {\n  return (\n    !isNode() &&\n    navigator.userAgent.includes('Safari') &&\n    !navigator.userAgent.includes('Chrome')\n  );\n}\n\n/**\n * This method checks if indexedDB is supported by current browser/service worker context\n * @return true if indexedDB is supported by current browser/service worker context\n */\nexport function isIndexedDBAvailable(): boolean {\n  try {\n    return typeof indexedDB === 'object';\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * This method validates browser/sw context for indexedDB by opening a dummy indexedDB database and reject\n * if errors occur during the database open operation.\n *\n * @throws exception if current browser/sw context can't run idb.open (ex: Safari iframe, Firefox\n * private browsing)\n */\nexport function validateIndexedDBOpenable(): Promise<boolean> {\n  return new Promise((resolve, reject) => {\n    try {\n      let preExist: boolean = true;\n      const DB_CHECK_NAME =\n        'validate-browser-context-for-indexeddb-analytics-module';\n      const request = self.indexedDB.open(DB_CHECK_NAME);\n      request.onsuccess = () => {\n        request.result.close();\n        // delete database only when it doesn't pre-exist\n        if (!preExist) {\n          self.indexedDB.deleteDatabase(DB_CHECK_NAME);\n        }\n        resolve(true);\n      };\n      request.onupgradeneeded = () => {\n        preExist = false;\n      };\n\n      request.onerror = () => {\n        reject(request.error?.message || '');\n      };\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\n\n/**\n *\n * This method checks whether cookie is enabled within current browser\n * @return true if cookie is enabled within current browser\n */\nexport function areCookiesEnabled(): boolean {\n  if (typeof navigator === 'undefined' || !navigator.cookieEnabled) {\n    return false;\n  }\n  return true;\n}\n\n/**\n * Polyfill for `globalThis` object.\n * @returns the `globalThis` object for the given environment.\n */\nexport function getGlobal(): typeof globalThis {\n  if (typeof self !== 'undefined') {\n    return self;\n  }\n  if (typeof window !== 'undefined') {\n    return window;\n  }\n  if (typeof global !== 'undefined') {\n    return global;\n  }\n  throw new Error('Unable to locate global object.');\n}\n","/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { base64Decode } from './crypt';\nimport { getGlobal } from './environment';\n\n/**\n * Keys for experimental properties on the `FirebaseDefaults` object.\n * @public\n */\nexport type ExperimentalKey = 'authTokenSyncURL' | 'authIdTokenMaxAge';\n\n/**\n * An object that can be injected into the environment as __FIREBASE_DEFAULTS__,\n * either as a property of globalThis, a shell environment variable, or a\n * cookie.\n *\n * This object can be used to automatically configure and initialize\n * a Firebase app as well as any emulators.\n *\n * @public\n */\nexport interface FirebaseDefaults {\n  config?: Record<string, string>;\n  emulatorHosts?: Record<string, string>;\n  _authTokenSyncURL?: string;\n  _authIdTokenMaxAge?: number;\n  [key: string]: unknown;\n}\n\ndeclare global {\n  // Need `var` for this to work.\n  // eslint-disable-next-line no-var\n  var __FIREBASE_DEFAULTS__: FirebaseDefaults | undefined;\n}\n\nconst getDefaultsFromGlobal = (): FirebaseDefaults | undefined =>\n  getGlobal().__FIREBASE_DEFAULTS__;\n\n/**\n * Attempt to read defaults from a JSON string provided to\n * process.env.__FIREBASE_DEFAULTS__ or a JSON file whose path is in\n * process.env.__FIREBASE_DEFAULTS_PATH__\n */\nconst getDefaultsFromEnvVariable = (): FirebaseDefaults | undefined => {\n  if (typeof process === 'undefined' || typeof process.env === 'undefined') {\n    return;\n  }\n  const defaultsJsonString = process.env.__FIREBASE_DEFAULTS__;\n  if (defaultsJsonString) {\n    return JSON.parse(defaultsJsonString);\n  }\n};\n\nconst getDefaultsFromCookie = (): FirebaseDefaults | undefined => {\n  if (typeof document === 'undefined') {\n    return;\n  }\n  let match;\n  try {\n    match = document.cookie.match(/__FIREBASE_DEFAULTS__=([^;]+)/);\n  } catch (e) {\n    // Some environments such as Angular Universal SSR have a\n    // `document` object but error on accessing `document.cookie`.\n    return;\n  }\n  const decoded = match && base64Decode(match[1]);\n  return decoded && JSON.parse(decoded);\n};\n\n/**\n * Get the __FIREBASE_DEFAULTS__ object. It checks in order:\n * (1) if such an object exists as a property of `globalThis`\n * (2) if such an object was provided on a shell environment variable\n * (3) if such an object exists in a cookie\n */\nconst getDefaults = (): FirebaseDefaults | undefined => {\n  try {\n    return (\n      getDefaultsFromGlobal() ||\n      getDefaultsFromEnvVariable() ||\n      getDefaultsFromCookie()\n    );\n  } catch (e) {\n    /**\n     * Catch-all for being unable to get __FIREBASE_DEFAULTS__ due\n     * to any environment case we have not accounted for. Log to\n     * info instead of swallowing so we can find these unknown cases\n     * and add paths for them if needed.\n     */\n    console.info(`Unable to get __FIREBASE_DEFAULTS__ due to: ${e}`);\n    return;\n  }\n};\n\n/**\n * Returns emulator host stored in the __FIREBASE_DEFAULTS__ object\n * for the given product.\n * @returns a URL host formatted like `127.0.0.1:9999` or `[::1]:4000` if available\n * @public\n */\nexport const getDefaultEmulatorHost = (\n  productName: string\n): string | undefined => getDefaults()?.emulatorHosts?.[productName];\n\n/**\n * Returns emulator hostname and port stored in the __FIREBASE_DEFAULTS__ object\n * for the given product.\n * @returns a pair of hostname and port like `[\"::1\", 4000]` if available\n * @public\n */\nexport const getDefaultEmulatorHostnameAndPort = (\n  productName: string\n): [hostname: string, port: number] | undefined => {\n  const host = getDefaultEmulatorHost(productName);\n  if (!host) {\n    return undefined;\n  }\n  const separatorIndex = host.lastIndexOf(':'); // Finding the last since IPv6 addr also has colons.\n  if (separatorIndex <= 0 || separatorIndex + 1 === host.length) {\n    throw new Error(`Invalid host ${host} with no separate hostname and port!`);\n  }\n  // eslint-disable-next-line no-restricted-globals\n  const port = parseInt(host.substring(separatorIndex + 1), 10);\n  if (host[0] === '[') {\n    // Bracket-quoted `[ipv6addr]:port` => return \"ipv6addr\" (without brackets).\n    return [host.substring(1, separatorIndex - 1), port];\n  } else {\n    return [host.substring(0, separatorIndex), port];\n  }\n};\n\n/**\n * Returns Firebase app config stored in the __FIREBASE_DEFAULTS__ object.\n * @public\n */\nexport const getDefaultAppConfig = (): Record<string, string> | undefined =>\n  getDefaults()?.config;\n\n/**\n * Returns an experimental setting on the __FIREBASE_DEFAULTS__ object (properties\n * prefixed by \"_\")\n * @public\n */\nexport const getExperimentalSetting = <T extends ExperimentalKey>(\n  name: T\n): FirebaseDefaults[`_${T}`] =>\n  getDefaults()?.[`_${name}`] as FirebaseDefaults[`_${T}`];\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class Deferred<R> {\n  promise: Promise<R>;\n  reject: (value?: unknown) => void = () => {};\n  resolve: (value?: unknown) => void = () => {};\n  constructor() {\n    this.promise = new Promise((resolve, reject) => {\n      this.resolve = resolve as (value?: unknown) => void;\n      this.reject = reject as (value?: unknown) => void;\n    });\n  }\n\n  /**\n   * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around\n   * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback\n   * and returns a node-style callback which will resolve or reject the Deferred's promise.\n   */\n  wrapCallback(\n    callback?: (error?: unknown, value?: unknown) => void\n  ): (error: unknown, value?: unknown) => void {\n    return (error, value?) => {\n      if (error) {\n        this.reject(error);\n      } else {\n        this.resolve(value);\n      }\n      if (typeof callback === 'function') {\n        // Attaching noop handler just in case developer wasn't expecting\n        // promises\n        this.promise.catch(() => {});\n\n        // Some of our callbacks don't expect a value and our own tests\n        // assert that the parameter length is 1\n        if (callback.length === 1) {\n          callback(error);\n        } else {\n          callback(error, value);\n        }\n      }\n    };\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { base64urlEncodeWithoutPadding } from './crypt';\n\n// Firebase Auth tokens contain snake_case claims following the JWT standard / convention.\n/* eslint-disable camelcase */\n\nexport type FirebaseSignInProvider =\n  | 'custom'\n  | 'email'\n  | 'password'\n  | 'phone'\n  | 'anonymous'\n  | 'google.com'\n  | 'facebook.com'\n  | 'github.com'\n  | 'twitter.com'\n  | 'microsoft.com'\n  | 'apple.com';\n\ninterface FirebaseIdToken {\n  // Always set to https://securetoken.google.com/PROJECT_ID\n  iss: string;\n\n  // Always set to PROJECT_ID\n  aud: string;\n\n  // The user's unique ID\n  sub: string;\n\n  // The token issue time, in seconds since epoch\n  iat: number;\n\n  // The token expiry time, normally 'iat' + 3600\n  exp: number;\n\n  // The user's unique ID. Must be equal to 'sub'\n  user_id: string;\n\n  // The time the user authenticated, normally 'iat'\n  auth_time: number;\n\n  // The sign in provider, only set when the provider is 'anonymous'\n  provider_id?: 'anonymous';\n\n  // The user's primary email\n  email?: string;\n\n  // The user's email verification status\n  email_verified?: boolean;\n\n  // The user's primary phone number\n  phone_number?: string;\n\n  // The user's display name\n  name?: string;\n\n  // The user's profile photo URL\n  picture?: string;\n\n  // Information on all identities linked to this user\n  firebase: {\n    // The primary sign-in provider\n    sign_in_provider: FirebaseSignInProvider;\n\n    // A map of providers to the user's list of unique identifiers from\n    // each provider\n    identities?: { [provider in FirebaseSignInProvider]?: string[] };\n  };\n\n  // Custom claims set by the developer\n  [claim: string]: unknown;\n\n  uid?: never; // Try to catch a common mistake of \"uid\" (should be \"sub\" instead).\n}\n\nexport type EmulatorMockTokenOptions = ({ user_id: string } | { sub: string }) &\n  Partial<FirebaseIdToken>;\n\nexport function createMockUserToken(\n  token: EmulatorMockTokenOptions,\n  projectId?: string\n): string {\n  if (token.uid) {\n    throw new Error(\n      'The \"uid\" field is no longer supported by mockUserToken. Please use \"sub\" instead for Firebase Auth User ID.'\n    );\n  }\n  // Unsecured JWTs use \"none\" as the algorithm.\n  const header = {\n    alg: 'none',\n    type: 'JWT'\n  };\n\n  const project = projectId || 'demo-project';\n  const iat = token.iat || 0;\n  const sub = token.sub || token.user_id;\n  if (!sub) {\n    throw new Error(\"mockUserToken must contain 'sub' or 'user_id' field!\");\n  }\n\n  const payload: FirebaseIdToken = {\n    // Set all required fields to decent defaults\n    iss: `https://securetoken.google.com/${project}`,\n    aud: project,\n    iat,\n    exp: iat + 3600,\n    auth_time: iat,\n    sub,\n    user_id: sub,\n    firebase: {\n      sign_in_provider: 'custom',\n      identities: {}\n    },\n\n    // Override with user options\n    ...token\n  };\n\n  // Unsecured JWTs use the empty string as a signature.\n  const signature = '';\n  return [\n    base64urlEncodeWithoutPadding(JSON.stringify(header)),\n    base64urlEncodeWithoutPadding(JSON.stringify(payload)),\n    signature\n  ].join('.');\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Standardized Firebase Error.\n *\n * Usage:\n *\n *   // Typescript string literals for type-safe codes\n *   type Err =\n *     'unknown' |\n *     'object-not-found'\n *     ;\n *\n *   // Closure enum for type-safe error codes\n *   // at-enum {string}\n *   var Err = {\n *     UNKNOWN: 'unknown',\n *     OBJECT_NOT_FOUND: 'object-not-found',\n *   }\n *\n *   let errors: Map<Err, string> = {\n *     'generic-error': \"Unknown error\",\n *     'file-not-found': \"Could not find file: {$file}\",\n *   };\n *\n *   // Type-safe function - must pass a valid error code as param.\n *   let error = new ErrorFactory<Err>('service', 'Service', errors);\n *\n *   ...\n *   throw error.create(Err.GENERIC);\n *   ...\n *   throw error.create(Err.FILE_NOT_FOUND, {'file': fileName});\n *   ...\n *   // Service: Could not file file: foo.txt (service/file-not-found).\n *\n *   catch (e) {\n *     assert(e.message === \"Could not find file: foo.txt.\");\n *     if ((e as FirebaseError)?.code === 'service/file-not-found') {\n *       console.log(\"Could not read file: \" + e['file']);\n *     }\n *   }\n */\n\nexport type ErrorMap<ErrorCode extends string> = {\n  readonly [K in ErrorCode]: string;\n};\n\nconst ERROR_NAME = 'FirebaseError';\n\nexport interface StringLike {\n  toString(): string;\n}\n\nexport interface ErrorData {\n  [key: string]: unknown;\n}\n\n// Based on code from:\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types\nexport class FirebaseError extends Error {\n  /** The custom name for all FirebaseErrors. */\n  readonly name: string = ERROR_NAME;\n\n  constructor(\n    /** The error code for this error. */\n    readonly code: string,\n    message: string,\n    /** Custom data for this error. */\n    public customData?: Record<string, unknown>\n  ) {\n    super(message);\n\n    // Fix For ES5\n    // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    Object.setPrototypeOf(this, FirebaseError.prototype);\n\n    // Maintains proper stack trace for where our error was thrown.\n    // Only available on V8.\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, ErrorFactory.prototype.create);\n    }\n  }\n}\n\nexport class ErrorFactory<\n  ErrorCode extends string,\n  ErrorParams extends { readonly [K in ErrorCode]?: ErrorData } = {}\n> {\n  constructor(\n    private readonly service: string,\n    private readonly serviceName: string,\n    private readonly errors: ErrorMap<ErrorCode>\n  ) {}\n\n  create<K extends ErrorCode>(\n    code: K,\n    ...data: K extends keyof ErrorParams ? [ErrorParams[K]] : []\n  ): FirebaseError {\n    const customData = (data[0] as ErrorData) || {};\n    const fullCode = `${this.service}/${code}`;\n    const template = this.errors[code];\n\n    const message = template ? replaceTemplate(template, customData) : 'Error';\n    // Service Name: Error message (service/code).\n    const fullMessage = `${this.serviceName}: ${message} (${fullCode}).`;\n\n    const error = new FirebaseError(fullCode, fullMessage, customData);\n\n    return error;\n  }\n}\n\nfunction replaceTemplate(template: string, data: ErrorData): string {\n  return template.replace(PATTERN, (_, key) => {\n    const value = data[key];\n    return value != null ? String(value) : `<${key}?>`;\n  });\n}\n\nconst PATTERN = /\\{\\$([^}]+)}/g;\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Evaluates a JSON string into a javascript object.\n *\n * @param {string} str A string containing JSON.\n * @return {*} The javascript object representing the specified JSON.\n */\nexport function jsonEval(str: string): unknown {\n  return JSON.parse(str);\n}\n\n/**\n * Returns JSON representing a javascript object.\n * @param {*} data Javascript object to be stringified.\n * @return {string} The JSON contents of the object.\n */\nexport function stringify(data: unknown): string {\n  return JSON.stringify(data);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { base64Decode } from './crypt';\nimport { jsonEval } from './json';\n\ninterface Claims {\n  [key: string]: {};\n}\n\ninterface DecodedToken {\n  header: object;\n  claims: Claims;\n  data: object;\n  signature: string;\n}\n\n/**\n * Decodes a Firebase auth. token into constituent parts.\n *\n * Notes:\n * - May return with invalid / incomplete claims if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const decode = function (token: string): DecodedToken {\n  let header = {},\n    claims: Claims = {},\n    data = {},\n    signature = '';\n\n  try {\n    const parts = token.split('.');\n    header = jsonEval(base64Decode(parts[0]) || '') as object;\n    claims = jsonEval(base64Decode(parts[1]) || '') as Claims;\n    signature = parts[2];\n    data = claims['d'] || {};\n    delete claims['d'];\n  } catch (e) {}\n\n  return {\n    header,\n    claims,\n    data,\n    signature\n  };\n};\n\ninterface DecodedToken {\n  header: object;\n  claims: Claims;\n  data: object;\n  signature: string;\n}\n\n/**\n * Decodes a Firebase auth. token and checks the validity of its time-based claims. Will return true if the\n * token is within the time window authorized by the 'nbf' (not-before) and 'iat' (issued-at) claims.\n *\n * Notes:\n * - May return a false negative if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const isValidTimestamp = function (token: string): boolean {\n  const claims: Claims = decode(token).claims;\n  const now: number = Math.floor(new Date().getTime() / 1000);\n  let validSince: number = 0,\n    validUntil: number = 0;\n\n  if (typeof claims === 'object') {\n    if (claims.hasOwnProperty('nbf')) {\n      validSince = claims['nbf'] as number;\n    } else if (claims.hasOwnProperty('iat')) {\n      validSince = claims['iat'] as number;\n    }\n\n    if (claims.hasOwnProperty('exp')) {\n      validUntil = claims['exp'] as number;\n    } else {\n      // token will expire after 24h by default\n      validUntil = validSince + 86400;\n    }\n  }\n\n  return (\n    !!now &&\n    !!validSince &&\n    !!validUntil &&\n    now >= validSince &&\n    now <= validUntil\n  );\n};\n\n/**\n * Decodes a Firebase auth. token and returns its issued at time if valid, null otherwise.\n *\n * Notes:\n * - May return null if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const issuedAtTime = function (token: string): number | null {\n  const claims: Claims = decode(token).claims;\n  if (typeof claims === 'object' && claims.hasOwnProperty('iat')) {\n    return claims['iat'] as number;\n  }\n  return null;\n};\n\n/**\n * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time.\n *\n * Notes:\n * - May return a false negative if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const isValidFormat = function (token: string): boolean {\n  const decoded = decode(token),\n    claims = decoded.claims;\n\n  return !!claims && typeof claims === 'object' && claims.hasOwnProperty('iat');\n};\n\n/**\n * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.\n *\n * Notes:\n * - May return a false negative if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const isAdmin = function (token: string): boolean {\n  const claims: Claims = decode(token).claims;\n  return typeof claims === 'object' && claims['admin'] === true;\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function contains<T extends object>(obj: T, key: string): boolean {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n\nexport function safeGet<T extends object, K extends keyof T>(\n  obj: T,\n  key: K\n): T[K] | undefined {\n  if (Object.prototype.hasOwnProperty.call(obj, key)) {\n    return obj[key];\n  } else {\n    return undefined;\n  }\n}\n\nexport function isEmpty(obj: object): obj is {} {\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function map<K extends string, V, U>(\n  obj: { [key in K]: V },\n  fn: (value: V, key: K, obj: { [key in K]: V }) => U,\n  contextObj?: unknown\n): { [key in K]: U } {\n  const res: Partial<{ [key in K]: U }> = {};\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      res[key] = fn.call(contextObj, obj[key], key, obj);\n    }\n  }\n  return res as { [key in K]: U };\n}\n\n/**\n * Deep equal two objects. Support Arrays and Objects.\n */\nexport function deepEqual(a: object, b: object): boolean {\n  if (a === b) {\n    return true;\n  }\n\n  const aKeys = Object.keys(a);\n  const bKeys = Object.keys(b);\n  for (const k of aKeys) {\n    if (!bKeys.includes(k)) {\n      return false;\n    }\n\n    const aProp = (a as Record<string, unknown>)[k];\n    const bProp = (b as Record<string, unknown>)[k];\n    if (isObject(aProp) && isObject(bProp)) {\n      if (!deepEqual(aProp, bProp)) {\n        return false;\n      }\n    } else if (aProp !== bProp) {\n      return false;\n    }\n  }\n\n  for (const k of bKeys) {\n    if (!aKeys.includes(k)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction isObject(thing: unknown): thing is object {\n  return thing !== null && typeof thing === 'object';\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a\n * params object (e.g. {arg: 'val', arg2: 'val2'})\n * Note: You must prepend it with ? when adding it to a URL.\n */\nexport function querystring(querystringParams: {\n  [key: string]: string | number;\n}): string {\n  const params = [];\n  for (const [key, value] of Object.entries(querystringParams)) {\n    if (Array.isArray(value)) {\n      value.forEach(arrayVal => {\n        params.push(\n          encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal)\n        );\n      });\n    } else {\n      params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\n    }\n  }\n  return params.length ? '&' + params.join('&') : '';\n}\n\n/**\n * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object\n * (e.g. {arg: 'val', arg2: 'val2'})\n */\nexport function querystringDecode(querystring: string): Record<string, string> {\n  const obj: Record<string, string> = {};\n  const tokens = querystring.replace(/^\\?/, '').split('&');\n\n  tokens.forEach(token => {\n    if (token) {\n      const [key, value] = token.split('=');\n      obj[decodeURIComponent(key)] = decodeURIComponent(value);\n    }\n  });\n  return obj;\n}\n\n/**\n * Extract the query string part of a URL, including the leading question mark (if present).\n */\nexport function extractQuerystring(url: string): string {\n  const queryStart = url.indexOf('?');\n  if (!queryStart) {\n    return '';\n  }\n  const fragmentStart = url.indexOf('#', queryStart);\n  return url.substring(\n    queryStart,\n    fragmentStart > 0 ? fragmentStart : undefined\n  );\n}\n","/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from './deferred';\n\n/**\n * Rejects if the given promise doesn't resolve in timeInMS milliseconds.\n * @internal\n */\nexport function promiseWithTimeout<T>(\n  promise: Promise<T>,\n  timeInMS = 2000\n): Promise<T> {\n  const deferredPromise = new Deferred<T>();\n  setTimeout(() => deferredPromise.reject('timeout!'), timeInMS);\n  promise.then(deferredPromise.resolve, deferredPromise.reject);\n  return deferredPromise.promise;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview SHA-1 cryptographic hash.\n * Variable names follow the notation in FIPS PUB 180-3:\n * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.\n *\n * Usage:\n *   var sha1 = new sha1();\n *   sha1.update(bytes);\n *   var hash = sha1.digest();\n *\n * Performance:\n *   Chrome 23:   ~400 Mbit/s\n *   Firefox 16:  ~250 Mbit/s\n *\n */\n\n/**\n * SHA-1 cryptographic hash constructor.\n *\n * The properties declared here are discussed in the above algorithm document.\n * @constructor\n * @final\n * @struct\n */\nexport class Sha1 {\n  /**\n   * Holds the previous values of accumulated variables a-e in the compress_\n   * function.\n   * @private\n   */\n  private chain_: number[] = [];\n\n  /**\n   * A buffer holding the partially computed hash result.\n   * @private\n   */\n  private buf_: number[] = [];\n\n  /**\n   * An array of 80 bytes, each a part of the message to be hashed.  Referred to\n   * as the message schedule in the docs.\n   * @private\n   */\n  private W_: number[] = [];\n\n  /**\n   * Contains data needed to pad messages less than 64 bytes.\n   * @private\n   */\n  private pad_: number[] = [];\n\n  /**\n   * @private {number}\n   */\n  private inbuf_: number = 0;\n\n  /**\n   * @private {number}\n   */\n  private total_: number = 0;\n\n  blockSize: number;\n\n  constructor() {\n    this.blockSize = 512 / 8;\n\n    this.pad_[0] = 128;\n    for (let i = 1; i < this.blockSize; ++i) {\n      this.pad_[i] = 0;\n    }\n\n    this.reset();\n  }\n\n  reset(): void {\n    this.chain_[0] = 0x67452301;\n    this.chain_[1] = 0xefcdab89;\n    this.chain_[2] = 0x98badcfe;\n    this.chain_[3] = 0x10325476;\n    this.chain_[4] = 0xc3d2e1f0;\n\n    this.inbuf_ = 0;\n    this.total_ = 0;\n  }\n\n  /**\n   * Internal compress helper function.\n   * @param buf Block to compress.\n   * @param offset Offset of the block in the buffer.\n   * @private\n   */\n  compress_(buf: number[] | Uint8Array | string, offset?: number): void {\n    if (!offset) {\n      offset = 0;\n    }\n\n    const W = this.W_;\n\n    // get 16 big endian words\n    if (typeof buf === 'string') {\n      for (let i = 0; i < 16; i++) {\n        // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS\n        // have a bug that turns the post-increment ++ operator into pre-increment\n        // during JIT compilation.  We have code that depends heavily on SHA-1 for\n        // correctness and which is affected by this bug, so I've removed all uses\n        // of post-increment ++ in which the result value is used.  We can revert\n        // this change once the Safari bug\n        // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and\n        // most clients have been updated.\n        W[i] =\n          (buf.charCodeAt(offset) << 24) |\n          (buf.charCodeAt(offset + 1) << 16) |\n          (buf.charCodeAt(offset + 2) << 8) |\n          buf.charCodeAt(offset + 3);\n        offset += 4;\n      }\n    } else {\n      for (let i = 0; i < 16; i++) {\n        W[i] =\n          (buf[offset] << 24) |\n          (buf[offset + 1] << 16) |\n          (buf[offset + 2] << 8) |\n          buf[offset + 3];\n        offset += 4;\n      }\n    }\n\n    // expand to 80 words\n    for (let i = 16; i < 80; i++) {\n      const t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\n      W[i] = ((t << 1) | (t >>> 31)) & 0xffffffff;\n    }\n\n    let a = this.chain_[0];\n    let b = this.chain_[1];\n    let c = this.chain_[2];\n    let d = this.chain_[3];\n    let e = this.chain_[4];\n    let f, k;\n\n    // TODO(user): Try to unroll this loop to speed up the computation.\n    for (let i = 0; i < 80; i++) {\n      if (i < 40) {\n        if (i < 20) {\n          f = d ^ (b & (c ^ d));\n          k = 0x5a827999;\n        } else {\n          f = b ^ c ^ d;\n          k = 0x6ed9eba1;\n        }\n      } else {\n        if (i < 60) {\n          f = (b & c) | (d & (b | c));\n          k = 0x8f1bbcdc;\n        } else {\n          f = b ^ c ^ d;\n          k = 0xca62c1d6;\n        }\n      }\n\n      const t = (((a << 5) | (a >>> 27)) + f + e + k + W[i]) & 0xffffffff;\n      e = d;\n      d = c;\n      c = ((b << 30) | (b >>> 2)) & 0xffffffff;\n      b = a;\n      a = t;\n    }\n\n    this.chain_[0] = (this.chain_[0] + a) & 0xffffffff;\n    this.chain_[1] = (this.chain_[1] + b) & 0xffffffff;\n    this.chain_[2] = (this.chain_[2] + c) & 0xffffffff;\n    this.chain_[3] = (this.chain_[3] + d) & 0xffffffff;\n    this.chain_[4] = (this.chain_[4] + e) & 0xffffffff;\n  }\n\n  update(bytes?: number[] | Uint8Array | string, length?: number): void {\n    // TODO(johnlenz): tighten the function signature and remove this check\n    if (bytes == null) {\n      return;\n    }\n\n    if (length === undefined) {\n      length = bytes.length;\n    }\n\n    const lengthMinusBlock = length - this.blockSize;\n    let n = 0;\n    // Using local instead of member variables gives ~5% speedup on Firefox 16.\n    const buf = this.buf_;\n    let inbuf = this.inbuf_;\n\n    // The outer while loop should execute at most twice.\n    while (n < length) {\n      // When we have no data in the block to top up, we can directly process the\n      // input buffer (assuming it contains sufficient data). This gives ~25%\n      // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that\n      // the data is provided in large chunks (or in multiples of 64 bytes).\n      if (inbuf === 0) {\n        while (n <= lengthMinusBlock) {\n          this.compress_(bytes, n);\n          n += this.blockSize;\n        }\n      }\n\n      if (typeof bytes === 'string') {\n        while (n < length) {\n          buf[inbuf] = bytes.charCodeAt(n);\n          ++inbuf;\n          ++n;\n          if (inbuf === this.blockSize) {\n            this.compress_(buf);\n            inbuf = 0;\n            // Jump to the outer loop so we use the full-block optimization.\n            break;\n          }\n        }\n      } else {\n        while (n < length) {\n          buf[inbuf] = bytes[n];\n          ++inbuf;\n          ++n;\n          if (inbuf === this.blockSize) {\n            this.compress_(buf);\n            inbuf = 0;\n            // Jump to the outer loop so we use the full-block optimization.\n            break;\n          }\n        }\n      }\n    }\n\n    this.inbuf_ = inbuf;\n    this.total_ += length;\n  }\n\n  /** @override */\n  digest(): number[] {\n    const digest: number[] = [];\n    let totalBits = this.total_ * 8;\n\n    // Add pad 0x80 0x00*.\n    if (this.inbuf_ < 56) {\n      this.update(this.pad_, 56 - this.inbuf_);\n    } else {\n      this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));\n    }\n\n    // Add # bits.\n    for (let i = this.blockSize - 1; i >= 56; i--) {\n      this.buf_[i] = totalBits & 255;\n      totalBits /= 256; // Don't use bit-shifting here!\n    }\n\n    this.compress_(this.buf_);\n\n    let n = 0;\n    for (let i = 0; i < 5; i++) {\n      for (let j = 24; j >= 0; j -= 8) {\n        digest[n] = (this.chain_[i] >> j) & 255;\n        ++n;\n      }\n    }\n    return digest;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport type NextFn<T> = (value: T) => void;\nexport type ErrorFn = (error: Error) => void;\nexport type CompleteFn = () => void;\n\nexport interface Observer<T> {\n  // Called once for each value in a stream of values.\n  next: NextFn<T>;\n\n  // A stream terminates by a single call to EITHER error() or complete().\n  error: ErrorFn;\n\n  // No events will be sent to next() once complete() is called.\n  complete: CompleteFn;\n}\n\nexport type PartialObserver<T> = Partial<Observer<T>>;\n\n// TODO: Support also Unsubscribe.unsubscribe?\nexport type Unsubscribe = () => void;\n\n/**\n * The Subscribe interface has two forms - passing the inline function\n * callbacks, or a object interface with callback properties.\n */\nexport interface Subscribe<T> {\n  (next?: NextFn<T>, error?: ErrorFn, complete?: CompleteFn): Unsubscribe;\n  (observer: PartialObserver<T>): Unsubscribe;\n}\n\nexport interface Observable<T> {\n  // Subscribe method\n  subscribe: Subscribe<T>;\n}\n\nexport type Executor<T> = (observer: Observer<T>) => void;\n\n/**\n * Helper to make a Subscribe function (just like Promise helps make a\n * Thenable).\n *\n * @param executor Function which can make calls to a single Observer\n *     as a proxy.\n * @param onNoObservers Callback when count of Observers goes to zero.\n */\nexport function createSubscribe<T>(\n  executor: Executor<T>,\n  onNoObservers?: Executor<T>\n): Subscribe<T> {\n  const proxy = new ObserverProxy<T>(executor, onNoObservers);\n  return proxy.subscribe.bind(proxy);\n}\n\n/**\n * Implement fan-out for any number of Observers attached via a subscribe\n * function.\n */\nclass ObserverProxy<T> implements Observer<T> {\n  private observers: Array<Observer<T>> | undefined = [];\n  private unsubscribes: Unsubscribe[] = [];\n  private onNoObservers: Executor<T> | undefined;\n  private observerCount = 0;\n  // Micro-task scheduling by calling task.then().\n  private task = Promise.resolve();\n  private finalized = false;\n  private finalError?: Error;\n\n  /**\n   * @param executor Function which can make calls to a single Observer\n   *     as a proxy.\n   * @param onNoObservers Callback when count of Observers goes to zero.\n   */\n  constructor(executor: Executor<T>, onNoObservers?: Executor<T>) {\n    this.onNoObservers = onNoObservers;\n    // Call the executor asynchronously so subscribers that are called\n    // synchronously after the creation of the subscribe function\n    // can still receive the very first value generated in the executor.\n    this.task\n      .then(() => {\n        executor(this);\n      })\n      .catch(e => {\n        this.error(e);\n      });\n  }\n\n  next(value: T): void {\n    this.forEachObserver((observer: Observer<T>) => {\n      observer.next(value);\n    });\n  }\n\n  error(error: Error): void {\n    this.forEachObserver((observer: Observer<T>) => {\n      observer.error(error);\n    });\n    this.close(error);\n  }\n\n  complete(): void {\n    this.forEachObserver((observer: Observer<T>) => {\n      observer.complete();\n    });\n    this.close();\n  }\n\n  /**\n   * Subscribe function that can be used to add an Observer to the fan-out list.\n   *\n   * - We require that no event is sent to a subscriber sychronously to their\n   *   call to subscribe().\n   */\n  subscribe(\n    nextOrObserver?: NextFn<T> | PartialObserver<T>,\n    error?: ErrorFn,\n    complete?: CompleteFn\n  ): Unsubscribe {\n    let observer: Observer<T>;\n\n    if (\n      nextOrObserver === undefined &&\n      error === undefined &&\n      complete === undefined\n    ) {\n      throw new Error('Missing Observer.');\n    }\n\n    // Assemble an Observer object when passed as callback functions.\n    if (\n      implementsAnyMethods(nextOrObserver as { [key: string]: unknown }, [\n        'next',\n        'error',\n        'complete'\n      ])\n    ) {\n      observer = nextOrObserver as Observer<T>;\n    } else {\n      observer = {\n        next: nextOrObserver as NextFn<T>,\n        error,\n        complete\n      } as Observer<T>;\n    }\n\n    if (observer.next === undefined) {\n      observer.next = noop as NextFn<T>;\n    }\n    if (observer.error === undefined) {\n      observer.error = noop as ErrorFn;\n    }\n    if (observer.complete === undefined) {\n      observer.complete = noop as CompleteFn;\n    }\n\n    const unsub = this.unsubscribeOne.bind(this, this.observers!.length);\n\n    // Attempt to subscribe to a terminated Observable - we\n    // just respond to the Observer with the final error or complete\n    // event.\n    if (this.finalized) {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.task.then(() => {\n        try {\n          if (this.finalError) {\n            observer.error(this.finalError);\n          } else {\n            observer.complete();\n          }\n        } catch (e) {\n          // nothing\n        }\n        return;\n      });\n    }\n\n    this.observers!.push(observer as Observer<T>);\n\n    return unsub;\n  }\n\n  // Unsubscribe is synchronous - we guarantee that no events are sent to\n  // any unsubscribed Observer.\n  private unsubscribeOne(i: number): void {\n    if (this.observers === undefined || this.observers[i] === undefined) {\n      return;\n    }\n\n    delete this.observers[i];\n\n    this.observerCount -= 1;\n    if (this.observerCount === 0 && this.onNoObservers !== undefined) {\n      this.onNoObservers(this);\n    }\n  }\n\n  private forEachObserver(fn: (observer: Observer<T>) => void): void {\n    if (this.finalized) {\n      // Already closed by previous event....just eat the additional values.\n      return;\n    }\n\n    // Since sendOne calls asynchronously - there is no chance that\n    // this.observers will become undefined.\n    for (let i = 0; i < this.observers!.length; i++) {\n      this.sendOne(i, fn);\n    }\n  }\n\n  // Call the Observer via one of it's callback function. We are careful to\n  // confirm that the observe has not been unsubscribed since this asynchronous\n  // function had been queued.\n  private sendOne(i: number, fn: (observer: Observer<T>) => void): void {\n    // Execute the callback asynchronously\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.task.then(() => {\n      if (this.observers !== undefined && this.observers[i] !== undefined) {\n        try {\n          fn(this.observers[i]);\n        } catch (e) {\n          // Ignore exceptions raised in Observers or missing methods of an\n          // Observer.\n          // Log error to console. b/31404806\n          if (typeof console !== 'undefined' && console.error) {\n            console.error(e);\n          }\n        }\n      }\n    });\n  }\n\n  private close(err?: Error): void {\n    if (this.finalized) {\n      return;\n    }\n    this.finalized = true;\n    if (err !== undefined) {\n      this.finalError = err;\n    }\n    // Proxy is no longer needed - garbage collect references\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.task.then(() => {\n      this.observers = undefined;\n      this.onNoObservers = undefined;\n    });\n  }\n}\n\n/** Turn synchronous function into one called asynchronously. */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function async(fn: Function, onError?: ErrorFn): Function {\n  return (...args: unknown[]) => {\n    Promise.resolve(true)\n      .then(() => {\n        fn(...args);\n      })\n      .catch((error: Error) => {\n        if (onError) {\n          onError(error);\n        }\n      });\n  };\n}\n\n/**\n * Return true if the object passed in implements any of the named methods.\n */\nfunction implementsAnyMethods(\n  obj: { [key: string]: unknown },\n  methods: string[]\n): boolean {\n  if (typeof obj !== 'object' || obj === null) {\n    return false;\n  }\n\n  for (const method of methods) {\n    if (method in obj && typeof obj[method] === 'function') {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction noop(): void {\n  // do nothing\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Check to make sure the appropriate number of arguments are provided for a public function.\n * Throws an error if it fails.\n *\n * @param fnName The function name\n * @param minCount The minimum number of arguments to allow for the function call\n * @param maxCount The maximum number of argument to allow for the function call\n * @param argCount The actual number of arguments provided.\n */\nexport const validateArgCount = function (\n  fnName: string,\n  minCount: number,\n  maxCount: number,\n  argCount: number\n): void {\n  let argError;\n  if (argCount < minCount) {\n    argError = 'at least ' + minCount;\n  } else if (argCount > maxCount) {\n    argError = maxCount === 0 ? 'none' : 'no more than ' + maxCount;\n  }\n  if (argError) {\n    const error =\n      fnName +\n      ' failed: Was called with ' +\n      argCount +\n      (argCount === 1 ? ' argument.' : ' arguments.') +\n      ' Expects ' +\n      argError +\n      '.';\n    throw new Error(error);\n  }\n};\n\n/**\n * Generates a string to prefix an error message about failed argument validation\n *\n * @param fnName The function name\n * @param argName The name of the argument\n * @return The prefix to add to the error thrown for validation.\n */\nexport function errorPrefix(fnName: string, argName: string): string {\n  return `${fnName} failed: ${argName} argument `;\n}\n\n/**\n * @param fnName\n * @param argumentNumber\n * @param namespace\n * @param optional\n */\nexport function validateNamespace(\n  fnName: string,\n  namespace: string,\n  optional: boolean\n): void {\n  if (optional && !namespace) {\n    return;\n  }\n  if (typeof namespace !== 'string') {\n    //TODO: I should do more validation here. We only allow certain chars in namespaces.\n    throw new Error(\n      errorPrefix(fnName, 'namespace') + 'must be a valid firebase namespace.'\n    );\n  }\n}\n\nexport function validateCallback(\n  fnName: string,\n  argumentName: string,\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  callback: Function,\n  optional: boolean\n): void {\n  if (optional && !callback) {\n    return;\n  }\n  if (typeof callback !== 'function') {\n    throw new Error(\n      errorPrefix(fnName, argumentName) + 'must be a valid function.'\n    );\n  }\n}\n\nexport function validateContextObject(\n  fnName: string,\n  argumentName: string,\n  context: unknown,\n  optional: boolean\n): void {\n  if (optional && !context) {\n    return;\n  }\n  if (typeof context !== 'object' || context === null) {\n    throw new Error(\n      errorPrefix(fnName, argumentName) + 'must be a valid context object.'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from './assert';\n\n// Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they\n// automatically replaced '\\r\\n' with '\\n', and they didn't handle surrogate pairs,\n// so it's been modified.\n\n// Note that not all Unicode characters appear as single characters in JavaScript strings.\n// fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters\n// use 2 characters in Javascript.  All 4-byte UTF-8 characters begin with a first\n// character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate\n// pair).\n// See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3\n\n/**\n * @param {string} str\n * @return {Array}\n */\nexport const stringToByteArray = function (str: string): number[] {\n  const out: number[] = [];\n  let p = 0;\n  for (let i = 0; i < str.length; i++) {\n    let c = str.charCodeAt(i);\n\n    // Is this the lead surrogate in a surrogate pair?\n    if (c >= 0xd800 && c <= 0xdbff) {\n      const high = c - 0xd800; // the high 10 bits.\n      i++;\n      assert(i < str.length, 'Surrogate pair missing trail surrogate.');\n      const low = str.charCodeAt(i) - 0xdc00; // the low 10 bits.\n      c = 0x10000 + (high << 10) + low;\n    }\n\n    if (c < 128) {\n      out[p++] = c;\n    } else if (c < 2048) {\n      out[p++] = (c >> 6) | 192;\n      out[p++] = (c & 63) | 128;\n    } else if (c < 65536) {\n      out[p++] = (c >> 12) | 224;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    } else {\n      out[p++] = (c >> 18) | 240;\n      out[p++] = ((c >> 12) & 63) | 128;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    }\n  }\n  return out;\n};\n\n/**\n * Calculate length without actually converting; useful for doing cheaper validation.\n * @param {string} str\n * @return {number}\n */\nexport const stringLength = function (str: string): number {\n  let p = 0;\n  for (let i = 0; i < str.length; i++) {\n    const c = str.charCodeAt(i);\n    if (c < 128) {\n      p++;\n    } else if (c < 2048) {\n      p += 2;\n    } else if (c >= 0xd800 && c <= 0xdbff) {\n      // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.\n      p += 4;\n      i++; // skip trail surrogate.\n    } else {\n      p += 3;\n    }\n  }\n  return p;\n};\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * The amount of milliseconds to exponentially increase.\n */\nconst DEFAULT_INTERVAL_MILLIS = 1000;\n\n/**\n * The factor to backoff by.\n * Should be a number greater than 1.\n */\nconst DEFAULT_BACKOFF_FACTOR = 2;\n\n/**\n * The maximum milliseconds to increase to.\n *\n * <p>Visible for testing\n */\nexport const MAX_VALUE_MILLIS = 4 * 60 * 60 * 1000; // Four hours, like iOS and Android.\n\n/**\n * The percentage of backoff time to randomize by.\n * See\n * http://go/safe-client-behavior#step-1-determine-the-appropriate-retry-interval-to-handle-spike-traffic\n * for context.\n *\n * <p>Visible for testing\n */\nexport const RANDOM_FACTOR = 0.5;\n\n/**\n * Based on the backoff method from\n * https://github.com/google/closure-library/blob/master/closure/goog/math/exponentialbackoff.js.\n * Extracted here so we don't need to pass metadata and a stateful ExponentialBackoff object around.\n */\nexport function calculateBackoffMillis(\n  backoffCount: number,\n  intervalMillis: number = DEFAULT_INTERVAL_MILLIS,\n  backoffFactor: number = DEFAULT_BACKOFF_FACTOR\n): number {\n  // Calculates an exponentially increasing value.\n  // Deviation: calculates value from count and a constant interval, so we only need to save value\n  // and count to restore state.\n  const currBaseValue = intervalMillis * Math.pow(backoffFactor, backoffCount);\n\n  // A random \"fuzz\" to avoid waves of retries.\n  // Deviation: randomFactor is required.\n  const randomWait = Math.round(\n    // A fraction of the backoff value to add/subtract.\n    // Deviation: changes multiplication order to improve readability.\n    RANDOM_FACTOR *\n      currBaseValue *\n      // A random float (rounded to int by Math.round above) in the range [-1, 1]. Determines\n      // if we add or subtract.\n      (Math.random() - 0.5) *\n      2\n  );\n\n  // Limits backoff to max to avoid effectively permanent backoff.\n  return Math.min(MAX_VALUE_MILLIS, currBaseValue + randomWait);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Provide English ordinal letters after a number\n */\nexport function ordinal(i: number): string {\n  if (!Number.isFinite(i)) {\n    return `${i}`;\n  }\n  return i + indicator(i);\n}\n\nfunction indicator(i: number): string {\n  i = Math.abs(i);\n  const cent = i % 100;\n  if (cent >= 10 && cent <= 20) {\n    return 'th';\n  }\n  const dec = i % 10;\n  if (dec === 1) {\n    return 'st';\n  }\n  if (dec === 2) {\n    return 'nd';\n  }\n  if (dec === 3) {\n    return 'rd';\n  }\n  return 'th';\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport interface Compat<T> {\n  _delegate: T;\n}\n\nexport function getModularInstance<ExpService>(\n  service: Compat<ExpService> | ExpService\n): ExpService {\n  if (service && (service as Compat<ExpService>)._delegate) {\n    return (service as Compat<ExpService>)._delegate;\n  } else {\n    return service as ExpService;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  InstantiationMode,\n  InstanceFactory,\n  ComponentType,\n  Dictionary,\n  Name,\n  onInstanceCreatedCallback\n} from './types';\n\n/**\n * Component for service name T, e.g. `auth`, `auth-internal`\n */\nexport class Component<T extends Name = Name> {\n  multipleInstances = false;\n  /**\n   * Properties to be added to the service namespace\n   */\n  serviceProps: Dictionary = {};\n\n  instantiationMode = InstantiationMode.LAZY;\n\n  onInstanceCreated: onInstanceCreatedCallback<T> | null = null;\n\n  /**\n   *\n   * @param name The public service name, e.g. app, auth, firestore, database\n   * @param instanceFactory Service factory responsible for creating the public interface\n   * @param type whether the service provided by the component is public or private\n   */\n  constructor(\n    readonly name: T,\n    readonly instanceFactory: InstanceFactory<T>,\n    readonly type: ComponentType\n  ) {}\n\n  setInstantiationMode(mode: InstantiationMode): this {\n    this.instantiationMode = mode;\n    return this;\n  }\n\n  setMultipleInstances(multipleInstances: boolean): this {\n    this.multipleInstances = multipleInstances;\n    return this;\n  }\n\n  setServiceProps(props: Dictionary): this {\n    this.serviceProps = props;\n    return this;\n  }\n\n  setInstanceCreatedCallback(callback: onInstanceCreatedCallback<T>): this {\n    this.onInstanceCreated = callback;\n    return this;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const DEFAULT_ENTRY_NAME = '[DEFAULT]';\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from '@firebase/util';\nimport { ComponentContainer } from './component_container';\nimport { DEFAULT_ENTRY_NAME } from './constants';\nimport {\n  InitializeOptions,\n  InstantiationMode,\n  Name,\n  NameServiceMapping,\n  OnInitCallBack\n} from './types';\nimport { Component } from './component';\n\n/**\n * Provider for instance for service name T, e.g. 'auth', 'auth-internal'\n * NameServiceMapping[T] is an alias for the type of the instance\n */\nexport class Provider<T extends Name> {\n  private component: Component<T> | null = null;\n  private readonly instances: Map<string, NameServiceMapping[T]> = new Map();\n  private readonly instancesDeferred: Map<\n    string,\n    Deferred<NameServiceMapping[T]>\n  > = new Map();\n  private readonly instancesOptions: Map<string, Record<string, unknown>> =\n    new Map();\n  private onInitCallbacks: Map<string, Set<OnInitCallBack<T>>> = new Map();\n\n  constructor(\n    private readonly name: T,\n    private readonly container: ComponentContainer\n  ) {}\n\n  /**\n   * @param identifier A provider can provide mulitple instances of a service\n   * if this.component.multipleInstances is true.\n   */\n  get(identifier?: string): Promise<NameServiceMapping[T]> {\n    // if multipleInstances is not supported, use the default name\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n\n    if (!this.instancesDeferred.has(normalizedIdentifier)) {\n      const deferred = new Deferred<NameServiceMapping[T]>();\n      this.instancesDeferred.set(normalizedIdentifier, deferred);\n\n      if (\n        this.isInitialized(normalizedIdentifier) ||\n        this.shouldAutoInitialize()\n      ) {\n        // initialize the service if it can be auto-initialized\n        try {\n          const instance = this.getOrInitializeService({\n            instanceIdentifier: normalizedIdentifier\n          });\n          if (instance) {\n            deferred.resolve(instance);\n          }\n        } catch (e) {\n          // when the instance factory throws an exception during get(), it should not cause\n          // a fatal error. We just return the unresolved promise in this case.\n        }\n      }\n    }\n\n    return this.instancesDeferred.get(normalizedIdentifier)!.promise;\n  }\n\n  /**\n   *\n   * @param options.identifier A provider can provide mulitple instances of a service\n   * if this.component.multipleInstances is true.\n   * @param options.optional If optional is false or not provided, the method throws an error when\n   * the service is not immediately available.\n   * If optional is true, the method returns null if the service is not immediately available.\n   */\n  getImmediate(options: {\n    identifier?: string;\n    optional: true;\n  }): NameServiceMapping[T] | null;\n  getImmediate(options?: {\n    identifier?: string;\n    optional?: false;\n  }): NameServiceMapping[T];\n  getImmediate(options?: {\n    identifier?: string;\n    optional?: boolean;\n  }): NameServiceMapping[T] | null {\n    // if multipleInstances is not supported, use the default name\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(\n      options?.identifier\n    );\n    const optional = options?.optional ?? false;\n\n    if (\n      this.isInitialized(normalizedIdentifier) ||\n      this.shouldAutoInitialize()\n    ) {\n      try {\n        return this.getOrInitializeService({\n          instanceIdentifier: normalizedIdentifier\n        });\n      } catch (e) {\n        if (optional) {\n          return null;\n        } else {\n          throw e;\n        }\n      }\n    } else {\n      // In case a component is not initialized and should/can not be auto-initialized at the moment, return null if the optional flag is set, or throw\n      if (optional) {\n        return null;\n      } else {\n        throw Error(`Service ${this.name} is not available`);\n      }\n    }\n  }\n\n  getComponent(): Component<T> | null {\n    return this.component;\n  }\n\n  setComponent(component: Component<T>): void {\n    if (component.name !== this.name) {\n      throw Error(\n        `Mismatching Component ${component.name} for Provider ${this.name}.`\n      );\n    }\n\n    if (this.component) {\n      throw Error(`Component for ${this.name} has already been provided`);\n    }\n\n    this.component = component;\n\n    // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)\n    if (!this.shouldAutoInitialize()) {\n      return;\n    }\n\n    // if the service is eager, initialize the default instance\n    if (isComponentEager(component)) {\n      try {\n        this.getOrInitializeService({ instanceIdentifier: DEFAULT_ENTRY_NAME });\n      } catch (e) {\n        // when the instance factory for an eager Component throws an exception during the eager\n        // initialization, it should not cause a fatal error.\n        // TODO: Investigate if we need to make it configurable, because some component may want to cause\n        // a fatal error in this case?\n      }\n    }\n\n    // Create service instances for the pending promises and resolve them\n    // NOTE: if this.multipleInstances is false, only the default instance will be created\n    // and all promises with resolve with it regardless of the identifier.\n    for (const [\n      instanceIdentifier,\n      instanceDeferred\n    ] of this.instancesDeferred.entries()) {\n      const normalizedIdentifier =\n        this.normalizeInstanceIdentifier(instanceIdentifier);\n\n      try {\n        // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.\n        const instance = this.getOrInitializeService({\n          instanceIdentifier: normalizedIdentifier\n        })!;\n        instanceDeferred.resolve(instance);\n      } catch (e) {\n        // when the instance factory throws an exception, it should not cause\n        // a fatal error. We just leave the promise unresolved.\n      }\n    }\n  }\n\n  clearInstance(identifier: string = DEFAULT_ENTRY_NAME): void {\n    this.instancesDeferred.delete(identifier);\n    this.instancesOptions.delete(identifier);\n    this.instances.delete(identifier);\n  }\n\n  // app.delete() will call this method on every provider to delete the services\n  // TODO: should we mark the provider as deleted?\n  async delete(): Promise<void> {\n    const services = Array.from(this.instances.values());\n\n    await Promise.all([\n      ...services\n        .filter(service => 'INTERNAL' in service) // legacy services\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        .map(service => (service as any).INTERNAL!.delete()),\n      ...services\n        .filter(service => '_delete' in service) // modularized services\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        .map(service => (service as any)._delete())\n    ]);\n  }\n\n  isComponentSet(): boolean {\n    return this.component != null;\n  }\n\n  isInitialized(identifier: string = DEFAULT_ENTRY_NAME): boolean {\n    return this.instances.has(identifier);\n  }\n\n  getOptions(identifier: string = DEFAULT_ENTRY_NAME): Record<string, unknown> {\n    return this.instancesOptions.get(identifier) || {};\n  }\n\n  initialize(opts: InitializeOptions = {}): NameServiceMapping[T] {\n    const { options = {} } = opts;\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(\n      opts.instanceIdentifier\n    );\n    if (this.isInitialized(normalizedIdentifier)) {\n      throw Error(\n        `${this.name}(${normalizedIdentifier}) has already been initialized`\n      );\n    }\n\n    if (!this.isComponentSet()) {\n      throw Error(`Component ${this.name} has not been registered yet`);\n    }\n\n    const instance = this.getOrInitializeService({\n      instanceIdentifier: normalizedIdentifier,\n      options\n    })!;\n\n    // resolve any pending promise waiting for the service instance\n    for (const [\n      instanceIdentifier,\n      instanceDeferred\n    ] of this.instancesDeferred.entries()) {\n      const normalizedDeferredIdentifier =\n        this.normalizeInstanceIdentifier(instanceIdentifier);\n      if (normalizedIdentifier === normalizedDeferredIdentifier) {\n        instanceDeferred.resolve(instance);\n      }\n    }\n\n    return instance;\n  }\n\n  /**\n   *\n   * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().\n   * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.\n   *\n   * @param identifier An optional instance identifier\n   * @returns a function to unregister the callback\n   */\n  onInit(callback: OnInitCallBack<T>, identifier?: string): () => void {\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n    const existingCallbacks =\n      this.onInitCallbacks.get(normalizedIdentifier) ??\n      new Set<OnInitCallBack<T>>();\n    existingCallbacks.add(callback);\n    this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);\n\n    const existingInstance = this.instances.get(normalizedIdentifier);\n    if (existingInstance) {\n      callback(existingInstance, normalizedIdentifier);\n    }\n\n    return () => {\n      existingCallbacks.delete(callback);\n    };\n  }\n\n  /**\n   * Invoke onInit callbacks synchronously\n   * @param instance the service instance`\n   */\n  private invokeOnInitCallbacks(\n    instance: NameServiceMapping[T],\n    identifier: string\n  ): void {\n    const callbacks = this.onInitCallbacks.get(identifier);\n    if (!callbacks) {\n      return;\n    }\n    for (const callback of callbacks) {\n      try {\n        callback(instance, identifier);\n      } catch {\n        // ignore errors in the onInit callback\n      }\n    }\n  }\n\n  private getOrInitializeService({\n    instanceIdentifier,\n    options = {}\n  }: {\n    instanceIdentifier: string;\n    options?: Record<string, unknown>;\n  }): NameServiceMapping[T] | null {\n    let instance = this.instances.get(instanceIdentifier);\n    if (!instance && this.component) {\n      instance = this.component.instanceFactory(this.container, {\n        instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),\n        options\n      });\n      this.instances.set(instanceIdentifier, instance);\n      this.instancesOptions.set(instanceIdentifier, options);\n\n      /**\n       * Invoke onInit listeners.\n       * Note this.component.onInstanceCreated is different, which is used by the component creator,\n       * while onInit listeners are registered by consumers of the provider.\n       */\n      this.invokeOnInitCallbacks(instance, instanceIdentifier);\n\n      /**\n       * Order is important\n       * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which\n       * makes `isInitialized()` return true.\n       */\n      if (this.component.onInstanceCreated) {\n        try {\n          this.component.onInstanceCreated(\n            this.container,\n            instanceIdentifier,\n            instance\n          );\n        } catch {\n          // ignore errors in the onInstanceCreatedCallback\n        }\n      }\n    }\n\n    return instance || null;\n  }\n\n  private normalizeInstanceIdentifier(\n    identifier: string = DEFAULT_ENTRY_NAME\n  ): string {\n    if (this.component) {\n      return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;\n    } else {\n      return identifier; // assume multiple instances are supported before the component is provided.\n    }\n  }\n\n  private shouldAutoInitialize(): boolean {\n    return (\n      !!this.component &&\n      this.component.instantiationMode !== InstantiationMode.EXPLICIT\n    );\n  }\n}\n\n// undefined should be passed to the service factory for the default instance\nfunction normalizeIdentifierForFactory(identifier: string): string | undefined {\n  return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;\n}\n\nfunction isComponentEager<T extends Name>(component: Component<T>): boolean {\n  return component.instantiationMode === InstantiationMode.EAGER;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Provider } from './provider';\nimport { Component } from './component';\nimport { Name } from './types';\n\n/**\n * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`\n */\nexport class ComponentContainer {\n  private readonly providers = new Map<string, Provider<Name>>();\n\n  constructor(private readonly name: string) {}\n\n  /**\n   *\n   * @param component Component being added\n   * @param overwrite When a component with the same name has already been registered,\n   * if overwrite is true: overwrite the existing component with the new component and create a new\n   * provider with the new component. It can be useful in tests where you want to use different mocks\n   * for different tests.\n   * if overwrite is false: throw an exception\n   */\n  addComponent<T extends Name>(component: Component<T>): void {\n    const provider = this.getProvider(component.name);\n    if (provider.isComponentSet()) {\n      throw new Error(\n        `Component ${component.name} has already been registered with ${this.name}`\n      );\n    }\n\n    provider.setComponent(component);\n  }\n\n  addOrOverwriteComponent<T extends Name>(component: Component<T>): void {\n    const provider = this.getProvider(component.name);\n    if (provider.isComponentSet()) {\n      // delete the existing provider from the container, so we can register the new component\n      this.providers.delete(component.name);\n    }\n\n    this.addComponent(component);\n  }\n\n  /**\n   * getProvider provides a type safe interface where it can only be called with a field name\n   * present in NameServiceMapping interface.\n   *\n   * Firebase SDKs providing services should extend NameServiceMapping interface to register\n   * themselves.\n   */\n  getProvider<T extends Name>(name: T): Provider<T> {\n    if (this.providers.has(name)) {\n      return this.providers.get(name) as unknown as Provider<T>;\n    }\n\n    // create a Provider for a service that hasn't registered with Firebase\n    const provider = new Provider<T>(name, this);\n    this.providers.set(name, provider as unknown as Provider<Name>);\n\n    return provider as Provider<T>;\n  }\n\n  getProviders(): Array<Provider<Name>> {\n    return Array.from(this.providers.values());\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport type LogLevelString =\n  | 'debug'\n  | 'verbose'\n  | 'info'\n  | 'warn'\n  | 'error'\n  | 'silent';\n\nexport interface LogOptions {\n  level: LogLevelString;\n}\n\nexport type LogCallback = (callbackParams: LogCallbackParams) => void;\n\nexport interface LogCallbackParams {\n  level: LogLevelString;\n  message: string;\n  args: unknown[];\n  type: string;\n}\n\n/**\n * A container for all of the Logger instances\n */\nexport const instances: Logger[] = [];\n\n/**\n * The JS SDK supports 5 log levels and also allows a user the ability to\n * silence the logs altogether.\n *\n * The order is a follows:\n * DEBUG < VERBOSE < INFO < WARN < ERROR\n *\n * All of the log types above the current log level will be captured (i.e. if\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\n * `VERBOSE` logs will not)\n */\nexport enum LogLevel {\n  DEBUG,\n  VERBOSE,\n  INFO,\n  WARN,\n  ERROR,\n  SILENT\n}\n\nconst levelStringToEnum: { [key in LogLevelString]: LogLevel } = {\n  'debug': LogLevel.DEBUG,\n  'verbose': LogLevel.VERBOSE,\n  'info': LogLevel.INFO,\n  'warn': LogLevel.WARN,\n  'error': LogLevel.ERROR,\n  'silent': LogLevel.SILENT\n};\n\n/**\n * The default log level\n */\nconst defaultLogLevel: LogLevel = LogLevel.INFO;\n\n/**\n * We allow users the ability to pass their own log handler. We will pass the\n * type of log, the current log level, and any other arguments passed (i.e. the\n * messages that the user wants to log) to this function.\n */\nexport type LogHandler = (\n  loggerInstance: Logger,\n  logType: LogLevel,\n  ...args: unknown[]\n) => void;\n\n/**\n * By default, `console.debug` is not displayed in the developer console (in\n * chrome). To avoid forcing users to have to opt-in to these logs twice\n * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\n * logs to the `console.log` function.\n */\nconst ConsoleMethod = {\n  [LogLevel.DEBUG]: 'log',\n  [LogLevel.VERBOSE]: 'log',\n  [LogLevel.INFO]: 'info',\n  [LogLevel.WARN]: 'warn',\n  [LogLevel.ERROR]: 'error'\n};\n\n/**\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\n * messages on to their corresponding console counterparts (if the log method\n * is supported by the current log level)\n */\nconst defaultLogHandler: LogHandler = (instance, logType, ...args): void => {\n  if (logType < instance.logLevel) {\n    return;\n  }\n  const now = new Date().toISOString();\n  const method = ConsoleMethod[logType as keyof typeof ConsoleMethod];\n  if (method) {\n    console[method as 'log' | 'info' | 'warn' | 'error'](\n      `[${now}]  ${instance.name}:`,\n      ...args\n    );\n  } else {\n    throw new Error(\n      `Attempted to log a message with an invalid logType (value: ${logType})`\n    );\n  }\n};\n\nexport class Logger {\n  /**\n   * Gives you an instance of a Logger to capture messages according to\n   * Firebase's logging scheme.\n   *\n   * @param name The name that the logs will be associated with\n   */\n  constructor(public name: string) {\n    /**\n     * Capture the current instance for later use\n     */\n    instances.push(this);\n  }\n\n  /**\n   * The log level of the given Logger instance.\n   */\n  private _logLevel = defaultLogLevel;\n\n  get logLevel(): LogLevel {\n    return this._logLevel;\n  }\n\n  set logLevel(val: LogLevel) {\n    if (!(val in LogLevel)) {\n      throw new TypeError(`Invalid value \"${val}\" assigned to \\`logLevel\\``);\n    }\n    this._logLevel = val;\n  }\n\n  // Workaround for setter/getter having to be the same type.\n  setLogLevel(val: LogLevel | LogLevelString): void {\n    this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;\n  }\n\n  /**\n   * The main (internal) log handler for the Logger instance.\n   * Can be set to a new function in internal package code but not by user.\n   */\n  private _logHandler: LogHandler = defaultLogHandler;\n  get logHandler(): LogHandler {\n    return this._logHandler;\n  }\n  set logHandler(val: LogHandler) {\n    if (typeof val !== 'function') {\n      throw new TypeError('Value assigned to `logHandler` must be a function');\n    }\n    this._logHandler = val;\n  }\n\n  /**\n   * The optional, additional, user-defined log handler for the Logger instance.\n   */\n  private _userLogHandler: LogHandler | null = null;\n  get userLogHandler(): LogHandler | null {\n    return this._userLogHandler;\n  }\n  set userLogHandler(val: LogHandler | null) {\n    this._userLogHandler = val;\n  }\n\n  /**\n   * The functions below are all based on the `console` interface\n   */\n\n  debug(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.DEBUG, ...args);\n    this._logHandler(this, LogLevel.DEBUG, ...args);\n  }\n  log(...args: unknown[]): void {\n    this._userLogHandler &&\n      this._userLogHandler(this, LogLevel.VERBOSE, ...args);\n    this._logHandler(this, LogLevel.VERBOSE, ...args);\n  }\n  info(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.INFO, ...args);\n    this._logHandler(this, LogLevel.INFO, ...args);\n  }\n  warn(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.WARN, ...args);\n    this._logHandler(this, LogLevel.WARN, ...args);\n  }\n  error(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.ERROR, ...args);\n    this._logHandler(this, LogLevel.ERROR, ...args);\n  }\n}\n\nexport function setLogLevel(level: LogLevelString | LogLevel): void {\n  instances.forEach(inst => {\n    inst.setLogLevel(level);\n  });\n}\n\nexport function setUserLogHandler(\n  logCallback: LogCallback | null,\n  options?: LogOptions\n): void {\n  for (const instance of instances) {\n    let customLogLevel: LogLevel | null = null;\n    if (options && options.level) {\n      customLogLevel = levelStringToEnum[options.level];\n    }\n    if (logCallback === null) {\n      instance.userLogHandler = null;\n    } else {\n      instance.userLogHandler = (\n        instance: Logger,\n        level: LogLevel,\n        ...args: unknown[]\n      ) => {\n        const message = args\n          .map(arg => {\n            if (arg == null) {\n              return null;\n            } else if (typeof arg === 'string') {\n              return arg;\n            } else if (typeof arg === 'number' || typeof arg === 'boolean') {\n              return arg.toString();\n            } else if (arg instanceof Error) {\n              return arg.message;\n            } else {\n              try {\n                return JSON.stringify(arg);\n              } catch (ignored) {\n                return null;\n              }\n            }\n          })\n          .filter(arg => arg)\n          .join(' ');\n        if (level >= (customLogLevel ?? instance.logLevel)) {\n          logCallback({\n            level: LogLevel[level].toLowerCase() as LogLevelString,\n            message,\n            args,\n            type: instance.name\n          });\n        }\n      };\n    }\n  }\n}\n","const instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);\n\nlet idbProxyableTypes;\nlet cursorAdvanceMethods;\n// This is a function to prevent it throwing up in node environments.\nfunction getIdbProxyableTypes() {\n    return (idbProxyableTypes ||\n        (idbProxyableTypes = [\n            IDBDatabase,\n            IDBObjectStore,\n            IDBIndex,\n            IDBCursor,\n            IDBTransaction,\n        ]));\n}\n// This is a function to prevent it throwing up in node environments.\nfunction getCursorAdvanceMethods() {\n    return (cursorAdvanceMethods ||\n        (cursorAdvanceMethods = [\n            IDBCursor.prototype.advance,\n            IDBCursor.prototype.continue,\n            IDBCursor.prototype.continuePrimaryKey,\n        ]));\n}\nconst cursorRequestMap = new WeakMap();\nconst transactionDoneMap = new WeakMap();\nconst transactionStoreNamesMap = new WeakMap();\nconst transformCache = new WeakMap();\nconst reverseTransformCache = new WeakMap();\nfunction promisifyRequest(request) {\n    const promise = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            request.removeEventListener('success', success);\n            request.removeEventListener('error', error);\n        };\n        const success = () => {\n            resolve(wrap(request.result));\n            unlisten();\n        };\n        const error = () => {\n            reject(request.error);\n            unlisten();\n        };\n        request.addEventListener('success', success);\n        request.addEventListener('error', error);\n    });\n    promise\n        .then((value) => {\n        // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval\n        // (see wrapFunction).\n        if (value instanceof IDBCursor) {\n            cursorRequestMap.set(value, request);\n        }\n        // Catching to avoid \"Uncaught Promise exceptions\"\n    })\n        .catch(() => { });\n    // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This\n    // is because we create many promises from a single IDBRequest.\n    reverseTransformCache.set(promise, request);\n    return promise;\n}\nfunction cacheDonePromiseForTransaction(tx) {\n    // Early bail if we've already created a done promise for this transaction.\n    if (transactionDoneMap.has(tx))\n        return;\n    const done = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            tx.removeEventListener('complete', complete);\n            tx.removeEventListener('error', error);\n            tx.removeEventListener('abort', error);\n        };\n        const complete = () => {\n            resolve();\n            unlisten();\n        };\n        const error = () => {\n            reject(tx.error || new DOMException('AbortError', 'AbortError'));\n            unlisten();\n        };\n        tx.addEventListener('complete', complete);\n        tx.addEventListener('error', error);\n        tx.addEventListener('abort', error);\n    });\n    // Cache it for later retrieval.\n    transactionDoneMap.set(tx, done);\n}\nlet idbProxyTraps = {\n    get(target, prop, receiver) {\n        if (target instanceof IDBTransaction) {\n            // Special handling for transaction.done.\n            if (prop === 'done')\n                return transactionDoneMap.get(target);\n            // Polyfill for objectStoreNames because of Edge.\n            if (prop === 'objectStoreNames') {\n                return target.objectStoreNames || transactionStoreNamesMap.get(target);\n            }\n            // Make tx.store return the only store in the transaction, or undefined if there are many.\n            if (prop === 'store') {\n                return receiver.objectStoreNames[1]\n                    ? undefined\n                    : receiver.objectStore(receiver.objectStoreNames[0]);\n            }\n        }\n        // Else transform whatever we get back.\n        return wrap(target[prop]);\n    },\n    set(target, prop, value) {\n        target[prop] = value;\n        return true;\n    },\n    has(target, prop) {\n        if (target instanceof IDBTransaction &&\n            (prop === 'done' || prop === 'store')) {\n            return true;\n        }\n        return prop in target;\n    },\n};\nfunction replaceTraps(callback) {\n    idbProxyTraps = callback(idbProxyTraps);\n}\nfunction wrapFunction(func) {\n    // Due to expected object equality (which is enforced by the caching in `wrap`), we\n    // only create one new func per func.\n    // Edge doesn't support objectStoreNames (booo), so we polyfill it here.\n    if (func === IDBDatabase.prototype.transaction &&\n        !('objectStoreNames' in IDBTransaction.prototype)) {\n        return function (storeNames, ...args) {\n            const tx = func.call(unwrap(this), storeNames, ...args);\n            transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);\n            return wrap(tx);\n        };\n    }\n    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In\n    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the\n    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense\n    // with real promises, so each advance methods returns a new promise for the cursor object, or\n    // undefined if the end of the cursor has been reached.\n    if (getCursorAdvanceMethods().includes(func)) {\n        return function (...args) {\n            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n            // the original object.\n            func.apply(unwrap(this), args);\n            return wrap(cursorRequestMap.get(this));\n        };\n    }\n    return function (...args) {\n        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n        // the original object.\n        return wrap(func.apply(unwrap(this), args));\n    };\n}\nfunction transformCachableValue(value) {\n    if (typeof value === 'function')\n        return wrapFunction(value);\n    // This doesn't return, it just creates a 'done' promise for the transaction,\n    // which is later returned for transaction.done (see idbObjectHandler).\n    if (value instanceof IDBTransaction)\n        cacheDonePromiseForTransaction(value);\n    if (instanceOfAny(value, getIdbProxyableTypes()))\n        return new Proxy(value, idbProxyTraps);\n    // Return the same value back if we're not going to transform it.\n    return value;\n}\nfunction wrap(value) {\n    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because\n    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.\n    if (value instanceof IDBRequest)\n        return promisifyRequest(value);\n    // If we've already transformed this value before, reuse the transformed value.\n    // This is faster, but it also provides object equality.\n    if (transformCache.has(value))\n        return transformCache.get(value);\n    const newValue = transformCachableValue(value);\n    // Not all types are transformed.\n    // These may be primitive types, so they can't be WeakMap keys.\n    if (newValue !== value) {\n        transformCache.set(value, newValue);\n        reverseTransformCache.set(newValue, value);\n    }\n    return newValue;\n}\nconst unwrap = (value) => reverseTransformCache.get(value);\n\nexport { reverseTransformCache as a, instanceOfAny as i, replaceTraps as r, unwrap as u, wrap as w };\n","import { w as wrap, r as replaceTraps } from './wrap-idb-value.js';\nexport { u as unwrap, w as wrap } from './wrap-idb-value.js';\n\n/**\n * Open a database.\n *\n * @param name Name of the database.\n * @param version Schema version.\n * @param callbacks Additional callbacks.\n */\nfunction openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {\n    const request = indexedDB.open(name, version);\n    const openPromise = wrap(request);\n    if (upgrade) {\n        request.addEventListener('upgradeneeded', (event) => {\n            upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction));\n        });\n    }\n    if (blocked)\n        request.addEventListener('blocked', () => blocked());\n    openPromise\n        .then((db) => {\n        if (terminated)\n            db.addEventListener('close', () => terminated());\n        if (blocking)\n            db.addEventListener('versionchange', () => blocking());\n    })\n        .catch(() => { });\n    return openPromise;\n}\n/**\n * Delete a database.\n *\n * @param name Name of the database.\n */\nfunction deleteDB(name, { blocked } = {}) {\n    const request = indexedDB.deleteDatabase(name);\n    if (blocked)\n        request.addEventListener('blocked', () => blocked());\n    return wrap(request).then(() => undefined);\n}\n\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\nconst cachedMethods = new Map();\nfunction getMethod(target, prop) {\n    if (!(target instanceof IDBDatabase &&\n        !(prop in target) &&\n        typeof prop === 'string')) {\n        return;\n    }\n    if (cachedMethods.get(prop))\n        return cachedMethods.get(prop);\n    const targetFuncName = prop.replace(/FromIndex$/, '');\n    const useIndex = prop !== targetFuncName;\n    const isWrite = writeMethods.includes(targetFuncName);\n    if (\n    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||\n        !(isWrite || readMethods.includes(targetFuncName))) {\n        return;\n    }\n    const method = async function (storeName, ...args) {\n        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n        let target = tx.store;\n        if (useIndex)\n            target = target.index(args.shift());\n        // Must reject if op rejects.\n        // If it's a write operation, must reject if tx.done rejects.\n        // Must reject with op rejection first.\n        // Must resolve with op value.\n        // Must handle both promises (no unhandled rejections)\n        return (await Promise.all([\n            target[targetFuncName](...args),\n            isWrite && tx.done,\n        ]))[0];\n    };\n    cachedMethods.set(prop, method);\n    return method;\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\n    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),\n}));\n\nexport { deleteDB, openDB };\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ComponentContainer,\n  ComponentType,\n  Provider,\n  Name\n} from '@firebase/component';\nimport { PlatformLoggerService, VersionService } from './types';\n\nexport class PlatformLoggerServiceImpl implements PlatformLoggerService {\n  constructor(private readonly container: ComponentContainer) {}\n  // In initial implementation, this will be called by installations on\n  // auth token refresh, and installations will send this string.\n  getPlatformInfoString(): string {\n    const providers = this.container.getProviders();\n    // Loop through providers and get library/version pairs from any that are\n    // version components.\n    return providers\n      .map(provider => {\n        if (isVersionServiceProvider(provider)) {\n          const service = provider.getImmediate() as VersionService;\n          return `${service.library}/${service.version}`;\n        } else {\n          return null;\n        }\n      })\n      .filter(logString => logString)\n      .join(' ');\n  }\n}\n/**\n *\n * @param provider check if this provider provides a VersionService\n *\n * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider\n * provides VersionService. The provider is not necessarily a 'app-version'\n * provider.\n */\nfunction isVersionServiceProvider(provider: Provider<Name>): boolean {\n  const component = provider.getComponent();\n  return component?.type === ComponentType.VERSION;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { name as appName } from '../package.json';\nimport { name as appCompatName } from '../../app-compat/package.json';\nimport { name as analyticsCompatName } from '../../../packages/analytics-compat/package.json';\nimport { name as analyticsName } from '../../../packages/analytics/package.json';\nimport { name as appCheckCompatName } from '../../../packages/app-check-compat/package.json';\nimport { name as appCheckName } from '../../../packages/app-check/package.json';\nimport { name as authName } from '../../../packages/auth/package.json';\nimport { name as authCompatName } from '../../../packages/auth-compat/package.json';\nimport { name as databaseName } from '../../../packages/database/package.json';\nimport { name as databaseCompatName } from '../../../packages/database-compat/package.json';\nimport { name as functionsName } from '../../../packages/functions/package.json';\nimport { name as functionsCompatName } from '../../../packages/functions-compat/package.json';\nimport { name as installationsName } from '../../../packages/installations/package.json';\nimport { name as installationsCompatName } from '../../../packages/installations-compat/package.json';\nimport { name as messagingName } from '../../../packages/messaging/package.json';\nimport { name as messagingCompatName } from '../../../packages/messaging-compat/package.json';\nimport { name as performanceName } from '../../../packages/performance/package.json';\nimport { name as performanceCompatName } from '../../../packages/performance-compat/package.json';\nimport { name as remoteConfigName } from '../../../packages/remote-config/package.json';\nimport { name as remoteConfigCompatName } from '../../../packages/remote-config-compat/package.json';\nimport { name as storageName } from '../../../packages/storage/package.json';\nimport { name as storageCompatName } from '../../../packages/storage-compat/package.json';\nimport { name as firestoreName } from '../../../packages/firestore/package.json';\nimport { name as firestoreCompatName } from '../../../packages/firestore-compat/package.json';\nimport { name as packageName } from '../../../packages/firebase/package.json';\n\n/**\n * The default app name\n *\n * @internal\n */\nexport const DEFAULT_ENTRY_NAME = '[DEFAULT]';\n\nexport const PLATFORM_LOG_STRING = {\n  [appName]: 'fire-core',\n  [appCompatName]: 'fire-core-compat',\n  [analyticsName]: 'fire-analytics',\n  [analyticsCompatName]: 'fire-analytics-compat',\n  [appCheckName]: 'fire-app-check',\n  [appCheckCompatName]: 'fire-app-check-compat',\n  [authName]: 'fire-auth',\n  [authCompatName]: 'fire-auth-compat',\n  [databaseName]: 'fire-rtdb',\n  [databaseCompatName]: 'fire-rtdb-compat',\n  [functionsName]: 'fire-fn',\n  [functionsCompatName]: 'fire-fn-compat',\n  [installationsName]: 'fire-iid',\n  [installationsCompatName]: 'fire-iid-compat',\n  [messagingName]: 'fire-fcm',\n  [messagingCompatName]: 'fire-fcm-compat',\n  [performanceName]: 'fire-perf',\n  [performanceCompatName]: 'fire-perf-compat',\n  [remoteConfigName]: 'fire-rc',\n  [remoteConfigCompatName]: 'fire-rc-compat',\n  [storageName]: 'fire-gcs',\n  [storageCompatName]: 'fire-gcs-compat',\n  [firestoreName]: 'fire-fst',\n  [firestoreCompatName]: 'fire-fst-compat',\n  'fire-js': 'fire-js', // Platform identifier for JS SDK.\n  [packageName]: 'fire-js-all'\n} as const;\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from './public-types';\nimport { Component, Provider, Name } from '@firebase/component';\nimport { logger } from './logger';\nimport { DEFAULT_ENTRY_NAME } from './constants';\nimport { FirebaseAppImpl } from './firebaseApp';\n\n/**\n * @internal\n */\nexport const _apps = new Map<string, FirebaseApp>();\n\n/**\n * Registered components.\n *\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const _components = new Map<string, Component<any>>();\n\n/**\n * @param component - the component being added to this app's container\n *\n * @internal\n */\nexport function _addComponent<T extends Name>(\n  app: FirebaseApp,\n  component: Component<T>\n): void {\n  try {\n    (app as FirebaseAppImpl).container.addComponent(component);\n  } catch (e) {\n    logger.debug(\n      `Component ${component.name} failed to register with FirebaseApp ${app.name}`,\n      e\n    );\n  }\n}\n\n/**\n *\n * @internal\n */\nexport function _addOrOverwriteComponent(\n  app: FirebaseApp,\n  component: Component\n): void {\n  (app as FirebaseAppImpl).container.addOrOverwriteComponent(component);\n}\n\n/**\n *\n * @param component - the component to register\n * @returns whether or not the component is registered successfully\n *\n * @internal\n */\nexport function _registerComponent<T extends Name>(\n  component: Component<T>\n): boolean {\n  const componentName = component.name;\n  if (_components.has(componentName)) {\n    logger.debug(\n      `There were multiple attempts to register component ${componentName}.`\n    );\n\n    return false;\n  }\n\n  _components.set(componentName, component);\n\n  // add the component to existing app instances\n  for (const app of _apps.values()) {\n    _addComponent(app as FirebaseAppImpl, component);\n  }\n\n  return true;\n}\n\n/**\n *\n * @param app - FirebaseApp instance\n * @param name - service name\n *\n * @returns the provider for the service with the matching name\n *\n * @internal\n */\nexport function _getProvider<T extends Name>(\n  app: FirebaseApp,\n  name: T\n): Provider<T> {\n  const heartbeatController = (app as FirebaseAppImpl).container\n    .getProvider('heartbeat')\n    .getImmediate({ optional: true });\n  if (heartbeatController) {\n    void heartbeatController.triggerHeartbeat();\n  }\n  return (app as FirebaseAppImpl).container.getProvider(name);\n}\n\n/**\n *\n * @param app - FirebaseApp instance\n * @param name - service name\n * @param instanceIdentifier - service instance identifier in case the service supports multiple instances\n *\n * @internal\n */\nexport function _removeServiceInstance<T extends Name>(\n  app: FirebaseApp,\n  name: T,\n  instanceIdentifier: string = DEFAULT_ENTRY_NAME\n): void {\n  _getProvider(app, name).clearInstance(instanceIdentifier);\n}\n\n/**\n * Test only\n *\n * @internal\n */\nexport function _clearComponents(): void {\n  _components.clear();\n}\n\n/**\n * Exported in order to be used in app-compat package\n */\nexport { DEFAULT_ENTRY_NAME as _DEFAULT_ENTRY_NAME };\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nexport const enum AppError {\n  NO_APP = 'no-app',\n  BAD_APP_NAME = 'bad-app-name',\n  DUPLICATE_APP = 'duplicate-app',\n  APP_DELETED = 'app-deleted',\n  NO_OPTIONS = 'no-options',\n  INVALID_APP_ARGUMENT = 'invalid-app-argument',\n  INVALID_LOG_ARGUMENT = 'invalid-log-argument',\n  IDB_OPEN = 'idb-open',\n  IDB_GET = 'idb-get',\n  IDB_WRITE = 'idb-set',\n  IDB_DELETE = 'idb-delete'\n}\n\nconst ERRORS: ErrorMap<AppError> = {\n  [AppError.NO_APP]:\n    \"No Firebase App '{$appName}' has been created - \" +\n    'call Firebase App.initializeApp()',\n  [AppError.BAD_APP_NAME]: \"Illegal App name: '{$appName}\",\n  [AppError.DUPLICATE_APP]:\n    \"Firebase App named '{$appName}' already exists with different options or config\",\n  [AppError.APP_DELETED]: \"Firebase App named '{$appName}' already deleted\",\n  [AppError.NO_OPTIONS]:\n    'Need to provide options, when not being deployed to hosting via source.',\n  [AppError.INVALID_APP_ARGUMENT]:\n    'firebase.{$appName}() takes either no argument or a ' +\n    'Firebase App instance.',\n  [AppError.INVALID_LOG_ARGUMENT]:\n    'First argument to `onLog` must be null or a function.',\n  [AppError.IDB_OPEN]:\n    'Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.',\n  [AppError.IDB_GET]:\n    'Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.',\n  [AppError.IDB_WRITE]:\n    'Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.',\n  [AppError.IDB_DELETE]:\n    'Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}.'\n};\n\ninterface ErrorParams {\n  [AppError.NO_APP]: { appName: string };\n  [AppError.BAD_APP_NAME]: { appName: string };\n  [AppError.DUPLICATE_APP]: { appName: string };\n  [AppError.APP_DELETED]: { appName: string };\n  [AppError.INVALID_APP_ARGUMENT]: { appName: string };\n  [AppError.IDB_OPEN]: { originalErrorMessage?: string };\n  [AppError.IDB_GET]: { originalErrorMessage?: string };\n  [AppError.IDB_WRITE]: { originalErrorMessage?: string };\n  [AppError.IDB_DELETE]: { originalErrorMessage?: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<AppError, ErrorParams>(\n  'app',\n  'Firebase',\n  ERRORS\n);\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseApp,\n  FirebaseOptions,\n  FirebaseAppSettings\n} from './public-types';\nimport {\n  ComponentContainer,\n  Component,\n  ComponentType\n} from '@firebase/component';\nimport { ERROR_FACTORY, AppError } from './errors';\n\nexport class FirebaseAppImpl implements FirebaseApp {\n  private readonly _options: FirebaseOptions;\n  private readonly _name: string;\n  /**\n   * Original config values passed in as a constructor parameter.\n   * It is only used to compare with another config object to support idempotent initializeApp().\n   *\n   * Updating automaticDataCollectionEnabled on the App instance will not change its value in _config.\n   */\n  private readonly _config: Required<FirebaseAppSettings>;\n  private _automaticDataCollectionEnabled: boolean;\n  private _isDeleted = false;\n  private readonly _container: ComponentContainer;\n\n  constructor(\n    options: FirebaseOptions,\n    config: Required<FirebaseAppSettings>,\n    container: ComponentContainer\n  ) {\n    this._options = { ...options };\n    this._config = { ...config };\n    this._name = config.name;\n    this._automaticDataCollectionEnabled =\n      config.automaticDataCollectionEnabled;\n    this._container = container;\n    this.container.addComponent(\n      new Component('app', () => this, ComponentType.PUBLIC)\n    );\n  }\n\n  get automaticDataCollectionEnabled(): boolean {\n    this.checkDestroyed();\n    return this._automaticDataCollectionEnabled;\n  }\n\n  set automaticDataCollectionEnabled(val: boolean) {\n    this.checkDestroyed();\n    this._automaticDataCollectionEnabled = val;\n  }\n\n  get name(): string {\n    this.checkDestroyed();\n    return this._name;\n  }\n\n  get options(): FirebaseOptions {\n    this.checkDestroyed();\n    return this._options;\n  }\n\n  get config(): Required<FirebaseAppSettings> {\n    this.checkDestroyed();\n    return this._config;\n  }\n\n  get container(): ComponentContainer {\n    return this._container;\n  }\n\n  get isDeleted(): boolean {\n    return this._isDeleted;\n  }\n\n  set isDeleted(val: boolean) {\n    this._isDeleted = val;\n  }\n\n  /**\n   * This function will throw an Error if the App has already been deleted -\n   * use before performing API actions on the App.\n   */\n  private checkDestroyed(): void {\n    if (this.isDeleted) {\n      throw ERROR_FACTORY.create(AppError.APP_DELETED, { appName: this._name });\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseApp,\n  FirebaseOptions,\n  FirebaseAppSettings\n} from './public-types';\nimport { DEFAULT_ENTRY_NAME, PLATFORM_LOG_STRING } from './constants';\nimport { ERROR_FACTORY, AppError } from './errors';\nimport {\n  ComponentContainer,\n  Component,\n  Name,\n  ComponentType\n} from '@firebase/component';\nimport { version } from '../../firebase/package.json';\nimport { FirebaseAppImpl } from './firebaseApp';\nimport { _apps, _components, _registerComponent } from './internal';\nimport { logger } from './logger';\nimport {\n  LogLevelString,\n  setLogLevel as setLogLevelImpl,\n  LogCallback,\n  LogOptions,\n  setUserLogHandler\n} from '@firebase/logger';\nimport { deepEqual, getDefaultAppConfig } from '@firebase/util';\n\nexport { FirebaseError } from '@firebase/util';\n\n/**\n * The current SDK version.\n *\n * @public\n */\nexport const SDK_VERSION = version;\n\n/**\n * Creates and initializes a {@link @firebase/app#FirebaseApp} instance.\n *\n * See\n * {@link\n *   https://firebase.google.com/docs/web/setup#add_firebase_to_your_app\n *   | Add Firebase to your app} and\n * {@link\n *   https://firebase.google.com/docs/web/setup#multiple-projects\n *   | Initialize multiple projects} for detailed documentation.\n *\n * @example\n * ```javascript\n *\n * // Initialize default app\n * // Retrieve your own options values by adding a web app on\n * // https://console.firebase.google.com\n * initializeApp({\n *   apiKey: \"AIza....\",                             // Auth / General Use\n *   authDomain: \"YOUR_APP.firebaseapp.com\",         // Auth with popup/redirect\n *   databaseURL: \"https://YOUR_APP.firebaseio.com\", // Realtime Database\n *   storageBucket: \"YOUR_APP.appspot.com\",          // Storage\n *   messagingSenderId: \"123456789\"                  // Cloud Messaging\n * });\n * ```\n *\n * @example\n * ```javascript\n *\n * // Initialize another app\n * const otherApp = initializeApp({\n *   databaseURL: \"https://<OTHER_DATABASE_NAME>.firebaseio.com\",\n *   storageBucket: \"<OTHER_STORAGE_BUCKET>.appspot.com\"\n * }, \"otherApp\");\n * ```\n *\n * @param options - Options to configure the app's services.\n * @param name - Optional name of the app to initialize. If no name\n *   is provided, the default is `\"[DEFAULT]\"`.\n *\n * @returns The initialized app.\n *\n * @public\n */\nexport function initializeApp(\n  options: FirebaseOptions,\n  name?: string\n): FirebaseApp;\n/**\n * Creates and initializes a FirebaseApp instance.\n *\n * @param options - Options to configure the app's services.\n * @param config - FirebaseApp Configuration\n *\n * @public\n */\nexport function initializeApp(\n  options: FirebaseOptions,\n  config?: FirebaseAppSettings\n): FirebaseApp;\n/**\n * Creates and initializes a FirebaseApp instance.\n *\n * @public\n */\nexport function initializeApp(): FirebaseApp;\nexport function initializeApp(\n  _options?: FirebaseOptions,\n  rawConfig = {}\n): FirebaseApp {\n  let options = _options;\n\n  if (typeof rawConfig !== 'object') {\n    const name = rawConfig;\n    rawConfig = { name };\n  }\n\n  const config: Required<FirebaseAppSettings> = {\n    name: DEFAULT_ENTRY_NAME,\n    automaticDataCollectionEnabled: false,\n    ...rawConfig\n  };\n  const name = config.name;\n\n  if (typeof name !== 'string' || !name) {\n    throw ERROR_FACTORY.create(AppError.BAD_APP_NAME, {\n      appName: String(name)\n    });\n  }\n\n  options ||= getDefaultAppConfig();\n\n  if (!options) {\n    throw ERROR_FACTORY.create(AppError.NO_OPTIONS);\n  }\n\n  const existingApp = _apps.get(name) as FirebaseAppImpl;\n  if (existingApp) {\n    // return the existing app if options and config deep equal the ones in the existing app.\n    if (\n      deepEqual(options, existingApp.options) &&\n      deepEqual(config, existingApp.config)\n    ) {\n      return existingApp;\n    } else {\n      throw ERROR_FACTORY.create(AppError.DUPLICATE_APP, { appName: name });\n    }\n  }\n\n  const container = new ComponentContainer(name);\n  for (const component of _components.values()) {\n    container.addComponent(component);\n  }\n\n  const newApp = new FirebaseAppImpl(options, config, container);\n\n  _apps.set(name, newApp);\n\n  return newApp;\n}\n\n/**\n * Retrieves a {@link @firebase/app#FirebaseApp} instance.\n *\n * When called with no arguments, the default app is returned. When an app name\n * is provided, the app corresponding to that name is returned.\n *\n * An exception is thrown if the app being retrieved has not yet been\n * initialized.\n *\n * @example\n * ```javascript\n * // Return the default app\n * const app = getApp();\n * ```\n *\n * @example\n * ```javascript\n * // Return a named app\n * const otherApp = getApp(\"otherApp\");\n * ```\n *\n * @param name - Optional name of the app to return. If no name is\n *   provided, the default is `\"[DEFAULT]\"`.\n *\n * @returns The app corresponding to the provided app name.\n *   If no app name is provided, the default app is returned.\n *\n * @public\n */\nexport function getApp(name: string = DEFAULT_ENTRY_NAME): FirebaseApp {\n  const app = _apps.get(name);\n  if (!app && name === DEFAULT_ENTRY_NAME) {\n    return initializeApp();\n  }\n  if (!app) {\n    throw ERROR_FACTORY.create(AppError.NO_APP, { appName: name });\n  }\n\n  return app;\n}\n\n/**\n * A (read-only) array of all initialized apps.\n * @public\n */\nexport function getApps(): FirebaseApp[] {\n  return Array.from(_apps.values());\n}\n\n/**\n * Renders this app unusable and frees the resources of all associated\n * services.\n *\n * @example\n * ```javascript\n * deleteApp(app)\n *   .then(function() {\n *     console.log(\"App deleted successfully\");\n *   })\n *   .catch(function(error) {\n *     console.log(\"Error deleting app:\", error);\n *   });\n * ```\n *\n * @public\n */\nexport async function deleteApp(app: FirebaseApp): Promise<void> {\n  const name = app.name;\n  if (_apps.has(name)) {\n    _apps.delete(name);\n    await Promise.all(\n      (app as FirebaseAppImpl).container\n        .getProviders()\n        .map(provider => provider.delete())\n    );\n    (app as FirebaseAppImpl).isDeleted = true;\n  }\n}\n\n/**\n * Registers a library's name and version for platform logging purposes.\n * @param library - Name of 1p or 3p library (e.g. firestore, angularfire)\n * @param version - Current version of that library.\n * @param variant - Bundle variant, e.g., node, rn, etc.\n *\n * @public\n */\nexport function registerVersion(\n  libraryKeyOrName: string,\n  version: string,\n  variant?: string\n): void {\n  // TODO: We can use this check to whitelist strings when/if we set up\n  // a good whitelist system.\n  let library = PLATFORM_LOG_STRING[libraryKeyOrName] ?? libraryKeyOrName;\n  if (variant) {\n    library += `-${variant}`;\n  }\n  const libraryMismatch = library.match(/\\s|\\//);\n  const versionMismatch = version.match(/\\s|\\//);\n  if (libraryMismatch || versionMismatch) {\n    const warning = [\n      `Unable to register library \"${library}\" with version \"${version}\":`\n    ];\n    if (libraryMismatch) {\n      warning.push(\n        `library name \"${library}\" contains illegal characters (whitespace or \"/\")`\n      );\n    }\n    if (libraryMismatch && versionMismatch) {\n      warning.push('and');\n    }\n    if (versionMismatch) {\n      warning.push(\n        `version name \"${version}\" contains illegal characters (whitespace or \"/\")`\n      );\n    }\n    logger.warn(warning.join(' '));\n    return;\n  }\n  _registerComponent(\n    new Component(\n      `${library}-version` as Name,\n      () => ({ library, version }),\n      ComponentType.VERSION\n    )\n  );\n}\n\n/**\n * Sets log handler for all Firebase SDKs.\n * @param logCallback - An optional custom log handler that executes user code whenever\n * the Firebase SDK makes a logging call.\n *\n * @public\n */\nexport function onLog(\n  logCallback: LogCallback | null,\n  options?: LogOptions\n): void {\n  if (logCallback !== null && typeof logCallback !== 'function') {\n    throw ERROR_FACTORY.create(AppError.INVALID_LOG_ARGUMENT);\n  }\n  setUserLogHandler(logCallback, options);\n}\n\n/**\n * Sets log level for all Firebase SDKs.\n *\n * All of the log types above the current log level are captured (i.e. if\n * you set the log level to `info`, errors are logged, but `debug` and\n * `verbose` logs are not).\n *\n * @public\n */\nexport function setLogLevel(logLevel: LogLevelString): void {\n  setLogLevelImpl(logLevel);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\nimport { DBSchema, openDB, IDBPDatabase } from 'idb';\nimport { AppError, ERROR_FACTORY } from './errors';\nimport { FirebaseApp } from './public-types';\nimport { HeartbeatsInIndexedDB } from './types';\nimport { logger } from './logger';\n\nconst DB_NAME = 'firebase-heartbeat-database';\nconst DB_VERSION = 1;\nconst STORE_NAME = 'firebase-heartbeat-store';\n\ninterface AppDB extends DBSchema {\n  'firebase-heartbeat-store': {\n    key: string;\n    value: HeartbeatsInIndexedDB;\n  };\n}\n\nlet dbPromise: Promise<IDBPDatabase<AppDB>> | null = null;\nfunction getDbPromise(): Promise<IDBPDatabase<AppDB>> {\n  if (!dbPromise) {\n    dbPromise = openDB<AppDB>(DB_NAME, DB_VERSION, {\n      upgrade: (db, oldVersion) => {\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (oldVersion) {\n          case 0:\n            db.createObjectStore(STORE_NAME);\n        }\n      }\n    }).catch(e => {\n      throw ERROR_FACTORY.create(AppError.IDB_OPEN, {\n        originalErrorMessage: e.message\n      });\n    });\n  }\n  return dbPromise;\n}\n\nexport async function readHeartbeatsFromIndexedDB(\n  app: FirebaseApp\n): Promise<HeartbeatsInIndexedDB | undefined> {\n  try {\n    const db = await getDbPromise();\n    return db\n      .transaction(STORE_NAME)\n      .objectStore(STORE_NAME)\n      .get(computeKey(app)) as Promise<HeartbeatsInIndexedDB | undefined>;\n  } catch (e) {\n    if (e instanceof FirebaseError) {\n      logger.warn(e.message);\n    } else {\n      const idbGetError = ERROR_FACTORY.create(AppError.IDB_GET, {\n        originalErrorMessage: (e as Error)?.message\n      });\n      logger.warn(idbGetError.message);\n    }\n  }\n}\n\nexport async function writeHeartbeatsToIndexedDB(\n  app: FirebaseApp,\n  heartbeatObject: HeartbeatsInIndexedDB\n): Promise<void> {\n  try {\n    const db = await getDbPromise();\n    const tx = db.transaction(STORE_NAME, 'readwrite');\n    const objectStore = tx.objectStore(STORE_NAME);\n    await objectStore.put(heartbeatObject, computeKey(app));\n    return tx.done;\n  } catch (e) {\n    if (e instanceof FirebaseError) {\n      logger.warn(e.message);\n    } else {\n      const idbGetError = ERROR_FACTORY.create(AppError.IDB_WRITE, {\n        originalErrorMessage: (e as Error)?.message\n      });\n      logger.warn(idbGetError.message);\n    }\n  }\n}\n\nfunction computeKey(app: FirebaseApp): string {\n  return `${app.name}!${app.options.appId}`;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ComponentContainer } from '@firebase/component';\nimport {\n  base64urlEncodeWithoutPadding,\n  isIndexedDBAvailable,\n  validateIndexedDBOpenable\n} from '@firebase/util';\nimport {\n  readHeartbeatsFromIndexedDB,\n  writeHeartbeatsToIndexedDB\n} from './indexeddb';\nimport { FirebaseApp } from './public-types';\nimport {\n  HeartbeatsByUserAgent,\n  HeartbeatService,\n  HeartbeatsInIndexedDB,\n  HeartbeatStorage,\n  SingleDateHeartbeat\n} from './types';\n\nconst MAX_HEADER_BYTES = 1024;\n// 30 days\nconst STORED_HEARTBEAT_RETENTION_MAX_MILLIS = 30 * 24 * 60 * 60 * 1000;\n\nexport class HeartbeatServiceImpl implements HeartbeatService {\n  /**\n   * The persistence layer for heartbeats\n   * Leave public for easier testing.\n   */\n  _storage: HeartbeatStorageImpl;\n\n  /**\n   * In-memory cache for heartbeats, used by getHeartbeatsHeader() to generate\n   * the header string.\n   * Stores one record per date. This will be consolidated into the standard\n   * format of one record per user agent string before being sent as a header.\n   * Populated from indexedDB when the controller is instantiated and should\n   * be kept in sync with indexedDB.\n   * Leave public for easier testing.\n   */\n  _heartbeatsCache: HeartbeatsInIndexedDB | null = null;\n\n  /**\n   * the initialization promise for populating heartbeatCache.\n   * If getHeartbeatsHeader() is called before the promise resolves\n   * (hearbeatsCache == null), it should wait for this promise\n   * Leave public for easier testing.\n   */\n  _heartbeatsCachePromise: Promise<HeartbeatsInIndexedDB>;\n  constructor(private readonly container: ComponentContainer) {\n    const app = this.container.getProvider('app').getImmediate();\n    this._storage = new HeartbeatStorageImpl(app);\n    this._heartbeatsCachePromise = this._storage.read().then(result => {\n      this._heartbeatsCache = result;\n      return result;\n    });\n  }\n\n  /**\n   * Called to report a heartbeat. The function will generate\n   * a HeartbeatsByUserAgent object, update heartbeatsCache, and persist it\n   * to IndexedDB.\n   * Note that we only store one heartbeat per day. So if a heartbeat for today is\n   * already logged, subsequent calls to this function in the same day will be ignored.\n   */\n  async triggerHeartbeat(): Promise<void> {\n    const platformLogger = this.container\n      .getProvider('platform-logger')\n      .getImmediate();\n\n    // This is the \"Firebase user agent\" string from the platform logger\n    // service, not the browser user agent.\n    const agent = platformLogger.getPlatformInfoString();\n    const date = getUTCDateString();\n    if (this._heartbeatsCache === null) {\n      this._heartbeatsCache = await this._heartbeatsCachePromise;\n    }\n    // Do not store a heartbeat if one is already stored for this day\n    // or if a header has already been sent today.\n    if (\n      this._heartbeatsCache.lastSentHeartbeatDate === date ||\n      this._heartbeatsCache.heartbeats.some(\n        singleDateHeartbeat => singleDateHeartbeat.date === date\n      )\n    ) {\n      return;\n    } else {\n      // There is no entry for this date. Create one.\n      this._heartbeatsCache.heartbeats.push({ date, agent });\n    }\n    // Remove entries older than 30 days.\n    this._heartbeatsCache.heartbeats = this._heartbeatsCache.heartbeats.filter(\n      singleDateHeartbeat => {\n        const hbTimestamp = new Date(singleDateHeartbeat.date).valueOf();\n        const now = Date.now();\n        return now - hbTimestamp <= STORED_HEARTBEAT_RETENTION_MAX_MILLIS;\n      }\n    );\n    return this._storage.overwrite(this._heartbeatsCache);\n  }\n\n  /**\n   * Returns a base64 encoded string which can be attached to the heartbeat-specific header directly.\n   * It also clears all heartbeats from memory as well as in IndexedDB.\n   *\n   * NOTE: Consuming product SDKs should not send the header if this method\n   * returns an empty string.\n   */\n  async getHeartbeatsHeader(): Promise<string> {\n    if (this._heartbeatsCache === null) {\n      await this._heartbeatsCachePromise;\n    }\n    // If it's still null or the array is empty, there is no data to send.\n    if (\n      this._heartbeatsCache === null ||\n      this._heartbeatsCache.heartbeats.length === 0\n    ) {\n      return '';\n    }\n    const date = getUTCDateString();\n    // Extract as many heartbeats from the cache as will fit under the size limit.\n    const { heartbeatsToSend, unsentEntries } = extractHeartbeatsForHeader(\n      this._heartbeatsCache.heartbeats\n    );\n    const headerString = base64urlEncodeWithoutPadding(\n      JSON.stringify({ version: 2, heartbeats: heartbeatsToSend })\n    );\n    // Store last sent date to prevent another being logged/sent for the same day.\n    this._heartbeatsCache.lastSentHeartbeatDate = date;\n    if (unsentEntries.length > 0) {\n      // Store any unsent entries if they exist.\n      this._heartbeatsCache.heartbeats = unsentEntries;\n      // This seems more likely than emptying the array (below) to lead to some odd state\n      // since the cache isn't empty and this will be called again on the next request,\n      // and is probably safest if we await it.\n      await this._storage.overwrite(this._heartbeatsCache);\n    } else {\n      this._heartbeatsCache.heartbeats = [];\n      // Do not wait for this, to reduce latency.\n      void this._storage.overwrite(this._heartbeatsCache);\n    }\n    return headerString;\n  }\n}\n\nfunction getUTCDateString(): string {\n  const today = new Date();\n  // Returns date format 'YYYY-MM-DD'\n  return today.toISOString().substring(0, 10);\n}\n\nexport function extractHeartbeatsForHeader(\n  heartbeatsCache: SingleDateHeartbeat[],\n  maxSize = MAX_HEADER_BYTES\n): {\n  heartbeatsToSend: HeartbeatsByUserAgent[];\n  unsentEntries: SingleDateHeartbeat[];\n} {\n  // Heartbeats grouped by user agent in the standard format to be sent in\n  // the header.\n  const heartbeatsToSend: HeartbeatsByUserAgent[] = [];\n  // Single date format heartbeats that are not sent.\n  let unsentEntries = heartbeatsCache.slice();\n  for (const singleDateHeartbeat of heartbeatsCache) {\n    // Look for an existing entry with the same user agent.\n    const heartbeatEntry = heartbeatsToSend.find(\n      hb => hb.agent === singleDateHeartbeat.agent\n    );\n    if (!heartbeatEntry) {\n      // If no entry for this user agent exists, create one.\n      heartbeatsToSend.push({\n        agent: singleDateHeartbeat.agent,\n        dates: [singleDateHeartbeat.date]\n      });\n      if (countBytes(heartbeatsToSend) > maxSize) {\n        // If the header would exceed max size, remove the added heartbeat\n        // entry and stop adding to the header.\n        heartbeatsToSend.pop();\n        break;\n      }\n    } else {\n      heartbeatEntry.dates.push(singleDateHeartbeat.date);\n      // If the header would exceed max size, remove the added date\n      // and stop adding to the header.\n      if (countBytes(heartbeatsToSend) > maxSize) {\n        heartbeatEntry.dates.pop();\n        break;\n      }\n    }\n    // Pop unsent entry from queue. (Skipped if adding the entry exceeded\n    // quota and the loop breaks early.)\n    unsentEntries = unsentEntries.slice(1);\n  }\n  return {\n    heartbeatsToSend,\n    unsentEntries\n  };\n}\n\nexport class HeartbeatStorageImpl implements HeartbeatStorage {\n  private _canUseIndexedDBPromise: Promise<boolean>;\n  constructor(public app: FirebaseApp) {\n    this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck();\n  }\n  async runIndexedDBEnvironmentCheck(): Promise<boolean> {\n    if (!isIndexedDBAvailable()) {\n      return false;\n    } else {\n      return validateIndexedDBOpenable()\n        .then(() => true)\n        .catch(() => false);\n    }\n  }\n  /**\n   * Read all heartbeats.\n   */\n  async read(): Promise<HeartbeatsInIndexedDB> {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n    if (!canUseIndexedDB) {\n      return { heartbeats: [] };\n    } else {\n      const idbHeartbeatObject = await readHeartbeatsFromIndexedDB(this.app);\n      return idbHeartbeatObject || { heartbeats: [] };\n    }\n  }\n  // overwrite the storage with the provided heartbeats\n  async overwrite(heartbeatsObject: HeartbeatsInIndexedDB): Promise<void> {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n    if (!canUseIndexedDB) {\n      return;\n    } else {\n      const existingHeartbeatsObject = await this.read();\n      return writeHeartbeatsToIndexedDB(this.app, {\n        lastSentHeartbeatDate:\n          heartbeatsObject.lastSentHeartbeatDate ??\n          existingHeartbeatsObject.lastSentHeartbeatDate,\n        heartbeats: heartbeatsObject.heartbeats\n      });\n    }\n  }\n  // add heartbeats\n  async add(heartbeatsObject: HeartbeatsInIndexedDB): Promise<void> {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n    if (!canUseIndexedDB) {\n      return;\n    } else {\n      const existingHeartbeatsObject = await this.read();\n      return writeHeartbeatsToIndexedDB(this.app, {\n        lastSentHeartbeatDate:\n          heartbeatsObject.lastSentHeartbeatDate ??\n          existingHeartbeatsObject.lastSentHeartbeatDate,\n        heartbeats: [\n          ...existingHeartbeatsObject.heartbeats,\n          ...heartbeatsObject.heartbeats\n        ]\n      });\n    }\n  }\n}\n\n/**\n * Calculate bytes of a HeartbeatsByUserAgent array after being wrapped\n * in a platform logging header JSON object, stringified, and converted\n * to base 64.\n */\nexport function countBytes(heartbeatsCache: HeartbeatsByUserAgent[]): number {\n  // base64 has a restricted set of characters, all of which should be 1 byte.\n  return base64urlEncodeWithoutPadding(\n    // heartbeatsCache wrapper properties\n    JSON.stringify({ version: 2, heartbeats: heartbeatsCache })\n  ).length;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { jsonEval, stringify } from '@firebase/util';\n\n/**\n * Wraps a DOM Storage object and:\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\n *\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\n * and one for localStorage.\n *\n */\nexport class DOMStorageWrapper {\n  // Use a prefix to avoid collisions with other stuff saved by the app.\n  private prefix_ = 'firebase:';\n\n  /**\n   * @param domStorage_ - The underlying storage object (e.g. localStorage or sessionStorage)\n   */\n  constructor(private domStorage_: Storage) {}\n\n  /**\n   * @param key - The key to save the value under\n   * @param value - The value being stored, or null to remove the key.\n   */\n  set(key: string, value: unknown | null) {\n    if (value == null) {\n      this.domStorage_.removeItem(this.prefixedName_(key));\n    } else {\n      this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\n    }\n  }\n\n  /**\n   * @returns The value that was stored under this key, or null\n   */\n  get(key: string): unknown {\n    const storedVal = this.domStorage_.getItem(this.prefixedName_(key));\n    if (storedVal == null) {\n      return null;\n    } else {\n      return jsonEval(storedVal);\n    }\n  }\n\n  remove(key: string) {\n    this.domStorage_.removeItem(this.prefixedName_(key));\n  }\n\n  isInMemoryStorage: boolean;\n\n  prefixedName_(name: string): string {\n    return this.prefix_ + name;\n  }\n\n  toString(): string {\n    return this.domStorage_.toString();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains } from '@firebase/util';\n\n/**\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\n * (TODO: create interface for both to implement).\n */\nexport class MemoryStorage {\n  private cache_: { [k: string]: unknown } = {};\n\n  set(key: string, value: unknown | null) {\n    if (value == null) {\n      delete this.cache_[key];\n    } else {\n      this.cache_[key] = value;\n    }\n  }\n\n  get(key: string): unknown {\n    if (contains(this.cache_, key)) {\n      return this.cache_[key];\n    }\n    return null;\n  }\n\n  remove(key: string) {\n    delete this.cache_[key];\n  }\n\n  isInMemoryStorage = true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DOMStorageWrapper } from './DOMStorageWrapper';\nimport { MemoryStorage } from './MemoryStorage';\n\ndeclare const window: Window;\n\n/**\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\n * to reflect this type\n *\n * @param domStorageName - Name of the underlying storage object\n *   (e.g. 'localStorage' or 'sessionStorage').\n * @returns Turning off type information until a common interface is defined.\n */\nconst createStoragefor = function (\n  domStorageName: string\n): DOMStorageWrapper | MemoryStorage {\n  try {\n    // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\n    // so it must be inside the try/catch.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window[domStorageName] !== 'undefined'\n    ) {\n      // Need to test cache. Just because it's here doesn't mean it works\n      const domStorage = window[domStorageName];\n      domStorage.setItem('firebase:sentinel', 'cache');\n      domStorage.removeItem('firebase:sentinel');\n      return new DOMStorageWrapper(domStorage);\n    }\n  } catch (e) {}\n\n  // Failed to create wrapper.  Just return in-memory storage.\n  // TODO: log?\n  return new MemoryStorage();\n};\n\n/** A storage object that lasts across sessions */\nexport const PersistentStorage = createStoragefor('localStorage');\n\n/** A storage object that only lasts one session */\nexport const SessionStorage = createStoragefor('sessionStorage');\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger, LogLevel } from '@firebase/logger';\nimport {\n  assert,\n  base64,\n  Sha1,\n  stringToByteArray,\n  stringify,\n  isNodeSdk\n} from '@firebase/util';\n\nimport { SessionStorage } from '../storage/storage';\nimport { QueryContext } from '../view/EventRegistration';\n\ndeclare const window: Window;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const Windows: any;\n\nconst logClient = new Logger('@firebase/database');\n\n/**\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\n */\nexport const LUIDGenerator: () => number = (function () {\n  let id = 1;\n  return function () {\n    return id++;\n  };\n})();\n\n/**\n * Sha1 hash of the input string\n * @param str - The string to hash\n * @returns {!string} The resulting hash\n */\nexport const sha1 = function (str: string): string {\n  const utf8Bytes = stringToByteArray(str);\n  const sha1 = new Sha1();\n  sha1.update(utf8Bytes);\n  const sha1Bytes = sha1.digest();\n  return base64.encodeByteArray(sha1Bytes);\n};\n\nconst buildLogMessage_ = function (...varArgs: unknown[]): string {\n  let message = '';\n  for (let i = 0; i < varArgs.length; i++) {\n    const arg = varArgs[i];\n    if (\n      Array.isArray(arg) ||\n      (arg &&\n        typeof arg === 'object' &&\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        typeof (arg as any).length === 'number')\n    ) {\n      message += buildLogMessage_.apply(null, arg);\n    } else if (typeof arg === 'object') {\n      message += stringify(arg);\n    } else {\n      message += arg;\n    }\n    message += ' ';\n  }\n\n  return message;\n};\n\n/**\n * Use this for all debug messages in Firebase.\n */\nexport let logger: ((a: string) => void) | null = null;\n\n/**\n * Flag to check for log availability on first log message\n */\nlet firstLog_ = true;\n\n/**\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\n * @param logger_ - A flag to turn on logging, or a custom logger\n * @param persistent - Whether or not to persist logging settings across refreshes\n */\nexport const enableLogging = function (\n  logger_?: boolean | ((a: string) => void) | null,\n  persistent?: boolean\n) {\n  assert(\n    !persistent || logger_ === true || logger_ === false,\n    \"Can't turn on custom loggers persistently.\"\n  );\n  if (logger_ === true) {\n    logClient.logLevel = LogLevel.VERBOSE;\n    logger = logClient.log.bind(logClient);\n    if (persistent) {\n      SessionStorage.set('logging_enabled', true);\n    }\n  } else if (typeof logger_ === 'function') {\n    logger = logger_;\n  } else {\n    logger = null;\n    SessionStorage.remove('logging_enabled');\n  }\n};\n\nexport const log = function (...varArgs: unknown[]) {\n  if (firstLog_ === true) {\n    firstLog_ = false;\n    if (logger === null && SessionStorage.get('logging_enabled') === true) {\n      enableLogging(true);\n    }\n  }\n\n  if (logger) {\n    const message = buildLogMessage_.apply(null, varArgs);\n    logger(message);\n  }\n};\n\nexport const logWrapper = function (\n  prefix: string\n): (...varArgs: unknown[]) => void {\n  return function (...varArgs: unknown[]) {\n    log(prefix, ...varArgs);\n  };\n};\n\nexport const error = function (...varArgs: string[]) {\n  const message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_(...varArgs);\n  logClient.error(message);\n};\n\nexport const fatal = function (...varArgs: string[]) {\n  const message = `FIREBASE FATAL ERROR: ${buildLogMessage_(...varArgs)}`;\n  logClient.error(message);\n  throw new Error(message);\n};\n\nexport const warn = function (...varArgs: unknown[]) {\n  const message = 'FIREBASE WARNING: ' + buildLogMessage_(...varArgs);\n  logClient.warn(message);\n};\n\n/**\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\n * does not use https.\n */\nexport const warnIfPageIsSecure = function () {\n  // Be very careful accessing browser globals. Who knows what may or may not exist.\n  if (\n    typeof window !== 'undefined' &&\n    window.location &&\n    window.location.protocol &&\n    window.location.protocol.indexOf('https:') !== -1\n  ) {\n    warn(\n      'Insecure Firebase access from a secure page. ' +\n        'Please use https in calls to new Firebase().'\n    );\n  }\n};\n\nexport const warnAboutUnsupportedMethod = function (methodName: string) {\n  warn(\n    methodName +\n      ' is unsupported and will likely change soon.  ' +\n      'Please do not use.'\n  );\n};\n\n/**\n * Returns true if data is NaN, or +/- Infinity.\n */\nexport const isInvalidJSONNumber = function (data: unknown): boolean {\n  return (\n    typeof data === 'number' &&\n    (data !== data || // NaN\n      data === Number.POSITIVE_INFINITY ||\n      data === Number.NEGATIVE_INFINITY)\n  );\n};\n\nexport const executeWhenDOMReady = function (fn: () => void) {\n  if (isNodeSdk() || document.readyState === 'complete') {\n    fn();\n  } else {\n    // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\n    // fire before onload), but fall back to onload.\n\n    let called = false;\n    const wrappedFn = function () {\n      if (!document.body) {\n        setTimeout(wrappedFn, Math.floor(10));\n        return;\n      }\n\n      if (!called) {\n        called = true;\n        fn();\n      }\n    };\n\n    if (document.addEventListener) {\n      document.addEventListener('DOMContentLoaded', wrappedFn, false);\n      // fallback to onload.\n      window.addEventListener('load', wrappedFn, false);\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if ((document as any).attachEvent) {\n      // IE.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (document as any).attachEvent('onreadystatechange', () => {\n        if (document.readyState === 'complete') {\n          wrappedFn();\n        }\n      });\n      // fallback to onload.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (window as any).attachEvent('onload', wrappedFn);\n\n      // jQuery has an extra hack for IE that we could employ (based on\n      // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\n      // I'm hoping we don't need it.\n    }\n  }\n};\n\n/**\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\n */\nexport const MIN_NAME = '[MIN_NAME]';\n\n/**\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\n */\nexport const MAX_NAME = '[MAX_NAME]';\n\n/**\n * Compares valid Firebase key names, plus min and max name\n */\nexport const nameCompare = function (a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a === MIN_NAME || b === MAX_NAME) {\n    return -1;\n  } else if (b === MIN_NAME || a === MAX_NAME) {\n    return 1;\n  } else {\n    const aAsInt = tryParseInt(a),\n      bAsInt = tryParseInt(b);\n\n    if (aAsInt !== null) {\n      if (bAsInt !== null) {\n        return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\n      } else {\n        return -1;\n      }\n    } else if (bAsInt !== null) {\n      return 1;\n    } else {\n      return a < b ? -1 : 1;\n    }\n  }\n};\n\n/**\n * @returns {!number} comparison result.\n */\nexport const stringCompare = function (a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a < b) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\n\nexport const requireKey = function (\n  key: string,\n  obj: { [k: string]: unknown }\n): unknown {\n  if (obj && key in obj) {\n    return obj[key];\n  } else {\n    throw new Error(\n      'Missing required key (' + key + ') in object: ' + stringify(obj)\n    );\n  }\n};\n\nexport const ObjectToUniqueKey = function (obj: unknown): string {\n  if (typeof obj !== 'object' || obj === null) {\n    return stringify(obj);\n  }\n\n  const keys = [];\n  // eslint-disable-next-line guard-for-in\n  for (const k in obj) {\n    keys.push(k);\n  }\n\n  // Export as json, but with the keys sorted.\n  keys.sort();\n  let key = '{';\n  for (let i = 0; i < keys.length; i++) {\n    if (i !== 0) {\n      key += ',';\n    }\n    key += stringify(keys[i]);\n    key += ':';\n    key += ObjectToUniqueKey(obj[keys[i]]);\n  }\n\n  key += '}';\n  return key;\n};\n\n/**\n * Splits a string into a number of smaller segments of maximum size\n * @param str - The string\n * @param segsize - The maximum number of chars in the string.\n * @returns The string, split into appropriately-sized chunks\n */\nexport const splitStringBySize = function (\n  str: string,\n  segsize: number\n): string[] {\n  const len = str.length;\n\n  if (len <= segsize) {\n    return [str];\n  }\n\n  const dataSegs = [];\n  for (let c = 0; c < len; c += segsize) {\n    if (c + segsize > len) {\n      dataSegs.push(str.substring(c, len));\n    } else {\n      dataSegs.push(str.substring(c, c + segsize));\n    }\n  }\n  return dataSegs;\n};\n\n/**\n * Apply a function to each (key, value) pair in an object or\n * apply a function to each (index, value) pair in an array\n * @param obj - The object or array to iterate over\n * @param fn - The function to apply\n */\nexport function each(obj: object, fn: (k: string, v: unknown) => void) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      fn(key, obj[key]);\n    }\n  }\n}\n\n/**\n * Like goog.bind, but doesn't bother to create a closure if opt_context is null/undefined.\n * @param callback - Callback function.\n * @param context - Optional context to bind to.\n *\n */\nexport const bindCallback = function (\n  callback: (a: unknown) => void,\n  context?: object | null\n): (a: unknown) => void {\n  return context ? callback.bind(context) : callback;\n};\n\n/**\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\n * I made one modification at the end and removed the NaN / Infinity\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\n * @param v - A double\n *\n */\nexport const doubleToIEEE754String = function (v: number): string {\n  assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\n\n  const ebits = 11,\n    fbits = 52;\n  const bias = (1 << (ebits - 1)) - 1;\n  let s, e, f, ln, i;\n\n  // Compute sign, exponent, fraction\n  // Skip NaN / Infinity handling --MJL.\n  if (v === 0) {\n    e = 0;\n    f = 0;\n    s = 1 / v === -Infinity ? 1 : 0;\n  } else {\n    s = v < 0;\n    v = Math.abs(v);\n\n    if (v >= Math.pow(2, 1 - bias)) {\n      // Normalized\n      ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n      e = ln + bias;\n      f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\n    } else {\n      // Denormalized\n      e = 0;\n      f = Math.round(v / Math.pow(2, 1 - bias - fbits));\n    }\n  }\n\n  // Pack sign, exponent, fraction\n  const bits = [];\n  for (i = fbits; i; i -= 1) {\n    bits.push(f % 2 ? 1 : 0);\n    f = Math.floor(f / 2);\n  }\n  for (i = ebits; i; i -= 1) {\n    bits.push(e % 2 ? 1 : 0);\n    e = Math.floor(e / 2);\n  }\n  bits.push(s ? 1 : 0);\n  bits.reverse();\n  const str = bits.join('');\n\n  // Return the data as a hex string. --MJL\n  let hexByteString = '';\n  for (i = 0; i < 64; i += 8) {\n    let hexByte = parseInt(str.substr(i, 8), 2).toString(16);\n    if (hexByte.length === 1) {\n      hexByte = '0' + hexByte;\n    }\n    hexByteString = hexByteString + hexByte;\n  }\n  return hexByteString.toLowerCase();\n};\n\n/**\n * Used to detect if we're in a Chrome content script (which executes in an\n * isolated environment where long-polling doesn't work).\n */\nexport const isChromeExtensionContentScript = function (): boolean {\n  return !!(\n    typeof window === 'object' &&\n    window['chrome'] &&\n    window['chrome']['extension'] &&\n    !/^chrome/.test(window.location.href)\n  );\n};\n\n/**\n * Used to detect if we're in a Windows 8 Store app.\n */\nexport const isWindowsStoreApp = function (): boolean {\n  // Check for the presence of a couple WinRT globals\n  return typeof Windows === 'object' && typeof Windows.UI === 'object';\n};\n\n/**\n * Converts a server error code to a Javascript Error\n */\nexport function errorForServerCode(code: string, query: QueryContext): Error {\n  let reason = 'Unknown Error';\n  if (code === 'too_big') {\n    reason =\n      'The data requested exceeds the maximum size ' +\n      'that can be accessed with a single request.';\n  } else if (code === 'permission_denied') {\n    reason = \"Client doesn't have permission to access the desired data.\";\n  } else if (code === 'unavailable') {\n    reason = 'The service is unavailable';\n  }\n\n  const error = new Error(\n    code + ' at ' + query._path.toString() + ': ' + reason\n  );\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (error as any).code = code.toUpperCase();\n  return error;\n}\n\n/**\n * Used to test for integer-looking strings\n */\nexport const INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d{1,10}$');\n\n/**\n * For use in keys, the minimum possible 32-bit integer.\n */\nexport const INTEGER_32_MIN = -2147483648;\n\n/**\n * For use in kyes, the maximum possible 32-bit integer.\n */\nexport const INTEGER_32_MAX = 2147483647;\n\n/**\n * If the string contains a 32-bit integer, return it.  Else return null.\n */\nexport const tryParseInt = function (str: string): number | null {\n  if (INTEGER_REGEXP_.test(str)) {\n    const intVal = Number(str);\n    if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) {\n      return intVal;\n    }\n  }\n  return null;\n};\n\n/**\n * Helper to run some code but catch any exceptions and re-throw them later.\n * Useful for preventing user callbacks from breaking internal code.\n *\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\n * convenient (we don't have to try to figure out when is a safe point to\n * re-throw it), and the behavior seems reasonable:\n *\n * * If you aren't pausing on exceptions, you get an error in the console with\n *   the correct stack trace.\n * * If you're pausing on all exceptions, the debugger will pause on your\n *   exception and then again when we rethrow it.\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\n *   on us re-throwing it.\n *\n * @param fn - The code to guard.\n */\nexport const exceptionGuard = function (fn: () => void) {\n  try {\n    fn();\n  } catch (e) {\n    // Re-throw exception when it's safe.\n    setTimeout(() => {\n      // It used to be that \"throw e\" would result in a good console error with\n      // relevant context, but as of Chrome 39, you just get the firebase.js\n      // file/line number where we re-throw it, which is useless. So we log\n      // e.stack explicitly.\n      const stack = e.stack || '';\n      warn('Exception was thrown by user callback.', stack);\n      throw e;\n    }, Math.floor(0));\n  }\n};\n\n/**\n * Helper function to safely call opt_callback with the specified arguments.  It:\n * 1. Turns into a no-op if opt_callback is null or undefined.\n * 2. Wraps the call inside exceptionGuard to prevent exceptions from breaking our state.\n *\n * @param callback - Optional onComplete callback.\n * @param varArgs - Arbitrary args to be passed to opt_onComplete\n */\nexport const callUserCallback = function (\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  callback?: Function | null,\n  ...varArgs: unknown[]\n) {\n  if (typeof callback === 'function') {\n    exceptionGuard(() => {\n      callback(...varArgs);\n    });\n  }\n};\n\n/**\n * @returns {boolean} true if we think we're currently being crawled.\n */\nexport const beingCrawled = function (): boolean {\n  const userAgent =\n    (typeof window === 'object' &&\n      window['navigator'] &&\n      window['navigator']['userAgent']) ||\n    '';\n\n  // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\n  // believe to support JavaScript/AJAX rendering.\n  // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\n  // would have seen the page\" is flaky if we don't treat it as a crawler.\n  return (\n    userAgent.search(\n      /googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i\n    ) >= 0\n  );\n};\n\n/**\n * Export a property of an object using a getter function.\n */\nexport const exportPropGetter = function (\n  object: object,\n  name: string,\n  fnGet: () => unknown\n) {\n  Object.defineProperty(object, name, { get: fnGet });\n};\n\n/**\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\n *\n * It is removed with clearTimeout() as normal.\n *\n * @param fn - Function to run.\n * @param time - Milliseconds to wait before running.\n * @returns The setTimeout() return value.\n */\nexport const setTimeoutNonBlocking = function (\n  fn: () => void,\n  time: number\n): number | object {\n  const timeout: number | object = setTimeout(fn, time);\n  // Note: at the time of this comment, unrefTimer is under the unstable set of APIs. Run with --unstable to enable the API.\n  if (\n    typeof timeout === 'number' &&\n    // @ts-ignore Is only defined in Deno environments.\n    typeof Deno !== 'undefined' &&\n    // @ts-ignore Deno and unrefTimer are only defined in Deno environments.\n    Deno['unrefTimer']\n  ) {\n    // @ts-ignore Deno and unrefTimer are only defined in Deno environments.\n    Deno.unrefTimer(timeout);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  } else if (typeof timeout === 'object' && (timeout as any)['unref']) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (timeout as any)['unref']();\n  }\n\n  return timeout;\n};\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AppCheckInternalComponentName,\n  AppCheckTokenListener,\n  AppCheckTokenResult,\n  FirebaseAppCheckInternal\n} from '@firebase/app-check-interop-types';\nimport { Provider } from '@firebase/component';\n\nimport { warn } from './util/util';\n\n/**\n * Abstraction around AppCheck's token fetching capabilities.\n */\nexport class AppCheckTokenProvider {\n  private appCheck?: FirebaseAppCheckInternal;\n  constructor(\n    private appName_: string,\n    private appCheckProvider?: Provider<AppCheckInternalComponentName>\n  ) {\n    this.appCheck = appCheckProvider?.getImmediate({ optional: true });\n    if (!this.appCheck) {\n      appCheckProvider?.get().then(appCheck => (this.appCheck = appCheck));\n    }\n  }\n\n  getToken(forceRefresh?: boolean): Promise<AppCheckTokenResult> {\n    if (!this.appCheck) {\n      return new Promise<AppCheckTokenResult>((resolve, reject) => {\n        // Support delayed initialization of FirebaseAppCheck. This allows our\n        // customers to initialize the RTDB SDK before initializing Firebase\n        // AppCheck and ensures that all requests are authenticated if a token\n        // becomes available before the timoeout below expires.\n        setTimeout(() => {\n          if (this.appCheck) {\n            this.getToken(forceRefresh).then(resolve, reject);\n          } else {\n            resolve(null);\n          }\n        }, 0);\n      });\n    }\n    return this.appCheck.getToken(forceRefresh);\n  }\n\n  addTokenChangeListener(listener: AppCheckTokenListener) {\n    this.appCheckProvider\n      ?.get()\n      .then(appCheck => appCheck.addTokenListener(listener));\n  }\n\n  notifyForInvalidToken(): void {\n    warn(\n      `Provided AppCheck credentials for the app named \"${this.appName_}\" ` +\n        'are invalid. This usually indicates your app was not initialized correctly.'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseAuthTokenData } from '@firebase/app-types/private';\nimport {\n  FirebaseAuthInternal,\n  FirebaseAuthInternalName\n} from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\n\nimport { log, warn } from './util/util';\n\nexport interface AuthTokenProvider {\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData>;\n  addTokenChangeListener(listener: (token: string | null) => void): void;\n  removeTokenChangeListener(listener: (token: string | null) => void): void;\n  notifyForInvalidToken(): void;\n}\n\n/**\n * Abstraction around FirebaseApp's token fetching capabilities.\n */\nexport class FirebaseAuthTokenProvider implements AuthTokenProvider {\n  private auth_: FirebaseAuthInternal | null = null;\n\n  constructor(\n    private appName_: string,\n    private firebaseOptions_: object,\n    private authProvider_: Provider<FirebaseAuthInternalName>\n  ) {\n    this.auth_ = authProvider_.getImmediate({ optional: true });\n    if (!this.auth_) {\n      authProvider_.onInit(auth => (this.auth_ = auth));\n    }\n  }\n\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData> {\n    if (!this.auth_) {\n      return new Promise<FirebaseAuthTokenData>((resolve, reject) => {\n        // Support delayed initialization of FirebaseAuth. This allows our\n        // customers to initialize the RTDB SDK before initializing Firebase\n        // Auth and ensures that all requests are authenticated if a token\n        // becomes available before the timoeout below expires.\n        setTimeout(() => {\n          if (this.auth_) {\n            this.getToken(forceRefresh).then(resolve, reject);\n          } else {\n            resolve(null);\n          }\n        }, 0);\n      });\n    }\n\n    return this.auth_.getToken(forceRefresh).catch(error => {\n      // TODO: Need to figure out all the cases this is raised and whether\n      // this makes sense.\n      if (error && error.code === 'auth/token-not-initialized') {\n        log('Got auth/token-not-initialized error.  Treating as null token.');\n        return null;\n      } else {\n        return Promise.reject(error);\n      }\n    });\n  }\n\n  addTokenChangeListener(listener: (token: string | null) => void): void {\n    // TODO: We might want to wrap the listener and call it with no args to\n    // avoid a leaky abstraction, but that makes removing the listener harder.\n    if (this.auth_) {\n      this.auth_.addAuthTokenListener(listener);\n    } else {\n      this.authProvider_\n        .get()\n        .then(auth => auth.addAuthTokenListener(listener));\n    }\n  }\n\n  removeTokenChangeListener(listener: (token: string | null) => void): void {\n    this.authProvider_\n      .get()\n      .then(auth => auth.removeAuthTokenListener(listener));\n  }\n\n  notifyForInvalidToken(): void {\n    let errorMessage =\n      'Provided authentication credentials for the app named \"' +\n      this.appName_ +\n      '\" are invalid. This usually indicates your app was not ' +\n      'initialized correctly. ';\n    if ('credential' in this.firebaseOptions_) {\n      errorMessage +=\n        'Make sure the \"credential\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else if ('serviceAccount' in this.firebaseOptions_) {\n      errorMessage +=\n        'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else {\n      errorMessage +=\n        'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\n        'initializeApp() match the values provided for your app at ' +\n        'https://console.firebase.google.com/.';\n    }\n    warn(errorMessage);\n  }\n}\n\n/* AuthTokenProvider that supplies a constant token. Used by Admin SDK or mockUserToken with emulators. */\nexport class EmulatorTokenProvider implements AuthTokenProvider {\n  /** A string that is treated as an admin access token by the RTDB emulator. Used by Admin SDK. */\n  static OWNER = 'owner';\n\n  constructor(private accessToken: string) {}\n\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData> {\n    return Promise.resolve({\n      accessToken: this.accessToken\n    });\n  }\n\n  addTokenChangeListener(listener: (token: string | null) => void): void {\n    // Invoke the listener immediately to match the behavior in Firebase Auth\n    // (see packages/auth/src/auth.js#L1807)\n    listener(this.accessToken);\n  }\n\n  removeTokenChangeListener(listener: (token: string | null) => void): void {}\n\n  notifyForInvalidToken(): void {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { LONG_POLLING, WEBSOCKET } from '../realtime/Constants';\n\nimport { PersistentStorage } from './storage/storage';\nimport { each } from './util/util';\n\n/**\n * A class that holds metadata about a Repo object\n */\nexport class RepoInfo {\n  private _host: string;\n  private _domain: string;\n  internalHost: string;\n\n  /**\n   * @param host - Hostname portion of the url for the repo\n   * @param secure - Whether or not this repo is accessed over ssl\n   * @param namespace - The namespace represented by the repo\n   * @param webSocketOnly - Whether to prefer websockets over all other transports (used by Nest).\n   * @param nodeAdmin - Whether this instance uses Admin SDK credentials\n   * @param persistenceKey - Override the default session persistence storage key\n   */\n  constructor(\n    host: string,\n    public readonly secure: boolean,\n    public readonly namespace: string,\n    public readonly webSocketOnly: boolean,\n    public readonly nodeAdmin: boolean = false,\n    public readonly persistenceKey: string = '',\n    public readonly includeNamespaceInQueryParams: boolean = false\n  ) {\n    this._host = host.toLowerCase();\n    this._domain = this._host.substr(this._host.indexOf('.') + 1);\n    this.internalHost =\n      (PersistentStorage.get('host:' + host) as string) || this._host;\n  }\n\n  isCacheableHost(): boolean {\n    return this.internalHost.substr(0, 2) === 's-';\n  }\n\n  isCustomHost() {\n    return (\n      this._domain !== 'firebaseio.com' &&\n      this._domain !== 'firebaseio-demo.com'\n    );\n  }\n\n  get host() {\n    return this._host;\n  }\n\n  set host(newHost: string) {\n    if (newHost !== this.internalHost) {\n      this.internalHost = newHost;\n      if (this.isCacheableHost()) {\n        PersistentStorage.set('host:' + this._host, this.internalHost);\n      }\n    }\n  }\n\n  toString(): string {\n    let str = this.toURLString();\n    if (this.persistenceKey) {\n      str += '<' + this.persistenceKey + '>';\n    }\n    return str;\n  }\n\n  toURLString(): string {\n    const protocol = this.secure ? 'https://' : 'http://';\n    const query = this.includeNamespaceInQueryParams\n      ? `?ns=${this.namespace}`\n      : '';\n    return `${protocol}${this.host}/${query}`;\n  }\n}\n\nfunction repoInfoNeedsQueryParam(repoInfo: RepoInfo): boolean {\n  return (\n    repoInfo.host !== repoInfo.internalHost ||\n    repoInfo.isCustomHost() ||\n    repoInfo.includeNamespaceInQueryParams\n  );\n}\n\n/**\n * Returns the websocket URL for this repo\n * @param repoInfo - RepoInfo object\n * @param type - of connection\n * @param params - list\n * @returns The URL for this repo\n */\nexport function repoInfoConnectionURL(\n  repoInfo: RepoInfo,\n  type: string,\n  params: { [k: string]: string }\n): string {\n  assert(typeof type === 'string', 'typeof type must == string');\n  assert(typeof params === 'object', 'typeof params must == object');\n\n  let connURL: string;\n  if (type === WEBSOCKET) {\n    connURL =\n      (repoInfo.secure ? 'wss://' : 'ws://') + repoInfo.internalHost + '/.ws?';\n  } else if (type === LONG_POLLING) {\n    connURL =\n      (repoInfo.secure ? 'https://' : 'http://') +\n      repoInfo.internalHost +\n      '/.lp?';\n  } else {\n    throw new Error('Unknown connection type: ' + type);\n  }\n  if (repoInfoNeedsQueryParam(repoInfo)) {\n    params['ns'] = repoInfo.namespace;\n  }\n\n  const pairs: string[] = [];\n\n  each(params, (key: string, value: string) => {\n    pairs.push(key + '=' + value);\n  });\n\n  return connURL + pairs.join('&');\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../RepoInfo';\n\nimport { StatsCollection } from './StatsCollection';\n\nconst collections: { [k: string]: StatsCollection } = {};\nconst reporters: { [k: string]: unknown } = {};\n\nexport function statsManagerGetCollection(repoInfo: RepoInfo): StatsCollection {\n  const hashString = repoInfo.toString();\n\n  if (!collections[hashString]) {\n    collections[hashString] = new StatsCollection();\n  }\n\n  return collections[hashString];\n}\n\nexport function statsManagerGetOrCreateReporter<T>(\n  repoInfo: RepoInfo,\n  creatorFunction: () => T\n): T {\n  const hashString = repoInfo.toString();\n\n  if (!reporters[hashString]) {\n    reporters[hashString] = creatorFunction();\n  }\n\n  return reporters[hashString] as T;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { exceptionGuard } from '../../core/util/util';\n\n/**\n * This class ensures the packets from the server arrive in order\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\n */\nexport class PacketReceiver {\n  pendingResponses: unknown[] = [];\n  currentResponseNum = 0;\n  closeAfterResponse = -1;\n  onClose: (() => void) | null = null;\n\n  /**\n   * @param onMessage_\n   */\n  constructor(private onMessage_: (a: {}) => void) {}\n\n  closeAfter(responseNum: number, callback: () => void) {\n    this.closeAfterResponse = responseNum;\n    this.onClose = callback;\n    if (this.closeAfterResponse < this.currentResponseNum) {\n      this.onClose();\n      this.onClose = null;\n    }\n  }\n\n  /**\n   * Each message from the server comes with a response number, and an array of data. The responseNumber\n   * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\n   * browsers will respond in the same order as the requests we sent\n   */\n  handleResponse(requestNum: number, data: unknown[]) {\n    this.pendingResponses[requestNum] = data;\n    while (this.pendingResponses[this.currentResponseNum]) {\n      const toProcess = this.pendingResponses[\n        this.currentResponseNum\n      ] as unknown[];\n      delete this.pendingResponses[this.currentResponseNum];\n      for (let i = 0; i < toProcess.length; ++i) {\n        if (toProcess[i]) {\n          exceptionGuard(() => {\n            this.onMessage_(toProcess[i]);\n          });\n        }\n      }\n      if (this.currentResponseNum === this.closeAfterResponse) {\n        if (this.onClose) {\n          this.onClose();\n          this.onClose = null;\n        }\n        break;\n      }\n      this.currentResponseNum++;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { base64Encode, isNodeSdk, stringify } from '@firebase/util';\n\nimport { RepoInfo, repoInfoConnectionURL } from '../core/RepoInfo';\nimport { StatsCollection } from '../core/stats/StatsCollection';\nimport { statsManagerGetCollection } from '../core/stats/StatsManager';\nimport {\n  executeWhenDOMReady,\n  isChromeExtensionContentScript,\n  isWindowsStoreApp,\n  log,\n  logWrapper,\n  LUIDGenerator,\n  splitStringBySize\n} from '../core/util/util';\n\nimport {\n  APP_CHECK_TOKEN_PARAM,\n  APPLICATION_ID_PARAM,\n  FORGE_DOMAIN_RE,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  LONG_POLLING,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM\n} from './Constants';\nimport { PacketReceiver } from './polling/PacketReceiver';\nimport { Transport } from './Transport';\n\n// URL query parameters associated with longpolling\nexport const FIREBASE_LONGPOLL_START_PARAM = 'start';\nexport const FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\nexport const FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\nexport const FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\nexport const FIREBASE_LONGPOLL_ID_PARAM = 'id';\nexport const FIREBASE_LONGPOLL_PW_PARAM = 'pw';\nexport const FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\nexport const FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\nexport const FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\nexport const FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\nexport const FIREBASE_LONGPOLL_DATA_PARAM = 'd';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM = 'disconn';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\n\n//Data size constants.\n//TODO: Perf: the maximum length actually differs from browser to browser.\n// We should check what browser we're on and set accordingly.\nconst MAX_URL_DATA_SIZE = 1870;\nconst SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\nconst MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\n\n/**\n * Keepalive period\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\n * length of 30 seconds that we can't exceed.\n */\nconst KEEPALIVE_REQUEST_INTERVAL = 25000;\n\n/**\n * How long to wait before aborting a long-polling connection attempt.\n */\nconst LP_CONNECT_TIMEOUT = 30000;\n\n/**\n * This class manages a single long-polling connection.\n */\nexport class BrowserPollConnection implements Transport {\n  bytesSent = 0;\n  bytesReceived = 0;\n  urlFn: (params: object) => string;\n  scriptTagHolder: FirebaseIFrameScriptHolder;\n  myDisconnFrame: HTMLIFrameElement;\n  curSegmentNum: number;\n  myPacketOrderer: PacketReceiver;\n  id: string;\n  password: string;\n  private log_: (...a: unknown[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_ = false;\n  private isClosed_: boolean;\n  private connectTimeoutTimer_: number | null;\n  private onDisconnect_: ((a?: boolean) => void) | null;\n\n  /**\n   * @param connId An identifier for this connection, used for logging\n   * @param repoInfo The info for the endpoint to send data to.\n   * @param applicationId The Firebase App ID for this project.\n   * @param appCheckToken The AppCheck token for this client.\n   * @param authToken The AuthToken to use for this connection.\n   * @param transportSessionId Optional transportSessionid if we are\n   * reconnecting for an existing transport session\n   * @param lastSessionId Optional lastSessionId if the PersistentConnection has\n   * already created a connection previously\n   */\n  constructor(\n    public connId: string,\n    public repoInfo: RepoInfo,\n    private applicationId?: string,\n    private appCheckToken?: string,\n    private authToken?: string,\n    public transportSessionId?: string,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n    this.urlFn = (params: { [k: string]: string }) => {\n      // Always add the token if we have one.\n      if (this.appCheckToken) {\n        params[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n      }\n      return repoInfoConnectionURL(repoInfo, LONG_POLLING, params);\n    };\n  }\n\n  /**\n   * @param onMessage - Callback when messages arrive\n   * @param onDisconnect - Callback with connection lost.\n   */\n  open(onMessage: (msg: {}) => void, onDisconnect: (a?: boolean) => void) {\n    this.curSegmentNum = 0;\n    this.onDisconnect_ = onDisconnect;\n    this.myPacketOrderer = new PacketReceiver(onMessage);\n    this.isClosed_ = false;\n\n    this.connectTimeoutTimer_ = setTimeout(() => {\n      this.log_('Timed out trying to connect.');\n      // Make sure we clear the host cache\n      this.onClosed_();\n      this.connectTimeoutTimer_ = null;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(LP_CONNECT_TIMEOUT)) as any;\n\n    // Ensure we delay the creation of the iframe until the DOM is loaded.\n    executeWhenDOMReady(() => {\n      if (this.isClosed_) {\n        return;\n      }\n\n      //Set up a callback that gets triggered once a connection is set up.\n      this.scriptTagHolder = new FirebaseIFrameScriptHolder(\n        (...args) => {\n          const [command, arg1, arg2, arg3, arg4] = args;\n          this.incrementIncomingBytes_(args);\n          if (!this.scriptTagHolder) {\n            return; // we closed the connection.\n          }\n\n          if (this.connectTimeoutTimer_) {\n            clearTimeout(this.connectTimeoutTimer_);\n            this.connectTimeoutTimer_ = null;\n          }\n          this.everConnected_ = true;\n          if (command === FIREBASE_LONGPOLL_START_PARAM) {\n            this.id = arg1 as string;\n            this.password = arg2 as string;\n          } else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\n            // Don't clear the host cache. We got a response from the server, so we know it's reachable\n            if (arg1) {\n              // We aren't expecting any more data (other than what the server's already in the process of sending us\n              // through our already open polls), so don't send any more.\n              this.scriptTagHolder.sendNewPolls = false;\n\n              // arg1 in this case is the last response number sent by the server. We should try to receive\n              // all of the responses up to this one before closing\n              this.myPacketOrderer.closeAfter(arg1 as number, () => {\n                this.onClosed_();\n              });\n            } else {\n              this.onClosed_();\n            }\n          } else {\n            throw new Error('Unrecognized command received: ' + command);\n          }\n        },\n        (...args) => {\n          const [pN, data] = args;\n          this.incrementIncomingBytes_(args);\n          this.myPacketOrderer.handleResponse(pN as number, data as unknown[]);\n        },\n        () => {\n          this.onClosed_();\n        },\n        this.urlFn\n      );\n\n      //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\n      //from cache.\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(\n        Math.random() * 100000000\n      );\n      if (this.scriptTagHolder.uniqueCallbackIdentifier) {\n        urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] =\n          this.scriptTagHolder.uniqueCallbackIdentifier;\n      }\n      urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n      if (this.transportSessionId) {\n        urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;\n      }\n      if (this.lastSessionId) {\n        urlParams[LAST_SESSION_PARAM] = this.lastSessionId;\n      }\n      if (this.applicationId) {\n        urlParams[APPLICATION_ID_PARAM] = this.applicationId;\n      }\n      if (this.appCheckToken) {\n        urlParams[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n      }\n      if (\n        typeof location !== 'undefined' &&\n        location.hostname &&\n        FORGE_DOMAIN_RE.test(location.hostname)\n      ) {\n        urlParams[REFERER_PARAM] = FORGE_REF;\n      }\n      const connectURL = this.urlFn(urlParams);\n      this.log_('Connecting via long-poll to ' + connectURL);\n      this.scriptTagHolder.addTag(connectURL, () => {\n        /* do nothing */\n      });\n    });\n  }\n\n  /**\n   * Call this when a handshake has completed successfully and we want to consider the connection established\n   */\n  start() {\n    this.scriptTagHolder.startLongPoll(this.id, this.password);\n    this.addDisconnectPingFrame(this.id, this.password);\n  }\n\n  static forceAllow_: boolean;\n\n  /**\n   * Forces long polling to be considered as a potential transport\n   */\n  static forceAllow() {\n    BrowserPollConnection.forceAllow_ = true;\n  }\n\n  static forceDisallow_: boolean;\n\n  /**\n   * Forces longpolling to not be considered as a potential transport\n   */\n  static forceDisallow() {\n    BrowserPollConnection.forceDisallow_ = true;\n  }\n\n  // Static method, use string literal so it can be accessed in a generic way\n  static isAvailable() {\n    if (isNodeSdk()) {\n      return false;\n    } else if (BrowserPollConnection.forceAllow_) {\n      return true;\n    } else {\n      // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\n      // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\n      return (\n        !BrowserPollConnection.forceDisallow_ &&\n        typeof document !== 'undefined' &&\n        document.createElement != null &&\n        !isChromeExtensionContentScript() &&\n        !isWindowsStoreApp()\n      );\n    }\n  }\n\n  /**\n   * No-op for polling\n   */\n  markConnectionHealthy() {}\n\n  /**\n   * Stops polling and cleans up the iframe\n   */\n  private shutdown_() {\n    this.isClosed_ = true;\n\n    if (this.scriptTagHolder) {\n      this.scriptTagHolder.close();\n      this.scriptTagHolder = null;\n    }\n\n    //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\n    if (this.myDisconnFrame) {\n      document.body.removeChild(this.myDisconnFrame);\n      this.myDisconnFrame = null;\n    }\n\n    if (this.connectTimeoutTimer_) {\n      clearTimeout(this.connectTimeoutTimer_);\n      this.connectTimeoutTimer_ = null;\n    }\n  }\n\n  /**\n   * Triggered when this transport is closed\n   */\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is closing itself');\n      this.shutdown_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_(this.everConnected_);\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\n   * that we've left.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is being closed.');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\n   * broken into chunks (since URLs have a small maximum length).\n   * @param data - The JSON data to transmit.\n   */\n  send(data: {}) {\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //first, lets get the base64-encoded data\n    const base64data = base64Encode(dataStr);\n\n    //We can only fit a certain amount in each URL, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n    const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\n\n    //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\n    //of segments so that we can reassemble the packet on the server.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.scriptTagHolder.enqueueSegment(\n        this.curSegmentNum,\n        dataSegs.length,\n        dataSegs[i]\n      );\n      this.curSegmentNum++;\n    }\n  }\n\n  /**\n   * This is how we notify the server that we're leaving.\n   * We aren't able to send requests with DHTML on a window close event, but we can\n   * trigger XHR requests in some browsers (everything but Opera basically).\n   */\n  addDisconnectPingFrame(id: string, pw: string) {\n    if (isNodeSdk()) {\n      return;\n    }\n    this.myDisconnFrame = document.createElement('iframe');\n    const urlParams: { [k: string]: string } = {};\n    urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\n    urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\n    urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\n    this.myDisconnFrame.src = this.urlFn(urlParams);\n    this.myDisconnFrame.style.display = 'none';\n\n    document.body.appendChild(this.myDisconnFrame);\n  }\n\n  /**\n   * Used to track the bytes received by this client\n   */\n  private incrementIncomingBytes_(args: unknown) {\n    // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\n    const bytesReceived = stringify(args).length;\n    this.bytesReceived += bytesReceived;\n    this.stats_.incrementCounter('bytes_received', bytesReceived);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface IFrameElement extends HTMLIFrameElement {\n  doc: Document;\n}\n\n/*********************************************************************************************\n * A wrapper around an iframe that is used as a long-polling script holder.\n *********************************************************************************************/\nexport class FirebaseIFrameScriptHolder {\n  //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\n  //problems in some browsers.\n  outstandingRequests = new Set<number>();\n\n  //A queue of the pending segments waiting for transmission to the server.\n  pendingSegs: Array<{ seg: number; ts: number; d: unknown }> = [];\n\n  //A serial number. We use this for two things:\n  // 1) A way to ensure the browser doesn't cache responses to polls\n  // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\n  //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\n  //    JSONP code in the order it was added to the iframe.\n  currentSerial = Math.floor(Math.random() * 100000000);\n\n  // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\n  // incoming data from the server that we're waiting for).\n  sendNewPolls = true;\n\n  uniqueCallbackIdentifier: number;\n  myIFrame: IFrameElement;\n  alive: boolean;\n  myID: string;\n  myPW: string;\n  commandCB: (command: string, ...args: unknown[]) => void;\n  onMessageCB: (...args: unknown[]) => void;\n\n  /**\n   * @param commandCB - The callback to be called when control commands are recevied from the server.\n   * @param onMessageCB - The callback to be triggered when responses arrive from the server.\n   * @param onDisconnect - The callback to be triggered when this tag holder is closed\n   * @param urlFn - A function that provides the URL of the endpoint to send data to.\n   */\n  constructor(\n    commandCB: (command: string, ...args: unknown[]) => void,\n    onMessageCB: (...args: unknown[]) => void,\n    public onDisconnect: () => void,\n    public urlFn: (a: object) => string\n  ) {\n    if (!isNodeSdk()) {\n      //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\n      //iframes where we put the long-polling script tags. We have two callbacks:\n      //   1) Command Callback - Triggered for control issues, like starting a connection.\n      //   2) Message Callback - Triggered when new data arrives.\n      this.uniqueCallbackIdentifier = LUIDGenerator();\n      window[\n        FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier\n      ] = commandCB;\n      window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] =\n        onMessageCB;\n\n      //Create an iframe for us to add script tags to.\n      this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\n\n      // Set the iframe's contents.\n      let script = '';\n      // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\n      // for ie9, but ie8 needs to do it again in the document itself.\n      if (\n        this.myIFrame.src &&\n        this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:'\n      ) {\n        const currentDomain = document.domain;\n        script = '<script>document.domain=\"' + currentDomain + '\";</script>';\n      }\n      const iframeContents = '<html><body>' + script + '</body></html>';\n      try {\n        this.myIFrame.doc.open();\n        this.myIFrame.doc.write(iframeContents);\n        this.myIFrame.doc.close();\n      } catch (e) {\n        log('frame writing exception');\n        if (e.stack) {\n          log(e.stack);\n        }\n        log(e);\n      }\n    } else {\n      this.commandCB = commandCB;\n      this.onMessageCB = onMessageCB;\n    }\n  }\n\n  /**\n   * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\n   * actually use.\n   */\n  private static createIFrame_(): IFrameElement {\n    const iframe = document.createElement('iframe') as IFrameElement;\n    iframe.style.display = 'none';\n\n    // This is necessary in order to initialize the document inside the iframe\n    if (document.body) {\n      document.body.appendChild(iframe);\n      try {\n        // If document.domain has been modified in IE, this will throw an error, and we need to set the\n        // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\n        // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\n        const a = iframe.contentWindow.document;\n        if (!a) {\n          // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\n          log('No IE domain setting required');\n        }\n      } catch (e) {\n        const domain = document.domain;\n        iframe.src =\n          \"javascript:void((function(){document.open();document.domain='\" +\n          domain +\n          \"';document.close();})())\";\n      }\n    } else {\n      // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\n      // never gets hit.\n      throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\n    }\n\n    // Get the document of the iframe in a browser-specific way.\n    if (iframe.contentDocument) {\n      iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\n    } else if (iframe.contentWindow) {\n      iframe.doc = iframe.contentWindow.document; // Internet Explorer\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if ((iframe as any).document) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      iframe.doc = (iframe as any).document; //others?\n    }\n\n    return iframe;\n  }\n\n  /**\n   * Cancel all outstanding queries and remove the frame.\n   */\n  close() {\n    //Mark this iframe as dead, so no new requests are sent.\n    this.alive = false;\n\n    if (this.myIFrame) {\n      //We have to actually remove all of the html inside this iframe before removing it from the\n      //window, or IE will continue loading and executing the script tags we've already added, which\n      //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.\n      this.myIFrame.doc.body.innerHTML = '';\n      setTimeout(() => {\n        if (this.myIFrame !== null) {\n          document.body.removeChild(this.myIFrame);\n          this.myIFrame = null;\n        }\n      }, Math.floor(0));\n    }\n\n    // Protect from being called recursively.\n    const onDisconnect = this.onDisconnect;\n    if (onDisconnect) {\n      this.onDisconnect = null;\n      onDisconnect();\n    }\n  }\n\n  /**\n   * Actually start the long-polling session by adding the first script tag(s) to the iframe.\n   * @param id - The ID of this connection\n   * @param pw - The password for this connection\n   */\n  startLongPoll(id: string, pw: string) {\n    this.myID = id;\n    this.myPW = pw;\n    this.alive = true;\n\n    //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\n    while (this.newRequest_()) {}\n  }\n\n  /**\n   * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\n   * too many outstanding requests and we are still alive.\n   *\n   * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\n   * needed.\n   */\n  private newRequest_() {\n    // We keep one outstanding request open all the time to receive data, but if we need to send data\n    // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\n    // close the old request.\n    if (\n      this.alive &&\n      this.sendNewPolls &&\n      this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)\n    ) {\n      //construct our url\n      this.currentSerial++;\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\n      urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\n      let theURL = this.urlFn(urlParams);\n      //Now add as much data as we can.\n      let curDataString = '';\n      let i = 0;\n\n      while (this.pendingSegs.length > 0) {\n        //first, lets see if the next segment will fit.\n        const nextSeg = this.pendingSegs[0];\n        if (\n          (nextSeg.d as unknown[]).length +\n            SEG_HEADER_SIZE +\n            curDataString.length <=\n          MAX_URL_DATA_SIZE\n        ) {\n          //great, the segment will fit. Lets append it.\n          const theSeg = this.pendingSegs.shift();\n          curDataString =\n            curDataString +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\n            i +\n            '=' +\n            theSeg.seg +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\n            i +\n            '=' +\n            theSeg.ts +\n            '&' +\n            FIREBASE_LONGPOLL_DATA_PARAM +\n            i +\n            '=' +\n            theSeg.d;\n          i++;\n        } else {\n          break;\n        }\n      }\n\n      theURL = theURL + curDataString;\n      this.addLongPollTag_(theURL, this.currentSerial);\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Queue a packet for transmission to the server.\n   * @param segnum - A sequential id for this packet segment used for reassembly\n   * @param totalsegs - The total number of segments in this packet\n   * @param data - The data for this segment.\n   */\n  enqueueSegment(segnum: number, totalsegs: number, data: unknown) {\n    //add this to the queue of segments to send.\n    this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\n\n    //send the data immediately if there isn't already data being transmitted, unless\n    //startLongPoll hasn't been called yet.\n    if (this.alive) {\n      this.newRequest_();\n    }\n  }\n\n  /**\n   * Add a script tag for a regular long-poll request.\n   * @param url - The URL of the script tag.\n   * @param serial - The serial number of the request.\n   */\n  private addLongPollTag_(url: string, serial: number) {\n    //remember that we sent this request.\n    this.outstandingRequests.add(serial);\n\n    const doNewRequest = () => {\n      this.outstandingRequests.delete(serial);\n      this.newRequest_();\n    };\n\n    // If this request doesn't return on its own accord (by the server sending us some data), we'll\n    // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\n    const keepaliveTimeout = setTimeout(\n      doNewRequest,\n      Math.floor(KEEPALIVE_REQUEST_INTERVAL)\n    );\n\n    const readyStateCB = () => {\n      // Request completed.  Cancel the keepalive.\n      clearTimeout(keepaliveTimeout);\n\n      // Trigger a new request so we can continue receiving data.\n      doNewRequest();\n    };\n\n    this.addTag(url, readyStateCB);\n  }\n\n  /**\n   * Add an arbitrary script tag to the iframe.\n   * @param url - The URL for the script tag source.\n   * @param loadCB - A callback to be triggered once the script has loaded.\n   */\n  addTag(url: string, loadCB: () => void) {\n    if (isNodeSdk()) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (this as any).doNodeLongPoll(url, loadCB);\n    } else {\n      setTimeout(() => {\n        try {\n          // if we're already closed, don't add this poll\n          if (!this.sendNewPolls) {\n            return;\n          }\n          const newScript = this.myIFrame.doc.createElement('script');\n          newScript.type = 'text/javascript';\n          newScript.async = true;\n          newScript.src = url;\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          newScript.onload = (newScript as any).onreadystatechange =\n            function () {\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              const rstate = (newScript as any).readyState;\n              if (!rstate || rstate === 'loaded' || rstate === 'complete') {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                newScript.onload = (newScript as any).onreadystatechange = null;\n                if (newScript.parentNode) {\n                  newScript.parentNode.removeChild(newScript);\n                }\n                loadCB();\n              }\n            };\n          newScript.onerror = () => {\n            log('Long-poll script failed to load: ' + url);\n            this.sendNewPolls = false;\n            this.close();\n          };\n          this.myIFrame.doc.body.appendChild(newScript);\n        } catch (e) {\n          // TODO: we should make this error visible somehow\n        }\n      }, Math.floor(1));\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, isNodeSdk, jsonEval, stringify } from '@firebase/util';\n\nimport { RepoInfo, repoInfoConnectionURL } from '../core/RepoInfo';\nimport { StatsCollection } from '../core/stats/StatsCollection';\nimport { statsManagerGetCollection } from '../core/stats/StatsManager';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { logWrapper, splitStringBySize } from '../core/util/util';\nimport { SDK_VERSION } from '../core/version';\n\nimport {\n  APPLICATION_ID_PARAM,\n  APP_CHECK_TOKEN_PARAM,\n  FORGE_DOMAIN_RE,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM,\n  WEBSOCKET\n} from './Constants';\nimport { Transport } from './Transport';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const MozWebSocket: any;\n\nconst WEBSOCKET_MAX_FRAME_SIZE = 16384;\nconst WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\n\nlet WebSocketImpl = null;\nif (typeof MozWebSocket !== 'undefined') {\n  WebSocketImpl = MozWebSocket;\n} else if (typeof WebSocket !== 'undefined') {\n  WebSocketImpl = WebSocket;\n}\n\nexport function setWebSocketImpl(impl) {\n  WebSocketImpl = impl;\n}\n\n/**\n * Create a new websocket connection with the given callbacks.\n */\nexport class WebSocketConnection implements Transport {\n  keepaliveTimer: number | null = null;\n  frames: string[] | null = null;\n  totalFrames = 0;\n  bytesSent = 0;\n  bytesReceived = 0;\n  connURL: string;\n  onDisconnect: (a?: boolean) => void;\n  onMessage: (msg: {}) => void;\n  mySock: WebSocket | null;\n  private log_: (...a: unknown[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_: boolean;\n  private isClosed_: boolean;\n  private nodeAdmin: boolean;\n\n  /**\n   * @param connId identifier for this transport\n   * @param repoInfo The info for the websocket endpoint.\n   * @param applicationId The Firebase App ID for this project.\n   * @param appCheckToken The App Check Token for this client.\n   * @param authToken The Auth Token for this client.\n   * @param transportSessionId Optional transportSessionId if this is connecting\n   * to an existing transport session\n   * @param lastSessionId Optional lastSessionId if there was a previous\n   * connection\n   */\n  constructor(\n    public connId: string,\n    repoInfo: RepoInfo,\n    private applicationId?: string,\n    private appCheckToken?: string,\n    private authToken?: string,\n    transportSessionId?: string,\n    lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(this.connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n    this.connURL = WebSocketConnection.connectionURL_(\n      repoInfo,\n      transportSessionId,\n      lastSessionId,\n      appCheckToken,\n      applicationId\n    );\n    this.nodeAdmin = repoInfo.nodeAdmin;\n  }\n\n  /**\n   * @param repoInfo - The info for the websocket endpoint.\n   * @param transportSessionId - Optional transportSessionId if this is connecting to an existing transport\n   *                                         session\n   * @param lastSessionId - Optional lastSessionId if there was a previous connection\n   * @returns connection url\n   */\n  private static connectionURL_(\n    repoInfo: RepoInfo,\n    transportSessionId?: string,\n    lastSessionId?: string,\n    appCheckToken?: string,\n    applicationId?: string\n  ): string {\n    const urlParams: { [k: string]: string } = {};\n    urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n\n    if (\n      !isNodeSdk() &&\n      typeof location !== 'undefined' &&\n      location.hostname &&\n      FORGE_DOMAIN_RE.test(location.hostname)\n    ) {\n      urlParams[REFERER_PARAM] = FORGE_REF;\n    }\n    if (transportSessionId) {\n      urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\n    }\n    if (lastSessionId) {\n      urlParams[LAST_SESSION_PARAM] = lastSessionId;\n    }\n    if (appCheckToken) {\n      urlParams[APP_CHECK_TOKEN_PARAM] = appCheckToken;\n    }\n    if (applicationId) {\n      urlParams[APPLICATION_ID_PARAM] = applicationId;\n    }\n\n    return repoInfoConnectionURL(repoInfo, WEBSOCKET, urlParams);\n  }\n\n  /**\n   * @param onMessage - Callback when messages arrive\n   * @param onDisconnect - Callback with connection lost.\n   */\n  open(onMessage: (msg: {}) => void, onDisconnect: (a?: boolean) => void) {\n    this.onDisconnect = onDisconnect;\n    this.onMessage = onMessage;\n\n    this.log_('Websocket connecting to ' + this.connURL);\n\n    this.everConnected_ = false;\n    // Assume failure until proven otherwise.\n    PersistentStorage.set('previous_websocket_failure', true);\n\n    try {\n      let options: { [k: string]: object };\n      if (isNodeSdk()) {\n        const device = this.nodeAdmin ? 'AdminNode' : 'Node';\n        // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\n        options = {\n          headers: {\n            'User-Agent': `Firebase/${PROTOCOL_VERSION}/${SDK_VERSION}/${process.platform}/${device}`,\n            'X-Firebase-GMPID': this.applicationId || ''\n          }\n        };\n\n        // If using Node with admin creds, AppCheck-related checks are unnecessary.\n        // Note that we send the credentials here even if they aren't admin credentials, which is\n        // not a problem.\n        // Note that this header is just used to bypass appcheck, and the token should still be sent\n        // through the websocket connection once it is established.\n        if (this.authToken) {\n          options.headers['Authorization'] = `Bearer ${this.authToken}`;\n        }\n        if (this.appCheckToken) {\n          options.headers['X-Firebase-AppCheck'] = this.appCheckToken;\n        }\n\n        // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\n        const env = process['env'];\n        const proxy =\n          this.connURL.indexOf('wss://') === 0\n            ? env['HTTPS_PROXY'] || env['https_proxy']\n            : env['HTTP_PROXY'] || env['http_proxy'];\n\n        if (proxy) {\n          options['proxy'] = { origin: proxy };\n        }\n      }\n      this.mySock = new WebSocketImpl(this.connURL, [], options);\n    } catch (e) {\n      this.log_('Error instantiating WebSocket.');\n      const error = e.message || e.data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n      return;\n    }\n\n    this.mySock.onopen = () => {\n      this.log_('Websocket connected.');\n      this.everConnected_ = true;\n    };\n\n    this.mySock.onclose = () => {\n      this.log_('Websocket connection was disconnected.');\n      this.mySock = null;\n      this.onClosed_();\n    };\n\n    this.mySock.onmessage = m => {\n      this.handleIncomingFrame(m as {});\n    };\n\n    this.mySock.onerror = e => {\n      this.log_('WebSocket error.  Closing connection.');\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const error = (e as any).message || (e as any).data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n    };\n  }\n\n  /**\n   * No-op for websockets, we don't need to do anything once the connection is confirmed as open\n   */\n  start() {}\n\n  static forceDisallow_: boolean;\n\n  static forceDisallow() {\n    WebSocketConnection.forceDisallow_ = true;\n  }\n\n  static isAvailable(): boolean {\n    let isOldAndroid = false;\n    if (typeof navigator !== 'undefined' && navigator.userAgent) {\n      const oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\n      const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\n      if (oldAndroidMatch && oldAndroidMatch.length > 1) {\n        if (parseFloat(oldAndroidMatch[1]) < 4.4) {\n          isOldAndroid = true;\n        }\n      }\n    }\n\n    return (\n      !isOldAndroid &&\n      WebSocketImpl !== null &&\n      !WebSocketConnection.forceDisallow_\n    );\n  }\n\n  /**\n   * Number of response before we consider the connection \"healthy.\"\n   */\n  static responsesRequiredToBeHealthy = 2;\n\n  /**\n   * Time to wait for the connection te become healthy before giving up.\n   */\n  static healthyTimeout = 30000;\n\n  /**\n   * Returns true if we previously failed to connect with this transport.\n   */\n  static previouslyFailed(): boolean {\n    // If our persistent storage is actually only in-memory storage,\n    // we default to assuming that it previously failed to be safe.\n    return (\n      PersistentStorage.isInMemoryStorage ||\n      PersistentStorage.get('previous_websocket_failure') === true\n    );\n  }\n\n  markConnectionHealthy() {\n    PersistentStorage.remove('previous_websocket_failure');\n  }\n\n  private appendFrame_(data: string) {\n    this.frames.push(data);\n    if (this.frames.length === this.totalFrames) {\n      const fullMess = this.frames.join('');\n      this.frames = null;\n      const jsonMess = jsonEval(fullMess) as object;\n\n      //handle the message\n      this.onMessage(jsonMess);\n    }\n  }\n\n  /**\n   * @param frameCount - The number of frames we are expecting from the server\n   */\n  private handleNewFrameCount_(frameCount: number) {\n    this.totalFrames = frameCount;\n    this.frames = [];\n  }\n\n  /**\n   * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\n   * @returns Any remaining data to be process, or null if there is none\n   */\n  private extractFrameCount_(data: string): string | null {\n    assert(this.frames === null, 'We already have a frame buffer');\n    // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\n    // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\n    if (data.length <= 6) {\n      const frameCount = Number(data);\n      if (!isNaN(frameCount)) {\n        this.handleNewFrameCount_(frameCount);\n        return null;\n      }\n    }\n    this.handleNewFrameCount_(1);\n    return data;\n  }\n\n  /**\n   * Process a websocket frame that has arrived from the server.\n   * @param mess - The frame data\n   */\n  handleIncomingFrame(mess: { [k: string]: unknown }) {\n    if (this.mySock === null) {\n      return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\n    }\n    const data = mess['data'] as string;\n    this.bytesReceived += data.length;\n    this.stats_.incrementCounter('bytes_received', data.length);\n\n    this.resetKeepAlive();\n\n    if (this.frames !== null) {\n      // we're buffering\n      this.appendFrame_(data);\n    } else {\n      // try to parse out a frame count, otherwise, assume 1 and process it\n      const remainingData = this.extractFrameCount_(data);\n      if (remainingData !== null) {\n        this.appendFrame_(remainingData);\n      }\n    }\n  }\n\n  /**\n   * Send a message to the server\n   * @param data - The JSON object to transmit\n   */\n  send(data: {}) {\n    this.resetKeepAlive();\n\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //We can only fit a certain amount in each websocket frame, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n\n    const dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\n\n    //Send the length header\n    if (dataSegs.length > 1) {\n      this.sendString_(String(dataSegs.length));\n    }\n\n    //Send the actual data in segments.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.sendString_(dataSegs[i]);\n    }\n  }\n\n  private shutdown_() {\n    this.isClosed_ = true;\n    if (this.keepaliveTimer) {\n      clearInterval(this.keepaliveTimer);\n      this.keepaliveTimer = null;\n    }\n\n    if (this.mySock) {\n      this.mySock.close();\n      this.mySock = null;\n    }\n  }\n\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is closing itself');\n      this.shutdown_();\n\n      // since this is an internal close, trigger the close listener\n      if (this.onDisconnect) {\n        this.onDisconnect(this.everConnected_);\n        this.onDisconnect = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler.\n   * Close the websocket and kill the connection.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is being closed');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\n   * the last activity.\n   */\n  resetKeepAlive() {\n    clearInterval(this.keepaliveTimer);\n    this.keepaliveTimer = setInterval(() => {\n      //If there has been no websocket activity for a while, send a no-op\n      if (this.mySock) {\n        this.sendString_('0');\n      }\n      this.resetKeepAlive();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL)) as any;\n  }\n\n  /**\n   * Send a string over the websocket.\n   *\n   * @param str - String to send.\n   */\n  private sendString_(str: string) {\n    // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\n    // calls for some unknown reason.  We treat these as an error and disconnect.\n    // See https://app.asana.com/0/58926111402292/68021340250410\n    try {\n      this.mySock.send(str);\n    } catch (e) {\n      this.log_(\n        'Exception thrown from WebSocket.send():',\n        e.message || e.data,\n        'Closing connection.'\n      );\n      setTimeout(this.onClosed_.bind(this), 0);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../core/RepoInfo';\nimport { warn } from '../core/util/util';\n\nimport { BrowserPollConnection } from './BrowserPollConnection';\nimport { TransportConstructor } from './Transport';\nimport { WebSocketConnection } from './WebSocketConnection';\n\n/**\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\n * lifecycle.\n *\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\n * they are available.\n */\nexport class TransportManager {\n  private transports_: TransportConstructor[];\n\n  // Keeps track of whether the TransportManager has already chosen a transport to use\n  static globalTransportInitialized_ = false;\n\n  static get ALL_TRANSPORTS() {\n    return [BrowserPollConnection, WebSocketConnection];\n  }\n\n  /**\n   * Returns whether transport has been selected to ensure WebSocketConnection or BrowserPollConnection are not called after\n   * TransportManager has already set up transports_\n   */\n  static get IS_TRANSPORT_INITIALIZED() {\n    return this.globalTransportInitialized_;\n  }\n\n  /**\n   * @param repoInfo - Metadata around the namespace we're connecting to\n   */\n  constructor(repoInfo: RepoInfo) {\n    this.initTransports_(repoInfo);\n  }\n\n  private initTransports_(repoInfo: RepoInfo) {\n    const isWebSocketsAvailable: boolean =\n      WebSocketConnection && WebSocketConnection['isAvailable']();\n    let isSkipPollConnection =\n      isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\n\n    if (repoInfo.webSocketOnly) {\n      if (!isWebSocketsAvailable) {\n        warn(\n          \"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\"\n        );\n      }\n\n      isSkipPollConnection = true;\n    }\n\n    if (isSkipPollConnection) {\n      this.transports_ = [WebSocketConnection];\n    } else {\n      const transports = (this.transports_ = [] as TransportConstructor[]);\n      for (const transport of TransportManager.ALL_TRANSPORTS) {\n        if (transport && transport['isAvailable']()) {\n          transports.push(transport);\n        }\n      }\n      TransportManager.globalTransportInitialized_ = true;\n    }\n  }\n\n  /**\n   * @returns The constructor for the initial transport to use\n   */\n  initialTransport(): TransportConstructor {\n    if (this.transports_.length > 0) {\n      return this.transports_[0];\n    } else {\n      throw new Error('No transports available');\n    }\n  }\n\n  /**\n   * @returns The constructor for the next transport, or null\n   */\n  upgradeTransport(): TransportConstructor | null {\n    if (this.transports_.length > 1) {\n      return this.transports_[1];\n    } else {\n      return null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../core/RepoInfo';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { Indexable } from '../core/util/misc';\nimport {\n  error,\n  logWrapper,\n  requireKey,\n  setTimeoutNonBlocking,\n  warn\n} from '../core/util/util';\n\nimport { PROTOCOL_VERSION } from './Constants';\nimport { Transport, TransportConstructor } from './Transport';\nimport { TransportManager } from './TransportManager';\n\n// Abort upgrade attempt if it takes longer than 60s.\nconst UPGRADE_TIMEOUT = 60000;\n\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\nconst DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\n\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\n// but we've sent/received enough bytes, we don't cancel the connection.\nconst BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\nconst BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\n\nconst enum RealtimeState {\n  CONNECTING,\n  CONNECTED,\n  DISCONNECTED\n}\n\nconst MESSAGE_TYPE = 't';\nconst MESSAGE_DATA = 'd';\nconst CONTROL_SHUTDOWN = 's';\nconst CONTROL_RESET = 'r';\nconst CONTROL_ERROR = 'e';\nconst CONTROL_PONG = 'o';\nconst SWITCH_ACK = 'a';\nconst END_TRANSMISSION = 'n';\nconst PING = 'p';\n\nconst SERVER_HELLO = 'h';\n\n/**\n * Creates a new real-time connection to the server using whichever method works\n * best in the current browser.\n */\nexport class Connection {\n  connectionCount = 0;\n  pendingDataMessages: unknown[] = [];\n  sessionId: string;\n\n  private conn_: Transport;\n  private healthyTimeout_: number;\n  private isHealthy_: boolean;\n  private log_: (...args: unknown[]) => void;\n  private primaryResponsesRequired_: number;\n  private rx_: Transport;\n  private secondaryConn_: Transport;\n  private secondaryResponsesRequired_: number;\n  private state_ = RealtimeState.CONNECTING;\n  private transportManager_: TransportManager;\n  private tx_: Transport;\n\n  /**\n   * @param id - an id for this connection\n   * @param repoInfo_ - the info for the endpoint to connect to\n   * @param applicationId_ - the Firebase App ID for this project\n   * @param appCheckToken_ - The App Check Token for this device.\n   * @param authToken_ - The auth token for this session.\n   * @param onMessage_ - the callback to be triggered when a server-push message arrives\n   * @param onReady_ - the callback to be triggered when this connection is ready to send messages.\n   * @param onDisconnect_ - the callback to be triggered when a connection was lost\n   * @param onKill_ - the callback to be triggered when this connection has permanently shut down.\n   * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\n   */\n  constructor(\n    public id: string,\n    private repoInfo_: RepoInfo,\n    private applicationId_: string | undefined,\n    private appCheckToken_: string | undefined,\n    private authToken_: string | undefined,\n    private onMessage_: (a: {}) => void,\n    private onReady_: (a: number, b: string) => void,\n    private onDisconnect_: () => void,\n    private onKill_: (a: string) => void,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper('c:' + this.id + ':');\n    this.transportManager_ = new TransportManager(repoInfo_);\n    this.log_('Connection created');\n    this.start_();\n  }\n\n  /**\n   * Starts a connection attempt\n   */\n  private start_(): void {\n    const conn = this.transportManager_.initialTransport();\n    this.conn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      this.applicationId_,\n      this.appCheckToken_,\n      this.authToken_,\n      null,\n      this.lastSessionId\n    );\n\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessageReceived = this.connReceiver_(this.conn_);\n    const onConnectionLost = this.disconnReceiver_(this.conn_);\n    this.tx_ = this.conn_;\n    this.rx_ = this.conn_;\n    this.secondaryConn_ = null;\n    this.isHealthy_ = false;\n\n    /*\n     * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\n     * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\n     * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\n     * still have the context of your originating frame.\n     */\n    setTimeout(() => {\n      // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\n      this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);\n    }, Math.floor(0));\n\n    const healthyTimeoutMS = conn['healthyTimeout'] || 0;\n    if (healthyTimeoutMS > 0) {\n      this.healthyTimeout_ = setTimeoutNonBlocking(() => {\n        this.healthyTimeout_ = null;\n        if (!this.isHealthy_) {\n          if (\n            this.conn_ &&\n            this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has received ' +\n                this.conn_.bytesReceived +\n                ' bytes.  Marking connection healthy.'\n            );\n            this.isHealthy_ = true;\n            this.conn_.markConnectionHealthy();\n          } else if (\n            this.conn_ &&\n            this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has sent ' +\n                this.conn_.bytesSent +\n                ' bytes.  Leaving connection alive.'\n            );\n            // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\n            // the server.\n          } else {\n            this.log_('Closing unhealthy connection after timeout.');\n            this.close();\n          }\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      }, Math.floor(healthyTimeoutMS)) as any;\n    }\n  }\n\n  private nextTransportId_(): string {\n    return 'c:' + this.id + ':' + this.connectionCount++;\n  }\n\n  private disconnReceiver_(conn) {\n    return everConnected => {\n      if (conn === this.conn_) {\n        this.onConnectionLost_(everConnected);\n      } else if (conn === this.secondaryConn_) {\n        this.log_('Secondary connection lost.');\n        this.onSecondaryConnectionLost_();\n      } else {\n        this.log_('closing an old connection');\n      }\n    };\n  }\n\n  private connReceiver_(conn: Transport) {\n    return (message: Indexable) => {\n      if (this.state_ !== RealtimeState.DISCONNECTED) {\n        if (conn === this.rx_) {\n          this.onPrimaryMessageReceived_(message);\n        } else if (conn === this.secondaryConn_) {\n          this.onSecondaryMessageReceived_(message);\n        } else {\n          this.log_('message on old connection');\n        }\n      }\n    };\n  }\n\n  /**\n   * @param dataMsg - An arbitrary data message to be sent to the server\n   */\n  sendRequest(dataMsg: object) {\n    // wrap in a data message envelope and send it on\n    const msg = { t: 'd', d: dataMsg };\n    this.sendData_(msg);\n  }\n\n  tryCleanupConnection() {\n    if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\n      this.log_(\n        'cleaning up and promoting a connection: ' + this.secondaryConn_.connId\n      );\n      this.conn_ = this.secondaryConn_;\n      this.secondaryConn_ = null;\n      // the server will shutdown the old connection\n    }\n  }\n\n  private onSecondaryControl_(controlData: { [k: string]: unknown }) {\n    if (MESSAGE_TYPE in controlData) {\n      const cmd = controlData[MESSAGE_TYPE] as string;\n      if (cmd === SWITCH_ACK) {\n        this.upgradeIfSecondaryHealthy_();\n      } else if (cmd === CONTROL_RESET) {\n        // Most likely the session wasn't valid. Abandon the switch attempt\n        this.log_('Got a reset on secondary, closing it');\n        this.secondaryConn_.close();\n        // If we were already using this connection for something, than we need to fully close\n        if (\n          this.tx_ === this.secondaryConn_ ||\n          this.rx_ === this.secondaryConn_\n        ) {\n          this.close();\n        }\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on secondary.');\n        this.secondaryResponsesRequired_--;\n        this.upgradeIfSecondaryHealthy_();\n      }\n    }\n  }\n\n  private onSecondaryMessageReceived_(parsedData: Indexable) {\n    const layer: string = requireKey('t', parsedData) as string;\n    const data: unknown = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onSecondaryControl_(data as Indexable);\n    } else if (layer === 'd') {\n      // got a data message, but we're still second connection. Need to buffer it up\n      this.pendingDataMessages.push(data);\n    } else {\n      throw new Error('Unknown protocol layer: ' + layer);\n    }\n  }\n\n  private upgradeIfSecondaryHealthy_() {\n    if (this.secondaryResponsesRequired_ <= 0) {\n      this.log_('Secondary connection is healthy.');\n      this.isHealthy_ = true;\n      this.secondaryConn_.markConnectionHealthy();\n      this.proceedWithUpgrade_();\n    } else {\n      // Send a ping to make sure the connection is healthy.\n      this.log_('sending ping on secondary.');\n      this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private proceedWithUpgrade_() {\n    // tell this connection to consider itself open\n    this.secondaryConn_.start();\n    // send ack\n    this.log_('sending client ack on secondary');\n    this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });\n\n    // send end packet on primary transport, switch to sending on this one\n    // can receive on this one, buffer responses until end received on primary transport\n    this.log_('Ending transmission on primary');\n    this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });\n    this.tx_ = this.secondaryConn_;\n\n    this.tryCleanupConnection();\n  }\n\n  private onPrimaryMessageReceived_(parsedData: { [k: string]: unknown }) {\n    // Must refer to parsedData properties in quotes, so closure doesn't touch them.\n    const layer: string = requireKey('t', parsedData) as string;\n    const data: unknown = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onControl_(data as { [k: string]: unknown });\n    } else if (layer === 'd') {\n      this.onDataMessage_(data);\n    }\n  }\n\n  private onDataMessage_(message: unknown) {\n    this.onPrimaryResponse_();\n\n    // We don't do anything with data messages, just kick them up a level\n    this.onMessage_(message);\n  }\n\n  private onPrimaryResponse_() {\n    if (!this.isHealthy_) {\n      this.primaryResponsesRequired_--;\n      if (this.primaryResponsesRequired_ <= 0) {\n        this.log_('Primary connection is healthy.');\n        this.isHealthy_ = true;\n        this.conn_.markConnectionHealthy();\n      }\n    }\n  }\n\n  private onControl_(controlData: { [k: string]: unknown }) {\n    const cmd: string = requireKey(MESSAGE_TYPE, controlData) as string;\n    if (MESSAGE_DATA in controlData) {\n      const payload = controlData[MESSAGE_DATA];\n      if (cmd === SERVER_HELLO) {\n        this.onHandshake_(\n          payload as {\n            ts: number;\n            v: string;\n            h: string;\n            s: string;\n          }\n        );\n      } else if (cmd === END_TRANSMISSION) {\n        this.log_('recvd end transmission on primary');\n        this.rx_ = this.secondaryConn_;\n        for (let i = 0; i < this.pendingDataMessages.length; ++i) {\n          this.onDataMessage_(this.pendingDataMessages[i]);\n        }\n        this.pendingDataMessages = [];\n        this.tryCleanupConnection();\n      } else if (cmd === CONTROL_SHUTDOWN) {\n        // This was previously the 'onKill' callback passed to the lower-level connection\n        // payload in this case is the reason for the shutdown. Generally a human-readable error\n        this.onConnectionShutdown_(payload as string);\n      } else if (cmd === CONTROL_RESET) {\n        // payload in this case is the host we should contact\n        this.onReset_(payload as string);\n      } else if (cmd === CONTROL_ERROR) {\n        error('Server Error: ' + payload);\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on primary.');\n        this.onPrimaryResponse_();\n        this.sendPingOnPrimaryIfNecessary_();\n      } else {\n        error('Unknown control packet command: ' + cmd);\n      }\n    }\n  }\n\n  /**\n   * @param handshake - The handshake data returned from the server\n   */\n  private onHandshake_(handshake: {\n    ts: number;\n    v: string;\n    h: string;\n    s: string;\n  }): void {\n    const timestamp = handshake.ts;\n    const version = handshake.v;\n    const host = handshake.h;\n    this.sessionId = handshake.s;\n    this.repoInfo_.host = host;\n    // if we've already closed the connection, then don't bother trying to progress further\n    if (this.state_ === RealtimeState.CONNECTING) {\n      this.conn_.start();\n      this.onConnectionEstablished_(this.conn_, timestamp);\n      if (PROTOCOL_VERSION !== version) {\n        warn('Protocol version mismatch detected');\n      }\n      // TODO: do we want to upgrade? when? maybe a delay?\n      this.tryStartUpgrade_();\n    }\n  }\n\n  private tryStartUpgrade_() {\n    const conn = this.transportManager_.upgradeTransport();\n    if (conn) {\n      this.startUpgrade_(conn);\n    }\n  }\n\n  private startUpgrade_(conn: TransportConstructor) {\n    this.secondaryConn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      this.applicationId_,\n      this.appCheckToken_,\n      this.authToken_,\n      this.sessionId\n    );\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.secondaryResponsesRequired_ =\n      conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessage = this.connReceiver_(this.secondaryConn_);\n    const onDisconnect = this.disconnReceiver_(this.secondaryConn_);\n    this.secondaryConn_.open(onMessage, onDisconnect);\n\n    // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\n    setTimeoutNonBlocking(() => {\n      if (this.secondaryConn_) {\n        this.log_('Timed out trying to upgrade.');\n        this.secondaryConn_.close();\n      }\n    }, Math.floor(UPGRADE_TIMEOUT));\n  }\n\n  private onReset_(host: string) {\n    this.log_('Reset packet received.  New host: ' + host);\n    this.repoInfo_.host = host;\n    // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\n    // We don't currently support resets after the connection has already been established\n    if (this.state_ === RealtimeState.CONNECTED) {\n      this.close();\n    } else {\n      // Close whatever connections we have open and start again.\n      this.closeConnections_();\n      this.start_();\n    }\n  }\n\n  private onConnectionEstablished_(conn: Transport, timestamp: number) {\n    this.log_('Realtime connection established.');\n    this.conn_ = conn;\n    this.state_ = RealtimeState.CONNECTED;\n\n    if (this.onReady_) {\n      this.onReady_(timestamp, this.sessionId);\n      this.onReady_ = null;\n    }\n\n    // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\n    // send some pings.\n    if (this.primaryResponsesRequired_ === 0) {\n      this.log_('Primary connection is healthy.');\n      this.isHealthy_ = true;\n    } else {\n      setTimeoutNonBlocking(() => {\n        this.sendPingOnPrimaryIfNecessary_();\n      }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\n    }\n  }\n\n  private sendPingOnPrimaryIfNecessary_() {\n    // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\n    if (!this.isHealthy_ && this.state_ === RealtimeState.CONNECTED) {\n      this.log_('sending ping on primary.');\n      this.sendData_({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private onSecondaryConnectionLost_() {\n    const conn = this.secondaryConn_;\n    this.secondaryConn_ = null;\n    if (this.tx_ === conn || this.rx_ === conn) {\n      // we are relying on this connection already in some capacity. Therefore, a failure is real\n      this.close();\n    }\n  }\n\n  /**\n   * @param everConnected - Whether or not the connection ever reached a server. Used to determine if\n   * we should flush the host cache\n   */\n  private onConnectionLost_(everConnected: boolean) {\n    this.conn_ = null;\n\n    // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\n    // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\n    if (!everConnected && this.state_ === RealtimeState.CONNECTING) {\n      this.log_('Realtime connection failed.');\n      // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\n      if (this.repoInfo_.isCacheableHost()) {\n        PersistentStorage.remove('host:' + this.repoInfo_.host);\n        // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\n        this.repoInfo_.internalHost = this.repoInfo_.host;\n      }\n    } else if (this.state_ === RealtimeState.CONNECTED) {\n      this.log_('Realtime connection lost.');\n    }\n\n    this.close();\n  }\n\n  private onConnectionShutdown_(reason: string) {\n    this.log_('Connection shutdown command received. Shutting down...');\n\n    if (this.onKill_) {\n      this.onKill_(reason);\n      this.onKill_ = null;\n    }\n\n    // We intentionally don't want to fire onDisconnect (kill is a different case),\n    // so clear the callback.\n    this.onDisconnect_ = null;\n\n    this.close();\n  }\n\n  private sendData_(data: object) {\n    if (this.state_ !== RealtimeState.CONNECTED) {\n      throw 'Connection is not connected';\n    } else {\n      this.tx_.send(data);\n    }\n  }\n\n  /**\n   * Cleans up this connection, calling the appropriate callbacks\n   */\n  close() {\n    if (this.state_ !== RealtimeState.DISCONNECTED) {\n      this.log_('Closing realtime connection.');\n      this.state_ = RealtimeState.DISCONNECTED;\n\n      this.closeConnections_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_();\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  private closeConnections_() {\n    this.log_('Shutting down all connections');\n    if (this.conn_) {\n      this.conn_.close();\n      this.conn_ = null;\n    }\n\n    if (this.secondaryConn_) {\n      this.secondaryConn_.close();\n      this.secondaryConn_ = null;\n    }\n\n    if (this.healthyTimeout_) {\n      clearTimeout(this.healthyTimeout_);\n      this.healthyTimeout_ = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { QueryContext } from './view/EventRegistration';\n\n/**\n * Interface defining the set of actions that can be performed against the Firebase server\n * (basically corresponds to our wire protocol).\n *\n * @interface\n */\nexport abstract class ServerActions {\n  abstract listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ): void;\n\n  /**\n   * Remove a listen.\n   */\n  abstract unlisten(query: QueryContext, tag: number | null): void;\n\n  /**\n   * Get the server value satisfying this query.\n   */\n  abstract get(query: QueryContext): Promise<string>;\n\n  put(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {}\n\n  merge(\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {}\n\n  /**\n   * Refreshes the auth token for the current connection.\n   * @param token - The authentication token\n   */\n  refreshAuthToken(token: string) {}\n\n  /**\n   * Refreshes the app check token for the current connection.\n   * @param token The app check token\n   */\n  refreshAppCheckToken(token: string) {}\n\n  onDisconnectPut(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  onDisconnectMerge(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  reportStats(stats: { [k: string]: unknown }) {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\n/**\n * Base class to be used if you want to emit events. Call the constructor with\n * the set of allowed event names.\n */\nexport abstract class EventEmitter {\n  private listeners_: {\n    [eventType: string]: Array<{\n      callback(...args: unknown[]): void;\n      context: unknown;\n    }>;\n  } = {};\n\n  constructor(private allowedEvents_: string[]) {\n    assert(\n      Array.isArray(allowedEvents_) && allowedEvents_.length > 0,\n      'Requires a non-empty array'\n    );\n  }\n\n  /**\n   * To be overridden by derived classes in order to fire an initial event when\n   * somebody subscribes for data.\n   *\n   * @returns {Array.<*>} Array of parameters to trigger initial event with.\n   */\n  abstract getInitialEvent(eventType: string): unknown[];\n\n  /**\n   * To be called by derived classes to trigger events.\n   */\n  protected trigger(eventType: string, ...varArgs: unknown[]) {\n    if (Array.isArray(this.listeners_[eventType])) {\n      // Clone the list, since callbacks could add/remove listeners.\n      const listeners = [...this.listeners_[eventType]];\n\n      for (let i = 0; i < listeners.length; i++) {\n        listeners[i].callback.apply(listeners[i].context, varArgs);\n      }\n    }\n  }\n\n  on(eventType: string, callback: (a: unknown) => void, context: unknown) {\n    this.validateEventType_(eventType);\n    this.listeners_[eventType] = this.listeners_[eventType] || [];\n    this.listeners_[eventType].push({ callback, context });\n\n    const eventData = this.getInitialEvent(eventType);\n    if (eventData) {\n      callback.apply(context, eventData);\n    }\n  }\n\n  off(eventType: string, callback: (a: unknown) => void, context: unknown) {\n    this.validateEventType_(eventType);\n    const listeners = this.listeners_[eventType] || [];\n    for (let i = 0; i < listeners.length; i++) {\n      if (\n        listeners[i].callback === callback &&\n        (!context || context === listeners[i].context)\n      ) {\n        listeners.splice(i, 1);\n        return;\n      }\n    }\n  }\n\n  private validateEventType_(eventType: string) {\n    assert(\n      this.allowedEvents_.find(et => {\n        return et === eventType;\n      }),\n      'Unknown event: ' + eventType\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, isMobileCordova } from '@firebase/util';\n\nimport { EventEmitter } from './EventEmitter';\n\n/**\n * Monitors online state (as reported by window.online/offline events).\n *\n * The expectation is that this could have many false positives (thinks we are online\n * when we're not), but no false negatives.  So we can safely use it to determine when\n * we definitely cannot reach the internet.\n */\nexport class OnlineMonitor extends EventEmitter {\n  private online_ = true;\n\n  static getInstance() {\n    return new OnlineMonitor();\n  }\n\n  constructor() {\n    super(['online']);\n\n    // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\n    // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\n    // It would seem that the 'online' event does not always fire consistently. So we disable it\n    // for Cordova.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window.addEventListener !== 'undefined' &&\n      !isMobileCordova()\n    ) {\n      window.addEventListener(\n        'online',\n        () => {\n          if (!this.online_) {\n            this.online_ = true;\n            this.trigger('online', true);\n          }\n        },\n        false\n      );\n\n      window.addEventListener(\n        'offline',\n        () => {\n          if (this.online_) {\n            this.online_ = false;\n            this.trigger('online', false);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'online', 'Unknown event type: ' + eventType);\n    return [this.online_];\n  }\n\n  currentlyOnline(): boolean {\n    return this.online_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringLength } from '@firebase/util';\n\nimport { nameCompare } from './util';\n\n/** Maximum key depth. */\nconst MAX_PATH_DEPTH = 32;\n\n/** Maximum number of (UTF8) bytes in a Firebase path. */\nconst MAX_PATH_LENGTH_BYTES = 768;\n\n/**\n * An immutable object representing a parsed path.  It's immutable so that you\n * can pass them around to other functions without worrying about them changing\n * it.\n */\n\nexport class Path {\n  pieces_: string[];\n  pieceNum_: number;\n\n  /**\n   * @param pathOrString - Path string to parse, or another path, or the raw\n   * tokens array\n   */\n  constructor(pathOrString: string | string[], pieceNum?: number) {\n    if (pieceNum === void 0) {\n      this.pieces_ = (pathOrString as string).split('/');\n\n      // Remove empty pieces.\n      let copyTo = 0;\n      for (let i = 0; i < this.pieces_.length; i++) {\n        if (this.pieces_[i].length > 0) {\n          this.pieces_[copyTo] = this.pieces_[i];\n          copyTo++;\n        }\n      }\n      this.pieces_.length = copyTo;\n\n      this.pieceNum_ = 0;\n    } else {\n      this.pieces_ = pathOrString as string[];\n      this.pieceNum_ = pieceNum;\n    }\n  }\n\n  toString(): string {\n    let pathString = '';\n    for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\n      if (this.pieces_[i] !== '') {\n        pathString += '/' + this.pieces_[i];\n      }\n    }\n\n    return pathString || '/';\n  }\n}\n\nexport function newEmptyPath(): Path {\n  return new Path('');\n}\n\nexport function pathGetFront(path: Path): string | null {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n\n  return path.pieces_[path.pieceNum_];\n}\n\n/**\n * @returns The number of segments in this path\n */\nexport function pathGetLength(path: Path): number {\n  return path.pieces_.length - path.pieceNum_;\n}\n\nexport function pathPopFront(path: Path): Path {\n  let pieceNum = path.pieceNum_;\n  if (pieceNum < path.pieces_.length) {\n    pieceNum++;\n  }\n  return new Path(path.pieces_, pieceNum);\n}\n\nexport function pathGetBack(path: Path): string | null {\n  if (path.pieceNum_ < path.pieces_.length) {\n    return path.pieces_[path.pieces_.length - 1];\n  }\n\n  return null;\n}\n\nexport function pathToUrlEncodedString(path: Path): string {\n  let pathString = '';\n  for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n    if (path.pieces_[i] !== '') {\n      pathString += '/' + encodeURIComponent(String(path.pieces_[i]));\n    }\n  }\n\n  return pathString || '/';\n}\n\n/**\n * Shallow copy of the parts of the path.\n *\n */\nexport function pathSlice(path: Path, begin: number = 0): string[] {\n  return path.pieces_.slice(path.pieceNum_ + begin);\n}\n\nexport function pathParent(path: Path): Path | null {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n\n  const pieces = [];\n  for (let i = path.pieceNum_; i < path.pieces_.length - 1; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n\n  return new Path(pieces, 0);\n}\n\nexport function pathChild(path: Path, childPathObj: string | Path): Path {\n  const pieces = [];\n  for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n\n  if (childPathObj instanceof Path) {\n    for (let i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\n      pieces.push(childPathObj.pieces_[i]);\n    }\n  } else {\n    const childPieces = childPathObj.split('/');\n    for (let i = 0; i < childPieces.length; i++) {\n      if (childPieces[i].length > 0) {\n        pieces.push(childPieces[i]);\n      }\n    }\n  }\n\n  return new Path(pieces, 0);\n}\n\n/**\n * @returns True if there are no segments in this path\n */\nexport function pathIsEmpty(path: Path): boolean {\n  return path.pieceNum_ >= path.pieces_.length;\n}\n\n/**\n * @returns The path from outerPath to innerPath\n */\nexport function newRelativePath(outerPath: Path, innerPath: Path): Path {\n  const outer = pathGetFront(outerPath),\n    inner = pathGetFront(innerPath);\n  if (outer === null) {\n    return innerPath;\n  } else if (outer === inner) {\n    return newRelativePath(pathPopFront(outerPath), pathPopFront(innerPath));\n  } else {\n    throw new Error(\n      'INTERNAL ERROR: innerPath (' +\n        innerPath +\n        ') is not within ' +\n        'outerPath (' +\n        outerPath +\n        ')'\n    );\n  }\n}\n\n/**\n * @returns -1, 0, 1 if left is less, equal, or greater than the right.\n */\nexport function pathCompare(left: Path, right: Path): number {\n  const leftKeys = pathSlice(left, 0);\n  const rightKeys = pathSlice(right, 0);\n  for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\n    const cmp = nameCompare(leftKeys[i], rightKeys[i]);\n    if (cmp !== 0) {\n      return cmp;\n    }\n  }\n  if (leftKeys.length === rightKeys.length) {\n    return 0;\n  }\n  return leftKeys.length < rightKeys.length ? -1 : 1;\n}\n\n/**\n * @returns true if paths are the same.\n */\nexport function pathEquals(path: Path, other: Path): boolean {\n  if (pathGetLength(path) !== pathGetLength(other)) {\n    return false;\n  }\n\n  for (\n    let i = path.pieceNum_, j = other.pieceNum_;\n    i <= path.pieces_.length;\n    i++, j++\n  ) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * @returns True if this path is a parent of (or the same as) other\n */\nexport function pathContains(path: Path, other: Path): boolean {\n  let i = path.pieceNum_;\n  let j = other.pieceNum_;\n  if (pathGetLength(path) > pathGetLength(other)) {\n    return false;\n  }\n  while (i < path.pieces_.length) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n    ++i;\n    ++j;\n  }\n  return true;\n}\n\n/**\n * Dynamic (mutable) path used to count path lengths.\n *\n * This class is used to efficiently check paths for valid\n * length (in UTF8 bytes) and depth (used in path validation).\n *\n * Throws Error exception if path is ever invalid.\n *\n * The definition of a path always begins with '/'.\n */\nexport class ValidationPath {\n  parts_: string[];\n  /** Initialize to number of '/' chars needed in path. */\n  byteLength_: number;\n\n  /**\n   * @param path - Initial Path.\n   * @param errorPrefix_ - Prefix for any error messages.\n   */\n  constructor(path: Path, public errorPrefix_: string) {\n    this.parts_ = pathSlice(path, 0);\n    /** Initialize to number of '/' chars needed in path. */\n    this.byteLength_ = Math.max(1, this.parts_.length);\n\n    for (let i = 0; i < this.parts_.length; i++) {\n      this.byteLength_ += stringLength(this.parts_[i]);\n    }\n    validationPathCheckValid(this);\n  }\n}\n\nexport function validationPathPush(\n  validationPath: ValidationPath,\n  child: string\n): void {\n  // Count the needed '/'\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ += 1;\n  }\n  validationPath.parts_.push(child);\n  validationPath.byteLength_ += stringLength(child);\n  validationPathCheckValid(validationPath);\n}\n\nexport function validationPathPop(validationPath: ValidationPath): void {\n  const last = validationPath.parts_.pop();\n  validationPath.byteLength_ -= stringLength(last);\n  // Un-count the previous '/'\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ -= 1;\n  }\n}\n\nfunction validationPathCheckValid(validationPath: ValidationPath): void {\n  if (validationPath.byteLength_ > MAX_PATH_LENGTH_BYTES) {\n    throw new Error(\n      validationPath.errorPrefix_ +\n        'has a key path longer than ' +\n        MAX_PATH_LENGTH_BYTES +\n        ' bytes (' +\n        validationPath.byteLength_ +\n        ').'\n    );\n  }\n  if (validationPath.parts_.length > MAX_PATH_DEPTH) {\n    throw new Error(\n      validationPath.errorPrefix_ +\n        'path specified exceeds the maximum depth that can be written (' +\n        MAX_PATH_DEPTH +\n        ') or object contains a cycle ' +\n        validationPathToErrorString(validationPath)\n    );\n  }\n}\n\n/**\n * String for use in error messages - uses '.' notation for path.\n */\nexport function validationPathToErrorString(\n  validationPath: ValidationPath\n): string {\n  if (validationPath.parts_.length === 0) {\n    return '';\n  }\n  return \"in property '\" + validationPath.parts_.join('.') + \"'\";\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { EventEmitter } from './EventEmitter';\n\ndeclare const document: Document;\n\nexport class VisibilityMonitor extends EventEmitter {\n  private visible_: boolean;\n\n  static getInstance() {\n    return new VisibilityMonitor();\n  }\n\n  constructor() {\n    super(['visible']);\n    let hidden: string;\n    let visibilityChange: string;\n    if (\n      typeof document !== 'undefined' &&\n      typeof document.addEventListener !== 'undefined'\n    ) {\n      if (typeof document['hidden'] !== 'undefined') {\n        // Opera 12.10 and Firefox 18 and later support\n        visibilityChange = 'visibilitychange';\n        hidden = 'hidden';\n      } else if (typeof document['mozHidden'] !== 'undefined') {\n        visibilityChange = 'mozvisibilitychange';\n        hidden = 'mozHidden';\n      } else if (typeof document['msHidden'] !== 'undefined') {\n        visibilityChange = 'msvisibilitychange';\n        hidden = 'msHidden';\n      } else if (typeof document['webkitHidden'] !== 'undefined') {\n        visibilityChange = 'webkitvisibilitychange';\n        hidden = 'webkitHidden';\n      }\n    }\n\n    // Initially, we always assume we are visible. This ensures that in browsers\n    // without page visibility support or in cases where we are never visible\n    // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\n    // reconnects\n    this.visible_ = true;\n\n    if (visibilityChange) {\n      document.addEventListener(\n        visibilityChange,\n        () => {\n          const visible = !document[hidden];\n          if (visible !== this.visible_) {\n            this.visible_ = visible;\n            this.trigger('visible', visible);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'visible', 'Unknown event type: ' + eventType);\n    return [this.visible_];\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  contains,\n  Deferred,\n  isEmpty,\n  isMobileCordova,\n  isNodeSdk,\n  isReactNative,\n  isValidFormat,\n  safeGet,\n  stringify,\n  isAdmin\n} from '@firebase/util';\n\nimport { Connection } from '../realtime/Connection';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { OnlineMonitor } from './util/OnlineMonitor';\nimport { Path } from './util/Path';\nimport { error, log, logWrapper, warn, ObjectToUniqueKey } from './util/util';\nimport { VisibilityMonitor } from './util/VisibilityMonitor';\nimport { SDK_VERSION } from './version';\nimport { QueryContext } from './view/EventRegistration';\n\nconst RECONNECT_MIN_DELAY = 1000;\nconst RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\nconst RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\nconst RECONNECT_DELAY_MULTIPLIER = 1.3;\nconst RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\nconst SERVER_KILL_INTERRUPT_REASON = 'server_kill';\n\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\nconst INVALID_TOKEN_THRESHOLD = 3;\n\ninterface ListenSpec {\n  onComplete(s: string, p?: unknown): void;\n\n  hashFn(): string;\n\n  query: QueryContext;\n  tag: number | null;\n}\n\ninterface OnDisconnectRequest {\n  pathString: string;\n  action: string;\n  data: unknown;\n  onComplete?: (a: string, b: string) => void;\n}\n\ninterface OutstandingPut {\n  action: string;\n  request: object;\n  queued?: boolean;\n  onComplete: (a: string, b?: string) => void;\n}\n\ninterface OutstandingGet {\n  request: object;\n  onComplete: (response: { [k: string]: unknown }) => void;\n}\n\n/**\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\n *\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\n * in quotes to make sure the closure compiler does not minify them.\n */\nexport class PersistentConnection extends ServerActions {\n  // Used for diagnostic logging.\n  id = PersistentConnection.nextPersistentConnectionId_++;\n  private log_ = logWrapper('p:' + this.id + ':');\n\n  private interruptReasons_: { [reason: string]: boolean } = {};\n  private readonly listens: Map<\n    /* path */ string,\n    Map</* queryId */ string, ListenSpec>\n  > = new Map();\n  private outstandingPuts_: OutstandingPut[] = [];\n  private outstandingGets_: OutstandingGet[] = [];\n  private outstandingPutCount_ = 0;\n  private outstandingGetCount_ = 0;\n  private onDisconnectRequestQueue_: OnDisconnectRequest[] = [];\n  private connected_ = false;\n  private reconnectDelay_ = RECONNECT_MIN_DELAY;\n  private maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\n  private securityDebugCallback_: ((a: object) => void) | null = null;\n  lastSessionId: string | null = null;\n\n  private establishConnectionTimer_: number | null = null;\n\n  private visible_: boolean = false;\n\n  // Before we get connected, we keep a queue of pending messages to send.\n  private requestCBHash_: { [k: number]: (a: unknown) => void } = {};\n  private requestNumber_ = 0;\n\n  private realtime_: {\n    sendRequest(a: object): void;\n    close(): void;\n  } | null = null;\n\n  private authToken_: string | null = null;\n  private appCheckToken_: string | null = null;\n  private forceTokenRefresh_ = false;\n  private invalidAuthTokenCount_ = 0;\n  private invalidAppCheckTokenCount_ = 0;\n\n  private firstConnection_ = true;\n  private lastConnectionAttemptTime_: number | null = null;\n  private lastConnectionEstablishedTime_: number | null = null;\n\n  private static nextPersistentConnectionId_ = 0;\n\n  /**\n   * Counter for number of connections created. Mainly used for tagging in the logs\n   */\n  private static nextConnectionId_ = 0;\n\n  /**\n   * @param repoInfo_ - Data about the namespace we are connecting to\n   * @param applicationId_ - The Firebase App ID for this project\n   * @param onDataUpdate_ - A callback for new data from the server\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private applicationId_: string,\n    private onDataUpdate_: (\n      a: string,\n      b: unknown,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private onConnectStatus_: (a: boolean) => void,\n    private onServerInfoUpdate_: (a: unknown) => void,\n    private authTokenProvider_: AuthTokenProvider,\n    private appCheckTokenProvider_: AppCheckTokenProvider,\n    private authOverride_?: object | null\n  ) {\n    super();\n\n    if (authOverride_ && !isNodeSdk()) {\n      throw new Error(\n        'Auth override specified in options, but not supported on non Node.js platforms'\n      );\n    }\n\n    VisibilityMonitor.getInstance().on('visible', this.onVisible_, this);\n\n    if (repoInfo_.host.indexOf('fblocal') === -1) {\n      OnlineMonitor.getInstance().on('online', this.onOnline_, this);\n    }\n  }\n\n  protected sendRequest(\n    action: string,\n    body: unknown,\n    onResponse?: (a: unknown) => void\n  ) {\n    const curReqNum = ++this.requestNumber_;\n\n    const msg = { r: curReqNum, a: action, b: body };\n    this.log_(stringify(msg));\n    assert(\n      this.connected_,\n      \"sendRequest call when we're not connected not allowed.\"\n    );\n    this.realtime_.sendRequest(msg);\n    if (onResponse) {\n      this.requestCBHash_[curReqNum] = onResponse;\n    }\n  }\n\n  get(query: QueryContext): Promise<string> {\n    this.initConnection_();\n\n    const deferred = new Deferred<string>();\n    const request = {\n      p: query._path.toString(),\n      q: query._queryObject\n    };\n    const outstandingGet = {\n      action: 'g',\n      request,\n      onComplete: (message: { [k: string]: unknown }) => {\n        const payload = message['d'] as string;\n        if (message['s'] === 'ok') {\n          deferred.resolve(payload);\n        } else {\n          deferred.reject(payload);\n        }\n      }\n    };\n    this.outstandingGets_.push(outstandingGet);\n    this.outstandingGetCount_++;\n    const index = this.outstandingGets_.length - 1;\n\n    if (this.connected_) {\n      this.sendGet_(index);\n    }\n\n    return deferred.promise;\n  }\n\n  listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ) {\n    this.initConnection_();\n\n    const queryId = query._queryIdentifier;\n    const pathString = query._path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + queryId);\n    if (!this.listens.has(pathString)) {\n      this.listens.set(pathString, new Map());\n    }\n    assert(\n      query._queryParams.isDefault() || !query._queryParams.loadsAllData(),\n      'listen() called for non-default but complete query'\n    );\n    assert(\n      !this.listens.get(pathString)!.has(queryId),\n      `listen() called twice for same path/queryId.`\n    );\n    const listenSpec: ListenSpec = {\n      onComplete,\n      hashFn: currentHashFn,\n      query,\n      tag\n    };\n    this.listens.get(pathString)!.set(queryId, listenSpec);\n\n    if (this.connected_) {\n      this.sendListen_(listenSpec);\n    }\n  }\n\n  private sendGet_(index: number) {\n    const get = this.outstandingGets_[index];\n    this.sendRequest('g', get.request, (message: { [k: string]: unknown }) => {\n      delete this.outstandingGets_[index];\n      this.outstandingGetCount_--;\n      if (this.outstandingGetCount_ === 0) {\n        this.outstandingGets_ = [];\n      }\n      if (get.onComplete) {\n        get.onComplete(message);\n      }\n    });\n  }\n\n  private sendListen_(listenSpec: ListenSpec) {\n    const query = listenSpec.query;\n    const pathString = query._path.toString();\n    const queryId = query._queryIdentifier;\n    this.log_('Listen on ' + pathString + ' for ' + queryId);\n    const req: { [k: string]: unknown } = { /*path*/ p: pathString };\n\n    const action = 'q';\n\n    // Only bother to send query if it's non-default.\n    if (listenSpec.tag) {\n      req['q'] = query._queryObject;\n      req['t'] = listenSpec.tag;\n    }\n\n    req[/*hash*/ 'h'] = listenSpec.hashFn();\n\n    this.sendRequest(action, req, (message: { [k: string]: unknown }) => {\n      const payload: unknown = message[/*data*/ 'd'];\n      const status = message[/*status*/ 's'] as string;\n\n      // print warnings in any case...\n      PersistentConnection.warnOnListenWarnings_(payload, query);\n\n      const currentListenSpec =\n        this.listens.get(pathString) &&\n        this.listens.get(pathString)!.get(queryId);\n      // only trigger actions if the listen hasn't been removed and readded\n      if (currentListenSpec === listenSpec) {\n        this.log_('listen response', message);\n\n        if (status !== 'ok') {\n          this.removeListen_(pathString, queryId);\n        }\n\n        if (listenSpec.onComplete) {\n          listenSpec.onComplete(status, payload);\n        }\n      }\n    });\n  }\n\n  private static warnOnListenWarnings_(payload: unknown, query: QueryContext) {\n    if (payload && typeof payload === 'object' && contains(payload, 'w')) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const warnings = safeGet(payload as any, 'w');\n      if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\n        const indexSpec =\n          '\".indexOn\": \"' + query._queryParams.getIndex().toString() + '\"';\n        const indexPath = query._path.toString();\n        warn(\n          `Using an unspecified index. Your data will be downloaded and ` +\n            `filtered on the client. Consider adding ${indexSpec} at ` +\n            `${indexPath} to your security rules for better performance.`\n        );\n      }\n    }\n  }\n\n  refreshAuthToken(token: string) {\n    this.authToken_ = token;\n    this.log_('Auth token refreshed');\n    if (this.authToken_) {\n      this.tryAuth();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\n      //the credential so we dont become authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unauth', {}, () => {});\n      }\n    }\n\n    this.reduceReconnectDelayIfAdminCredential_(token);\n  }\n\n  private reduceReconnectDelayIfAdminCredential_(credential: string) {\n    // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\n    // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\n    const isFirebaseSecret = credential && credential.length === 40;\n    if (isFirebaseSecret || isAdmin(credential)) {\n      this.log_(\n        'Admin auth credential detected.  Reducing max reconnect time.'\n      );\n      this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n    }\n  }\n\n  refreshAppCheckToken(token: string | null) {\n    this.appCheckToken_ = token;\n    this.log_('App check token refreshed');\n    if (this.appCheckToken_) {\n      this.tryAppCheck();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us.\n      //If we're not connected, simply delete the credential so we dont become\n      // authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unappeck', {}, () => {});\n      }\n    }\n  }\n\n  /**\n   * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\n   * a auth revoked (the connection is closed).\n   */\n  tryAuth() {\n    if (this.connected_ && this.authToken_) {\n      const token = this.authToken_;\n      const authMethod = isValidFormat(token) ? 'auth' : 'gauth';\n      const requestData: { [k: string]: unknown } = { cred: token };\n      if (this.authOverride_ === null) {\n        requestData['noauth'] = true;\n      } else if (typeof this.authOverride_ === 'object') {\n        requestData['authvar'] = this.authOverride_;\n      }\n      this.sendRequest(\n        authMethod,\n        requestData,\n        (res: { [k: string]: unknown }) => {\n          const status = res[/*status*/ 's'] as string;\n          const data = (res[/*data*/ 'd'] as string) || 'error';\n\n          if (this.authToken_ === token) {\n            if (status === 'ok') {\n              this.invalidAuthTokenCount_ = 0;\n            } else {\n              // Triggers reconnect and force refresh for auth token\n              this.onAuthRevoked_(status, data);\n            }\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * Attempts to authenticate with the given token. If the authentication\n   * attempt fails, it's triggered like the token was revoked (the connection is\n   * closed).\n   */\n  tryAppCheck() {\n    if (this.connected_ && this.appCheckToken_) {\n      this.sendRequest(\n        'appcheck',\n        { 'token': this.appCheckToken_ },\n        (res: { [k: string]: unknown }) => {\n          const status = res[/*status*/ 's'] as string;\n          const data = (res[/*data*/ 'd'] as string) || 'error';\n          if (status === 'ok') {\n            this.invalidAppCheckTokenCount_ = 0;\n          } else {\n            this.onAppCheckRevoked_(status, data);\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  unlisten(query: QueryContext, tag: number | null) {\n    const pathString = query._path.toString();\n    const queryId = query._queryIdentifier;\n\n    this.log_('Unlisten called for ' + pathString + ' ' + queryId);\n\n    assert(\n      query._queryParams.isDefault() || !query._queryParams.loadsAllData(),\n      'unlisten() called for non-default but complete query'\n    );\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && this.connected_) {\n      this.sendUnlisten_(pathString, queryId, query._queryObject, tag);\n    }\n  }\n\n  private sendUnlisten_(\n    pathString: string,\n    queryId: string,\n    queryObj: object,\n    tag: number | null\n  ) {\n    this.log_('Unlisten on ' + pathString + ' for ' + queryId);\n\n    const req: { [k: string]: unknown } = { /*path*/ p: pathString };\n    const action = 'n';\n    // Only bother sending queryId if it's non-default.\n    if (tag) {\n      req['q'] = queryObj;\n      req['t'] = tag;\n    }\n\n    this.sendRequest(action, req);\n  }\n\n  onDisconnectPut(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('o', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'o',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  onDisconnectMerge(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('om', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'om',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('oc', pathString, null, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'oc',\n        data: null,\n        onComplete\n      });\n    }\n  }\n\n  private sendOnDisconnect_(\n    action: string,\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string) => void\n  ) {\n    const request = { /*path*/ p: pathString, /*data*/ d: data };\n    this.log_('onDisconnect ' + action, request);\n    this.sendRequest(action, request, (response: { [k: string]: unknown }) => {\n      if (onComplete) {\n        setTimeout(() => {\n          onComplete(\n            response[/*status*/ 's'] as string,\n            response[/* data */ 'd'] as string\n          );\n        }, Math.floor(0));\n      }\n    });\n  }\n\n  put(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {\n    this.putInternal('p', pathString, data, onComplete, hash);\n  }\n\n  merge(\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    this.putInternal('m', pathString, data, onComplete, hash);\n  }\n\n  putInternal(\n    action: string,\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    this.initConnection_();\n\n    const request: { [k: string]: unknown } = {\n      /*path*/ p: pathString,\n      /*data*/ d: data\n    };\n\n    if (hash !== undefined) {\n      request[/*hash*/ 'h'] = hash;\n    }\n\n    // TODO: Only keep track of the most recent put for a given path?\n    this.outstandingPuts_.push({\n      action,\n      request,\n      onComplete\n    });\n\n    this.outstandingPutCount_++;\n    const index = this.outstandingPuts_.length - 1;\n\n    if (this.connected_) {\n      this.sendPut_(index);\n    } else {\n      this.log_('Buffering put: ' + pathString);\n    }\n  }\n\n  private sendPut_(index: number) {\n    const action = this.outstandingPuts_[index].action;\n    const request = this.outstandingPuts_[index].request;\n    const onComplete = this.outstandingPuts_[index].onComplete;\n    this.outstandingPuts_[index].queued = this.connected_;\n\n    this.sendRequest(action, request, (message: { [k: string]: unknown }) => {\n      this.log_(action + ' response', message);\n\n      delete this.outstandingPuts_[index];\n      this.outstandingPutCount_--;\n\n      // Clean up array occasionally.\n      if (this.outstandingPutCount_ === 0) {\n        this.outstandingPuts_ = [];\n      }\n\n      if (onComplete) {\n        onComplete(\n          message[/*status*/ 's'] as string,\n          message[/* data */ 'd'] as string\n        );\n      }\n    });\n  }\n\n  reportStats(stats: { [k: string]: unknown }) {\n    // If we're not connected, we just drop the stats.\n    if (this.connected_) {\n      const request = { /*counters*/ c: stats };\n      this.log_('reportStats', request);\n\n      this.sendRequest(/*stats*/ 's', request, result => {\n        const status = result[/*status*/ 's'];\n        if (status !== 'ok') {\n          const errorReason = result[/* data */ 'd'];\n          this.log_('reportStats', 'Error sending stats: ' + errorReason);\n        }\n      });\n    }\n  }\n\n  private onDataMessage_(message: { [k: string]: unknown }) {\n    if ('r' in message) {\n      // this is a response\n      this.log_('from server: ' + stringify(message));\n      const reqNum = message['r'] as string;\n      const onResponse = this.requestCBHash_[reqNum];\n      if (onResponse) {\n        delete this.requestCBHash_[reqNum];\n        onResponse(message[/*body*/ 'b']);\n      }\n    } else if ('error' in message) {\n      throw 'A server-side error has occurred: ' + message['error'];\n    } else if ('a' in message) {\n      // a and b are action and body, respectively\n      this.onDataPush_(message['a'] as string, message['b'] as {});\n    }\n  }\n\n  private onDataPush_(action: string, body: { [k: string]: unknown }) {\n    this.log_('handleServerMessage', action, body);\n    if (action === 'd') {\n      this.onDataUpdate_(\n        body[/*path*/ 'p'] as string,\n        body[/*data*/ 'd'],\n        /*isMerge*/ false,\n        body['t'] as number\n      );\n    } else if (action === 'm') {\n      this.onDataUpdate_(\n        body[/*path*/ 'p'] as string,\n        body[/*data*/ 'd'],\n        /*isMerge=*/ true,\n        body['t'] as number\n      );\n    } else if (action === 'c') {\n      this.onListenRevoked_(\n        body[/*path*/ 'p'] as string,\n        body[/*query*/ 'q'] as unknown[]\n      );\n    } else if (action === 'ac') {\n      this.onAuthRevoked_(\n        body[/*status code*/ 's'] as string,\n        body[/* explanation */ 'd'] as string\n      );\n    } else if (action === 'apc') {\n      this.onAppCheckRevoked_(\n        body[/*status code*/ 's'] as string,\n        body[/* explanation */ 'd'] as string\n      );\n    } else if (action === 'sd') {\n      this.onSecurityDebugPacket_(body);\n    } else {\n      error(\n        'Unrecognized action received from server: ' +\n          stringify(action) +\n          '\\nAre you using the latest client?'\n      );\n    }\n  }\n\n  private onReady_(timestamp: number, sessionId: string) {\n    this.log_('connection ready');\n    this.connected_ = true;\n    this.lastConnectionEstablishedTime_ = new Date().getTime();\n    this.handleTimestamp_(timestamp);\n    this.lastSessionId = sessionId;\n    if (this.firstConnection_) {\n      this.sendConnectStats_();\n    }\n    this.restoreState_();\n    this.firstConnection_ = false;\n    this.onConnectStatus_(true);\n  }\n\n  private scheduleConnect_(timeout: number) {\n    assert(\n      !this.realtime_,\n      \"Scheduling a connect when we're already connected/ing?\"\n    );\n\n    if (this.establishConnectionTimer_) {\n      clearTimeout(this.establishConnectionTimer_);\n    }\n\n    // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\n    // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\n\n    this.establishConnectionTimer_ = setTimeout(() => {\n      this.establishConnectionTimer_ = null;\n      this.establishConnection_();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(timeout)) as any;\n  }\n\n  private initConnection_() {\n    if (!this.realtime_ && this.firstConnection_) {\n      this.scheduleConnect_(0);\n    }\n  }\n\n  private onVisible_(visible: boolean) {\n    // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\n    if (\n      visible &&\n      !this.visible_ &&\n      this.reconnectDelay_ === this.maxReconnectDelay_\n    ) {\n      this.log_('Window became visible.  Reducing delay.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n    this.visible_ = visible;\n  }\n\n  private onOnline_(online: boolean) {\n    if (online) {\n      this.log_('Browser went online.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    } else {\n      this.log_('Browser went offline.  Killing connection.');\n      if (this.realtime_) {\n        this.realtime_.close();\n      }\n    }\n  }\n\n  private onRealtimeDisconnect_() {\n    this.log_('data client disconnected');\n    this.connected_ = false;\n    this.realtime_ = null;\n\n    // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\n    this.cancelSentTransactions_();\n\n    // Clear out the pending requests.\n    this.requestCBHash_ = {};\n\n    if (this.shouldReconnect_()) {\n      if (!this.visible_) {\n        this.log_(\"Window isn't visible.  Delaying reconnect.\");\n        this.reconnectDelay_ = this.maxReconnectDelay_;\n        this.lastConnectionAttemptTime_ = new Date().getTime();\n      } else if (this.lastConnectionEstablishedTime_) {\n        // If we've been connected long enough, reset reconnect delay to minimum.\n        const timeSinceLastConnectSucceeded =\n          new Date().getTime() - this.lastConnectionEstablishedTime_;\n        if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {\n          this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n        }\n        this.lastConnectionEstablishedTime_ = null;\n      }\n\n      const timeSinceLastConnectAttempt =\n        new Date().getTime() - this.lastConnectionAttemptTime_;\n      let reconnectDelay = Math.max(\n        0,\n        this.reconnectDelay_ - timeSinceLastConnectAttempt\n      );\n      reconnectDelay = Math.random() * reconnectDelay;\n\n      this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\n      this.scheduleConnect_(reconnectDelay);\n\n      // Adjust reconnect delay for next time.\n      this.reconnectDelay_ = Math.min(\n        this.maxReconnectDelay_,\n        this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER\n      );\n    }\n    this.onConnectStatus_(false);\n  }\n\n  private async establishConnection_() {\n    if (this.shouldReconnect_()) {\n      this.log_('Making a connection attempt');\n      this.lastConnectionAttemptTime_ = new Date().getTime();\n      this.lastConnectionEstablishedTime_ = null;\n      const onDataMessage = this.onDataMessage_.bind(this);\n      const onReady = this.onReady_.bind(this);\n      const onDisconnect = this.onRealtimeDisconnect_.bind(this);\n      const connId = this.id + ':' + PersistentConnection.nextConnectionId_++;\n      const lastSessionId = this.lastSessionId;\n      let canceled = false;\n      let connection: Connection | null = null;\n      const closeFn = function () {\n        if (connection) {\n          connection.close();\n        } else {\n          canceled = true;\n          onDisconnect();\n        }\n      };\n      const sendRequestFn = function (msg: object) {\n        assert(\n          connection,\n          \"sendRequest call when we're not connected not allowed.\"\n        );\n        connection.sendRequest(msg);\n      };\n\n      this.realtime_ = {\n        close: closeFn,\n        sendRequest: sendRequestFn\n      };\n\n      const forceRefresh = this.forceTokenRefresh_;\n      this.forceTokenRefresh_ = false;\n\n      try {\n        // First fetch auth and app check token, and establish connection after\n        // fetching the token was successful\n        const [authToken, appCheckToken] = await Promise.all([\n          this.authTokenProvider_.getToken(forceRefresh),\n          this.appCheckTokenProvider_.getToken(forceRefresh)\n        ]);\n\n        if (!canceled) {\n          log('getToken() completed. Creating connection.');\n          this.authToken_ = authToken && authToken.accessToken;\n          this.appCheckToken_ = appCheckToken && appCheckToken.token;\n          connection = new Connection(\n            connId,\n            this.repoInfo_,\n            this.applicationId_,\n            this.appCheckToken_,\n            this.authToken_,\n            onDataMessage,\n            onReady,\n            onDisconnect,\n            /* onKill= */ reason => {\n              warn(reason + ' (' + this.repoInfo_.toString() + ')');\n              this.interrupt(SERVER_KILL_INTERRUPT_REASON);\n            },\n            lastSessionId\n          );\n        } else {\n          log('getToken() completed but was canceled');\n        }\n      } catch (error) {\n        this.log_('Failed to get token: ' + error);\n        if (!canceled) {\n          if (this.repoInfo_.nodeAdmin) {\n            // This may be a critical error for the Admin Node.js SDK, so log a warning.\n            // But getToken() may also just have temporarily failed, so we still want to\n            // continue retrying.\n            warn(error);\n          }\n          closeFn();\n        }\n      }\n    }\n  }\n\n  interrupt(reason: string) {\n    log('Interrupting connection for reason: ' + reason);\n    this.interruptReasons_[reason] = true;\n    if (this.realtime_) {\n      this.realtime_.close();\n    } else {\n      if (this.establishConnectionTimer_) {\n        clearTimeout(this.establishConnectionTimer_);\n        this.establishConnectionTimer_ = null;\n      }\n      if (this.connected_) {\n        this.onRealtimeDisconnect_();\n      }\n    }\n  }\n\n  resume(reason: string) {\n    log('Resuming connection for reason: ' + reason);\n    delete this.interruptReasons_[reason];\n    if (isEmpty(this.interruptReasons_)) {\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n  }\n\n  private handleTimestamp_(timestamp: number) {\n    const delta = timestamp - new Date().getTime();\n    this.onServerInfoUpdate_({ serverTimeOffset: delta });\n  }\n\n  private cancelSentTransactions_() {\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      const put = this.outstandingPuts_[i];\n      if (put && /*hash*/ 'h' in put.request && put.queued) {\n        if (put.onComplete) {\n          put.onComplete('disconnect');\n        }\n\n        delete this.outstandingPuts_[i];\n        this.outstandingPutCount_--;\n      }\n    }\n\n    // Clean up array occasionally.\n    if (this.outstandingPutCount_ === 0) {\n      this.outstandingPuts_ = [];\n    }\n  }\n\n  private onListenRevoked_(pathString: string, query?: unknown[]) {\n    // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\n    let queryId;\n    if (!query) {\n      queryId = 'default';\n    } else {\n      queryId = query.map(q => ObjectToUniqueKey(q)).join('$');\n    }\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && listen.onComplete) {\n      listen.onComplete('permission_denied');\n    }\n  }\n\n  private removeListen_(pathString: string, queryId: string): ListenSpec {\n    const normalizedPathString = new Path(pathString).toString(); // normalize path.\n    let listen;\n    if (this.listens.has(normalizedPathString)) {\n      const map = this.listens.get(normalizedPathString)!;\n      listen = map.get(queryId);\n      map.delete(queryId);\n      if (map.size === 0) {\n        this.listens.delete(normalizedPathString);\n      }\n    } else {\n      // all listens for this path has already been removed\n      listen = undefined;\n    }\n    return listen;\n  }\n\n  private onAuthRevoked_(statusCode: string, explanation: string) {\n    log('Auth token revoked: ' + statusCode + '/' + explanation);\n    this.authToken_ = null;\n    this.forceTokenRefresh_ = true;\n    this.realtime_.close();\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAuthTokenCount_++;\n      if (this.invalidAuthTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n        // Set a long reconnect delay because recovery is unlikely\n        this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n\n        // Notify the auth token provider that the token is invalid, which will log\n        // a warning\n        this.authTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n\n  private onAppCheckRevoked_(statusCode: string, explanation: string) {\n    log('App check token revoked: ' + statusCode + '/' + explanation);\n    this.appCheckToken_ = null;\n    this.forceTokenRefresh_ = true;\n    // Note: We don't close the connection as the developer may not have\n    // enforcement enabled. The backend closes connections with enforcements.\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAppCheckTokenCount_++;\n      if (this.invalidAppCheckTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n        this.appCheckTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n\n  private onSecurityDebugPacket_(body: { [k: string]: unknown }) {\n    if (this.securityDebugCallback_) {\n      this.securityDebugCallback_(body);\n    } else {\n      if ('msg' in body) {\n        console.log(\n          'FIREBASE: ' + (body['msg'] as string).replace('\\n', '\\nFIREBASE: ')\n        );\n      }\n    }\n  }\n\n  private restoreState_() {\n    //Re-authenticate ourselves if we have a credential stored.\n    this.tryAuth();\n    this.tryAppCheck();\n\n    // Puts depend on having received the corresponding data update from the server before they complete, so we must\n    // make sure to send listens before puts.\n    for (const queries of this.listens.values()) {\n      for (const listenSpec of queries.values()) {\n        this.sendListen_(listenSpec);\n      }\n    }\n\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      if (this.outstandingPuts_[i]) {\n        this.sendPut_(i);\n      }\n    }\n\n    while (this.onDisconnectRequestQueue_.length) {\n      const request = this.onDisconnectRequestQueue_.shift();\n      this.sendOnDisconnect_(\n        request.action,\n        request.pathString,\n        request.data,\n        request.onComplete\n      );\n    }\n\n    for (let i = 0; i < this.outstandingGets_.length; i++) {\n      if (this.outstandingGets_[i]) {\n        this.sendGet_(i);\n      }\n    }\n  }\n\n  /**\n   * Sends client stats for first connection\n   */\n  private sendConnectStats_() {\n    const stats: { [k: string]: number } = {};\n\n    let clientName = 'js';\n    if (isNodeSdk()) {\n      if (this.repoInfo_.nodeAdmin) {\n        clientName = 'admin_node';\n      } else {\n        clientName = 'node';\n      }\n    }\n\n    stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\n\n    if (isMobileCordova()) {\n      stats['framework.cordova'] = 1;\n    } else if (isReactNative()) {\n      stats['framework.reactnative'] = 1;\n    }\n    this.reportStats(stats);\n  }\n\n  private shouldReconnect_(): boolean {\n    const online = OnlineMonitor.getInstance().currentlyOnline();\n    return isEmpty(this.interruptReasons_) && online;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Comparator } from '../../util/SortedMap';\nimport { MIN_NAME } from '../../util/util';\nimport { Node, NamedNode } from '../Node';\n\nexport abstract class Index {\n  abstract compare(a: NamedNode, b: NamedNode): number;\n\n  abstract isDefinedOn(node: Node): boolean;\n\n  /**\n   * @returns A standalone comparison function for\n   * this index\n   */\n  getCompare(): Comparator<NamedNode> {\n    return this.compare.bind(this);\n  }\n\n  /**\n   * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\n   * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\n   *\n   *\n   * @returns True if the portion of the snapshot being indexed changed between oldNode and newNode\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    const oldWrapped = new NamedNode(MIN_NAME, oldNode);\n    const newWrapped = new NamedNode(MIN_NAME, newNode);\n    return this.compare(oldWrapped, newWrapped) !== 0;\n  }\n\n  /**\n   * @returns a node wrapper that will sort equal to or less than\n   * any other node wrapper, using this index\n   */\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @returns a node wrapper that will sort greater than or equal to\n   * any other node wrapper, using this index\n   */\n  abstract maxPost(): NamedNode;\n\n  abstract makePost(indexValue: unknown, name: string): NamedNode;\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  abstract toString(): string;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { ChildrenNode } from '../ChildrenNode';\nimport { Node, NamedNode } from '../Node';\n\nimport { Index } from './Index';\n\nlet __EMPTY_NODE: ChildrenNode;\n\nexport class KeyIndex extends Index {\n  static get __EMPTY_NODE() {\n    return __EMPTY_NODE;\n  }\n\n  static set __EMPTY_NODE(val) {\n    __EMPTY_NODE = val;\n  }\n  compare(a: NamedNode, b: NamedNode): number {\n    return nameCompare(a.name, b.name);\n  }\n  isDefinedOn(node: Node): boolean {\n    // We could probably return true here (since every node has a key), but it's never called\n    // so just leaving unimplemented for now.\n    throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return false; // The key for a node never changes.\n  }\n  minPost() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    // TODO: This should really be created once and cached in a static property, but\n    // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\n    return new NamedNode(MAX_NAME, __EMPTY_NODE);\n  }\n\n  makePost(indexValue: string, name: string): NamedNode {\n    assert(\n      typeof indexValue === 'string',\n      'KeyIndex indexValue must always be a string.'\n    );\n    // We just use empty node, but it'll never be compared, since our comparator only looks at name.\n    return new NamedNode(indexValue, __EMPTY_NODE);\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.key';\n  }\n}\n\nexport const KEY_INDEX = new KeyIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Implementation of an immutable SortedMap using a Left-leaning\n * Red-Black Tree, adapted from the implementation in Mugs\n * (http://mads379.github.com/mugs/) by Mads Hartmann Jensen\n * (mads379\\@gmail.com).\n *\n * Original paper on Left-leaning Red-Black Trees:\n *   http://www.cs.princeton.edu/~rs/talks/LLRB/LLRB.pdf\n *\n * Invariant 1: No red node has a red child\n * Invariant 2: Every leaf path has the same number of black nodes\n * Invariant 3: Only the left child can be red (left leaning)\n */\n\n// TODO: There are some improvements I'd like to make to improve memory / perf:\n//  * Create two prototypes, LLRedNode and LLBlackNode, instead of storing a\n//    color property in every node.\n// TODO: It would also be good (and possibly necessary) to create a base\n// interface for LLRBNode and LLRBEmptyNode.\n\nexport type Comparator<K> = (key1: K, key2: K) => number;\n\n/**\n * An iterator over an LLRBNode.\n */\nexport class SortedMapIterator<K, V, T> {\n  private nodeStack_: Array<LLRBNode<K, V> | LLRBEmptyNode<K, V>> = [];\n\n  /**\n   * @param node - Node to iterate.\n   * @param isReverse_ - Whether or not to iterate in reverse\n   */\n  constructor(\n    node: LLRBNode<K, V> | LLRBEmptyNode<K, V>,\n    startKey: K | null,\n    comparator: Comparator<K>,\n    private isReverse_: boolean,\n    private resultGenerator_: ((k: K, v: V) => T) | null = null\n  ) {\n    let cmp = 1;\n    while (!node.isEmpty()) {\n      node = node as LLRBNode<K, V>;\n      cmp = startKey ? comparator(node.key, startKey) : 1;\n      // flip the comparison if we're going in reverse\n      if (isReverse_) {\n        cmp *= -1;\n      }\n\n      if (cmp < 0) {\n        // This node is less than our start key. ignore it\n        if (this.isReverse_) {\n          node = node.left;\n        } else {\n          node = node.right;\n        }\n      } else if (cmp === 0) {\n        // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\n        this.nodeStack_.push(node);\n        break;\n      } else {\n        // This node is greater than our start key, add it to the stack and move to the next one\n        this.nodeStack_.push(node);\n        if (this.isReverse_) {\n          node = node.right;\n        } else {\n          node = node.left;\n        }\n      }\n    }\n  }\n\n  getNext(): T {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    let node = this.nodeStack_.pop();\n    let result: T;\n    if (this.resultGenerator_) {\n      result = this.resultGenerator_(node.key, node.value);\n    } else {\n      result = { key: node.key, value: node.value } as unknown as T;\n    }\n\n    if (this.isReverse_) {\n      node = node.left;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.right;\n      }\n    } else {\n      node = node.right;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.left;\n      }\n    }\n\n    return result;\n  }\n\n  hasNext(): boolean {\n    return this.nodeStack_.length > 0;\n  }\n\n  peek(): T {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    const node = this.nodeStack_[this.nodeStack_.length - 1];\n    if (this.resultGenerator_) {\n      return this.resultGenerator_(node.key, node.value);\n    } else {\n      return { key: node.key, value: node.value } as unknown as T;\n    }\n  }\n}\n\n/**\n * Represents a node in a Left-leaning Red-Black tree.\n */\nexport class LLRBNode<K, V> {\n  color: boolean;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n\n  /**\n   * @param key - Key associated with this node.\n   * @param value - Value associated with this node.\n   * @param color - Whether this node is red.\n   * @param left - Left child.\n   * @param right - Right child.\n   */\n  constructor(\n    public key: K,\n    public value: V,\n    color: boolean | null,\n    left?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ) {\n    this.color = color != null ? color : LLRBNode.RED;\n    this.left =\n      left != null ? left : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n    this.right =\n      right != null ? right : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n  }\n\n  static RED = true;\n  static BLACK = false;\n\n  /**\n   * Returns a copy of the current node, optionally replacing pieces of it.\n   *\n   * @param key - New key for the node, or null.\n   * @param value - New value for the node, or null.\n   * @param color - New color for the node, or null.\n   * @param left - New left child for the node, or null.\n   * @param right - New right child for the node, or null.\n   * @returns The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBNode<K, V> {\n    return new LLRBNode(\n      key != null ? key : this.key,\n      value != null ? value : this.value,\n      color != null ? color : this.color,\n      left != null ? left : this.left,\n      right != null ? right : this.right\n    );\n  }\n\n  /**\n   * @returns The total number of nodes in the tree.\n   */\n  count(): number {\n    return this.left.count() + 1 + this.right.count();\n  }\n\n  /**\n   * @returns True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   *   node.  If it returns true, traversal is aborted.\n   * @returns The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return (\n      this.left.inorderTraversal(action) ||\n      !!action(this.key, this.value) ||\n      this.right.inorderTraversal(action)\n    );\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return (\n      this.right.reverseTraversal(action) ||\n      action(this.key, this.value) ||\n      this.left.reverseTraversal(action)\n    );\n  }\n\n  /**\n   * @returns The minimum node in the tree.\n   */\n  private min_(): LLRBNode<K, V> {\n    if (this.left.isEmpty()) {\n      return this;\n    } else {\n      return (this.left as LLRBNode<K, V>).min_();\n    }\n  }\n\n  /**\n   * @returns The maximum key in the tree.\n   */\n  minKey(): K {\n    return this.min_().key;\n  }\n\n  /**\n   * @returns The maximum key in the tree.\n   */\n  maxKey(): K {\n    if (this.right.isEmpty()) {\n      return this.key;\n    } else {\n      return this.right.maxKey();\n    }\n  }\n\n  /**\n   * @param key - Key to insert.\n   * @param value - Value to insert.\n   * @param comparator - Comparator.\n   * @returns New tree, with the key/value added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    const cmp = comparator(key, n.key);\n    if (cmp < 0) {\n      n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n    } else if (cmp === 0) {\n      n = n.copy(null, value, null, null, null);\n    } else {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        n.right.insert(key, value, comparator)\n      );\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @returns New tree, with the minimum key removed.\n   */\n  private removeMin_(): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    if (this.left.isEmpty()) {\n      return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n    }\n    let n: LLRBNode<K, V> = this;\n    if (!n.left.isRed_() && !n.left.left.isRed_()) {\n      n = n.moveRedLeft_();\n    }\n    n = n.copy(null, null, null, (n.left as LLRBNode<K, V>).removeMin_(), null);\n    return n.fixUp_();\n  }\n\n  /**\n   * @param key - The key of the item to remove.\n   * @param comparator - Comparator.\n   * @returns New tree, with the specified item removed.\n   */\n  remove(\n    key: K,\n    comparator: Comparator<K>\n  ): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    let n, smallest;\n    n = this;\n    if (comparator(key, n.key) < 0) {\n      if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\n        n = n.moveRedLeft_();\n      }\n      n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n    } else {\n      if (n.left.isRed_()) {\n        n = n.rotateRight_();\n      }\n      if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\n        n = n.moveRedRight_();\n      }\n      if (comparator(key, n.key) === 0) {\n        if (n.right.isEmpty()) {\n          return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n        } else {\n          smallest = (n.right as LLRBNode<K, V>).min_();\n          n = n.copy(\n            smallest.key,\n            smallest.value,\n            null,\n            null,\n            (n.right as LLRBNode<K, V>).removeMin_()\n          );\n        }\n      }\n      n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @returns Whether this is a RED node.\n   */\n  isRed_(): boolean {\n    return this.color;\n  }\n\n  /**\n   * @returns New tree after performing any needed rotations.\n   */\n  private fixUp_(): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    if (n.right.isRed_() && !n.left.isRed_()) {\n      n = n.rotateLeft_();\n    }\n    if (n.left.isRed_() && n.left.left.isRed_()) {\n      n = n.rotateRight_();\n    }\n    if (n.left.isRed_() && n.right.isRed_()) {\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after moveRedLeft.\n   */\n  private moveRedLeft_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.right.left.isRed_()) {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        (n.right as LLRBNode<K, V>).rotateRight_()\n      );\n      n = n.rotateLeft_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after moveRedRight.\n   */\n  private moveRedRight_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.left.left.isRed_()) {\n      n = n.rotateRight_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after rotateLeft.\n   */\n  private rotateLeft_(): LLRBNode<K, V> {\n    const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n    return this.right.copy(null, null, this.color, nl, null) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @returns New tree, after rotateRight.\n   */\n  private rotateRight_(): LLRBNode<K, V> {\n    const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n    return this.left.copy(null, null, this.color, null, nr) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @returns Newt ree, after colorFlip.\n   */\n  private colorFlip_(): LLRBNode<K, V> {\n    const left = this.left.copy(null, null, !this.left.color, null, null);\n    const right = this.right.copy(null, null, !this.right.color, null, null);\n    return this.copy(null, null, !this.color, left, right);\n  }\n\n  /**\n   * For testing.\n   *\n   * @returns True if all is well.\n   */\n  private checkMaxDepth_(): boolean {\n    const blackDepth = this.check_();\n    return Math.pow(2.0, blackDepth) <= this.count() + 1;\n  }\n\n  check_(): number {\n    if (this.isRed_() && this.left.isRed_()) {\n      throw new Error(\n        'Red node has red child(' + this.key + ',' + this.value + ')'\n      );\n    }\n    if (this.right.isRed_()) {\n      throw new Error(\n        'Right child of (' + this.key + ',' + this.value + ') is red'\n      );\n    }\n    const blackDepth = this.left.check_();\n    if (blackDepth !== this.right.check_()) {\n      throw new Error('Black depths differ');\n    } else {\n      return blackDepth + (this.isRed_() ? 0 : 1);\n    }\n  }\n}\n\n/**\n * Represents an empty node (a leaf node in the Red-Black Tree).\n */\nexport class LLRBEmptyNode<K, V> {\n  key: K;\n  value: V;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  color: boolean;\n\n  /**\n   * Returns a copy of the current node.\n   *\n   * @returns The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key/value added.\n   *\n   * @param key - Key to be added.\n   * @param value - Value to be added.\n   * @param comparator - Comparator.\n   * @returns New tree, with item added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    return new LLRBNode(key, value, null);\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key removed.\n   *\n   * @param key - The key to remove.\n   * @param comparator - Comparator.\n   * @returns New tree, with item removed.\n   */\n  remove(key: K, comparator: Comparator<K>): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * @returns The total number of nodes in the tree.\n   */\n  count(): number {\n    return 0;\n  }\n\n  /**\n   * @returns True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return true;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return false;\n  }\n\n  minKey(): null {\n    return null;\n  }\n\n  maxKey(): null {\n    return null;\n  }\n\n  check_(): number {\n    return 0;\n  }\n\n  /**\n   * @returns Whether this node is red.\n   */\n  isRed_() {\n    return false;\n  }\n}\n\n/**\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\n * tree.\n */\nexport class SortedMap<K, V> {\n  /**\n   * Always use the same empty node, to reduce memory.\n   */\n  static EMPTY_NODE = new LLRBEmptyNode();\n\n  /**\n   * @param comparator_ - Key comparator.\n   * @param root_ - Optional root node for the map.\n   */\n  constructor(\n    private comparator_: Comparator<K>,\n    private root_:\n      | LLRBNode<K, V>\n      | LLRBEmptyNode<K, V> = SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>\n  ) {}\n\n  /**\n   * Returns a copy of the map, with the specified key/value added or replaced.\n   * (TODO: We should perhaps rename this method to 'put')\n   *\n   * @param key - Key to be added.\n   * @param value - Value to be added.\n   * @returns New map, with item added.\n   */\n  insert(key: K, value: V): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .insert(key, value, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns a copy of the map, with the specified key removed.\n   *\n   * @param key - The key to remove.\n   * @returns New map, with item removed.\n   */\n  remove(key: K): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .remove(key, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns the value of the node with the given key, or null.\n   *\n   * @param key - The key to look up.\n   * @returns The value of the node with the given key, or null if the\n   * key doesn't exist.\n   */\n  get(key: K): V | null {\n    let cmp;\n    let node = this.root_;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        return node.value;\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        node = node.right;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Returns the key of the item *before* the specified key, or null if key is the first item.\n   * @param key - The key to find the predecessor of\n   * @returns The predecessor key.\n   */\n  getPredecessorKey(key: K): K | null {\n    let cmp,\n      node = this.root_,\n      rightParent = null;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        if (!node.left.isEmpty()) {\n          node = node.left;\n          while (!node.right.isEmpty()) {\n            node = node.right;\n          }\n          return node.key;\n        } else if (rightParent) {\n          return rightParent.key;\n        } else {\n          return null; // first item.\n        }\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        rightParent = node;\n        node = node.right;\n      }\n    }\n\n    throw new Error(\n      'Attempted to find predecessor key for a nonexistent key.  What gives?'\n    );\n  }\n\n  /**\n   * @returns True if the map is empty.\n   */\n  isEmpty(): boolean {\n    return this.root_.isEmpty();\n  }\n\n  /**\n   * @returns The total number of nodes in the map.\n   */\n  count(): number {\n    return this.root_.count();\n  }\n\n  /**\n   * @returns The minimum key in the map.\n   */\n  minKey(): K | null {\n    return this.root_.minKey();\n  }\n\n  /**\n   * @returns The maximum key in the map.\n   */\n  maxKey(): K | null {\n    return this.root_.maxKey();\n  }\n\n  /**\n   * Traverses the map in key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param action - Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @returns The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return this.root_.inorderTraversal(action);\n  }\n\n  /**\n   * Traverses the map in reverse key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param action - Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @returns True if the traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return this.root_.reverseTraversal(action);\n  }\n\n  /**\n   * Returns an iterator over the SortedMap.\n   * @returns The iterator.\n   */\n  getIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getReverseIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n\n  getReverseIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare } from '../util/util';\n\nimport { NamedNode } from './Node';\n\nexport function NAME_ONLY_COMPARATOR(left: NamedNode, right: NamedNode) {\n  return nameCompare(left.name, right.name);\n}\n\nexport function NAME_COMPARATOR(left: string, right: string) {\n  return nameCompare(left, right);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport { doubleToIEEE754String } from '../util/util';\n\nimport { Node } from './Node';\n\nlet MAX_NODE: Node;\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\nexport const priorityHashText = function (priority: string | number): string {\n  if (typeof priority === 'number') {\n    return 'number:' + doubleToIEEE754String(priority);\n  } else {\n    return 'string:' + priority;\n  }\n};\n\n/**\n * Validates that a priority snapshot Node is valid.\n */\nexport const validatePriorityNode = function (priorityNode: Node) {\n  if (priorityNode.isLeafNode()) {\n    const val = priorityNode.val();\n    assert(\n      typeof val === 'string' ||\n        typeof val === 'number' ||\n        (typeof val === 'object' && contains(val as Indexable, '.sv')),\n      'Priority must be a string or number.'\n    );\n  } else {\n    assert(\n      priorityNode === MAX_NODE || priorityNode.isEmpty(),\n      'priority of unexpected type.'\n    );\n  }\n  // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\n  assert(\n    priorityNode === MAX_NODE || priorityNode.getPriority().isEmpty(),\n    \"Priority nodes can't have a priority of their own.\"\n  );\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport {\n  Path,\n  pathGetFront,\n  pathGetLength,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\nimport { doubleToIEEE754String, sha1 } from '../util/util';\n\nimport { ChildrenNodeConstructor } from './ChildrenNode';\nimport { Index } from './indexes/Index';\nimport { Node } from './Node';\nimport { priorityHashText, validatePriorityNode } from './snap';\n\nlet __childrenNodeConstructor: ChildrenNodeConstructor;\n\n/**\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\n * implements Node and stores the value of the node (a string,\n * number, or boolean) accessible via getValue().\n */\nexport class LeafNode implements Node {\n  static set __childrenNodeConstructor(val: ChildrenNodeConstructor) {\n    __childrenNodeConstructor = val;\n  }\n\n  static get __childrenNodeConstructor() {\n    return __childrenNodeConstructor;\n  }\n\n  /**\n   * The sort order for comparing leaf nodes of different types. If two leaf nodes have\n   * the same type, the comparison falls back to their value\n   */\n  static VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n\n  private lazyHash_: string | null = null;\n\n  /**\n   * @param value_ - The value to store in this leaf node. The object type is\n   * possible in the event of a deferred value\n   * @param priorityNode_ - The priority of this node.\n   */\n  constructor(\n    private readonly value_: string | number | boolean | Indexable,\n    private priorityNode_: Node = LeafNode.__childrenNodeConstructor.EMPTY_NODE\n  ) {\n    assert(\n      this.value_ !== undefined && this.value_ !== null,\n      \"LeafNode shouldn't be created with null/undefined value.\"\n    );\n\n    validatePriorityNode(this.priorityNode_);\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return true;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    return new LeafNode(this.value_, newPriorityNode);\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    if (pathIsEmpty(path)) {\n      return this;\n    } else if (pathGetFront(path) === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n  hasChild(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(childName: string, childNode: Node): null {\n    return null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else if (newChildNode.isEmpty() && childName !== '.priority') {\n      return this;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(\n        childName,\n        newChildNode\n      ).updatePriority(this.priorityNode_);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return newChildNode;\n    } else if (newChildNode.isEmpty() && front !== '.priority') {\n      return this;\n    } else {\n      assert(\n        front !== '.priority' || pathGetLength(path) === 1,\n        '.priority must be the last token in a path'\n      );\n\n      return this.updateImmediateChild(\n        front,\n        LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(\n          pathPopFront(path),\n          newChildNode\n        )\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return 0;\n  }\n\n  /** @inheritDoc */\n  forEachChild(index: Index, action: (s: string, n: Node) => void): boolean {\n    return false;\n  }\n  val(exportFormat?: boolean): {} {\n    if (exportFormat && !this.getPriority().isEmpty()) {\n      return {\n        '.value': this.getValue(),\n        '.priority': this.getPriority().val()\n      };\n    } else {\n      return this.getValue();\n    }\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.priorityNode_.isEmpty()) {\n        toHash +=\n          'priority:' +\n          priorityHashText(this.priorityNode_.val() as number | string) +\n          ':';\n      }\n\n      const type = typeof this.value_;\n      toHash += type + ':';\n      if (type === 'number') {\n        toHash += doubleToIEEE754String(this.value_ as number);\n      } else {\n        toHash += this.value_;\n      }\n      this.lazyHash_ = sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /**\n   * Returns the value of the leaf node.\n   * @returns The value of the node.\n   */\n  getValue(): Indexable | string | number | boolean {\n    return this.value_;\n  }\n  compareTo(other: Node): number {\n    if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\n      return 1;\n    } else if (other instanceof LeafNode.__childrenNodeConstructor) {\n      return -1;\n    } else {\n      assert(other.isLeafNode(), 'Unknown node type');\n      return this.compareToLeafNode_(other as LeafNode);\n    }\n  }\n\n  /**\n   * Comparison specifically for two leaf nodes\n   */\n  private compareToLeafNode_(otherLeaf: LeafNode): number {\n    const otherLeafType = typeof otherLeaf.value_;\n    const thisLeafType = typeof this.value_;\n    const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\n    const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\n    assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\n    assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\n    if (otherIndex === thisIndex) {\n      // Same type, compare values\n      if (thisLeafType === 'object') {\n        // Deferred value nodes are all equal, but we should also never get to this point...\n        return 0;\n      } else {\n        // Note that this works because true > false, all others are number or string comparisons\n        if (this.value_ < otherLeaf.value_) {\n          return -1;\n        } else if (this.value_ === otherLeaf.value_) {\n          return 0;\n        } else {\n          return 1;\n        }\n      }\n    } else {\n      return thisIndex - otherIndex;\n    }\n  }\n  withIndex(): Node {\n    return this;\n  }\n  isIndexed(): boolean {\n    return true;\n  }\n  equals(other: Node): boolean {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      const otherLeaf = other as LeafNode;\n      return (\n        this.value_ === otherLeaf.value_ &&\n        this.priorityNode_.equals(otherLeaf.priorityNode_)\n      );\n    } else {\n      return false;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { LeafNode } from '../LeafNode';\nimport { NamedNode, Node } from '../Node';\n\nimport { Index } from './Index';\n\nlet nodeFromJSON: (a: unknown) => Node;\nlet MAX_NODE: Node;\n\nexport function setNodeFromJSON(val: (a: unknown) => Node) {\n  nodeFromJSON = val;\n}\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\nexport class PriorityIndex extends Index {\n  compare(a: NamedNode, b: NamedNode): number {\n    const aPriority = a.node.getPriority();\n    const bPriority = b.node.getPriority();\n    const indexCmp = aPriority.compareTo(bPriority);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  isDefinedOn(node: Node): boolean {\n    return !node.getPriority().isEmpty();\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.getPriority().equals(newNode.getPriority());\n  }\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE));\n  }\n\n  makePost(indexValue: unknown, name: string): NamedNode {\n    const priorityNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.priority';\n  }\n}\n\nexport const PRIORITY_INDEX = new PriorityIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LLRBNode, SortedMap } from '../util/SortedMap';\n\nimport { NamedNode } from './Node';\n\nconst LOG_2 = Math.log(2);\n\nclass Base12Num {\n  count: number;\n  private current_: number;\n  private bits_: number;\n\n  constructor(length: number) {\n    const logBase2 = (num: number) =>\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      parseInt((Math.log(num) / LOG_2) as any, 10);\n    const bitMask = (bits: number) => parseInt(Array(bits + 1).join('1'), 2);\n    this.count = logBase2(length + 1);\n    this.current_ = this.count - 1;\n    const mask = bitMask(this.count);\n    this.bits_ = (length + 1) & mask;\n  }\n\n  nextBitIsOne(): boolean {\n    //noinspection JSBitwiseOperatorUsage\n    const result = !(this.bits_ & (0x1 << this.current_));\n    this.current_--;\n    return result;\n  }\n}\n\n/**\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\n * function\n *\n * Uses the algorithm described in the paper linked here:\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\n *\n * @param childList - Unsorted list of children\n * @param cmp - The comparison method to be used\n * @param keyFn - An optional function to extract K from a node wrapper, if K's\n * type is not NamedNode\n * @param mapSortFn - An optional override for comparator used by the generated sorted map\n */\nexport const buildChildSet = function <K, V>(\n  childList: NamedNode[],\n  cmp: (a: NamedNode, b: NamedNode) => number,\n  keyFn?: (a: NamedNode) => K,\n  mapSortFn?: (a: K, b: K) => number\n): SortedMap<K, V> {\n  childList.sort(cmp);\n\n  const buildBalancedTree = function (\n    low: number,\n    high: number\n  ): LLRBNode<K, V> | null {\n    const length = high - low;\n    let namedNode: NamedNode;\n    let key: K;\n    if (length === 0) {\n      return null;\n    } else if (length === 1) {\n      namedNode = childList[low];\n      key = keyFn ? keyFn(namedNode) : (namedNode as unknown as K);\n      return new LLRBNode(\n        key,\n        namedNode.node as unknown as V,\n        LLRBNode.BLACK,\n        null,\n        null\n      );\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const middle = parseInt((length / 2) as any, 10) + low;\n      const left = buildBalancedTree(low, middle);\n      const right = buildBalancedTree(middle + 1, high);\n      namedNode = childList[middle];\n      key = keyFn ? keyFn(namedNode) : (namedNode as unknown as K);\n      return new LLRBNode(\n        key,\n        namedNode.node as unknown as V,\n        LLRBNode.BLACK,\n        left,\n        right\n      );\n    }\n  };\n\n  const buildFrom12Array = function (base12: Base12Num): LLRBNode<K, V> {\n    let node: LLRBNode<K, V> = null;\n    let root = null;\n    let index = childList.length;\n\n    const buildPennant = function (chunkSize: number, color: boolean) {\n      const low = index - chunkSize;\n      const high = index;\n      index -= chunkSize;\n      const childTree = buildBalancedTree(low + 1, high);\n      const namedNode = childList[low];\n      const key: K = keyFn ? keyFn(namedNode) : (namedNode as unknown as K);\n      attachPennant(\n        new LLRBNode(\n          key,\n          namedNode.node as unknown as V,\n          color,\n          null,\n          childTree\n        )\n      );\n    };\n\n    const attachPennant = function (pennant: LLRBNode<K, V>) {\n      if (node) {\n        node.left = pennant;\n        node = pennant;\n      } else {\n        root = pennant;\n        node = pennant;\n      }\n    };\n\n    for (let i = 0; i < base12.count; ++i) {\n      const isOne = base12.nextBitIsOne();\n      // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\n      const chunkSize = Math.pow(2, base12.count - (i + 1));\n      if (isOne) {\n        buildPennant(chunkSize, LLRBNode.BLACK);\n      } else {\n        // current == 2\n        buildPennant(chunkSize, LLRBNode.BLACK);\n        buildPennant(chunkSize, LLRBNode.RED);\n      }\n    }\n    return root;\n  };\n\n  const base12 = new Base12Num(childList.length);\n  const root = buildFrom12Array(base12);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return new SortedMap<K, V>(mapSortFn || (cmp as any), root);\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains, map, safeGet } from '@firebase/util';\n\nimport { SortedMap } from '../util/SortedMap';\n\nimport { buildChildSet } from './childSet';\nimport { Index } from './indexes/Index';\nimport { KEY_INDEX } from './indexes/KeyIndex';\nimport { PRIORITY_INDEX } from './indexes/PriorityIndex';\nimport { NamedNode, Node } from './Node';\n\nlet _defaultIndexMap: IndexMap;\n\nconst fallbackObject = {};\n\nexport class IndexMap {\n  /**\n   * The default IndexMap for nodes without a priority\n   */\n  static get Default(): IndexMap {\n    assert(\n      fallbackObject && PRIORITY_INDEX,\n      'ChildrenNode.ts has not been loaded'\n    );\n    _defaultIndexMap =\n      _defaultIndexMap ||\n      new IndexMap(\n        { '.priority': fallbackObject },\n        { '.priority': PRIORITY_INDEX }\n      );\n    return _defaultIndexMap;\n  }\n\n  constructor(\n    private indexes_: {\n      [k: string]: SortedMap<NamedNode, Node> | /*FallbackType*/ object;\n    },\n    private indexSet_: { [k: string]: Index }\n  ) {}\n\n  get(indexKey: string): SortedMap<NamedNode, Node> | null {\n    const sortedMap = safeGet(this.indexes_, indexKey);\n    if (!sortedMap) {\n      throw new Error('No index defined for ' + indexKey);\n    }\n\n    if (sortedMap instanceof SortedMap) {\n      return sortedMap;\n    } else {\n      // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\n      // regular child map\n      return null;\n    }\n  }\n\n  hasIndex(indexDefinition: Index): boolean {\n    return contains(this.indexSet_, indexDefinition.toString());\n  }\n\n  addIndex(\n    indexDefinition: Index,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    assert(\n      indexDefinition !== KEY_INDEX,\n      \"KeyIndex always exists and isn't meant to be added to the IndexMap.\"\n    );\n    const childList = [];\n    let sawIndexedValue = false;\n    const iter = existingChildren.getIterator(NamedNode.Wrap);\n    let next = iter.getNext();\n    while (next) {\n      sawIndexedValue =\n        sawIndexedValue || indexDefinition.isDefinedOn(next.node);\n      childList.push(next);\n      next = iter.getNext();\n    }\n    let newIndex;\n    if (sawIndexedValue) {\n      newIndex = buildChildSet(childList, indexDefinition.getCompare());\n    } else {\n      newIndex = fallbackObject;\n    }\n    const indexName = indexDefinition.toString();\n    const newIndexSet = { ...this.indexSet_ };\n    newIndexSet[indexName] = indexDefinition;\n    const newIndexes = { ...this.indexes_ };\n    newIndexes[indexName] = newIndex;\n    return new IndexMap(newIndexes, newIndexSet);\n  }\n\n  /**\n   * Ensure that this node is properly tracked in any indexes that we're maintaining\n   */\n  addToIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(\n      this.indexes_,\n      (indexedChildren: SortedMap<NamedNode, Node>, indexName: string) => {\n        const index = safeGet(this.indexSet_, indexName);\n        assert(index, 'Missing index implementation for ' + indexName);\n        if (indexedChildren === fallbackObject) {\n          // Check to see if we need to index everything\n          if (index.isDefinedOn(namedNode.node)) {\n            // We need to build this index\n            const childList = [];\n            const iter = existingChildren.getIterator(NamedNode.Wrap);\n            let next = iter.getNext();\n            while (next) {\n              if (next.name !== namedNode.name) {\n                childList.push(next);\n              }\n              next = iter.getNext();\n            }\n            childList.push(namedNode);\n            return buildChildSet(childList, index.getCompare());\n          } else {\n            // No change, this remains a fallback\n            return fallbackObject;\n          }\n        } else {\n          const existingSnap = existingChildren.get(namedNode.name);\n          let newChildren = indexedChildren;\n          if (existingSnap) {\n            newChildren = newChildren.remove(\n              new NamedNode(namedNode.name, existingSnap)\n            );\n          }\n          return newChildren.insert(namedNode, namedNode.node);\n        }\n      }\n    );\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n\n  /**\n   * Create a new IndexMap instance with the given value removed\n   */\n  removeFromIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(\n      this.indexes_,\n      (indexedChildren: SortedMap<NamedNode, Node>) => {\n        if (indexedChildren === fallbackObject) {\n          // This is the fallback. Just return it, nothing to do in this case\n          return indexedChildren;\n        } else {\n          const existingSnap = existingChildren.get(namedNode.name);\n          if (existingSnap) {\n            return indexedChildren.remove(\n              new NamedNode(namedNode.name, existingSnap)\n            );\n          } else {\n            // No record of this child\n            return indexedChildren;\n          }\n        }\n      }\n    );\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Path, pathGetFront, pathGetLength, pathPopFront } from '../util/Path';\nimport { SortedMap, SortedMapIterator } from '../util/SortedMap';\nimport { MAX_NAME, MIN_NAME, sha1 } from '../util/util';\n\nimport { NAME_COMPARATOR } from './comparators';\nimport { Index } from './indexes/Index';\nimport { KEY_INDEX, KeyIndex } from './indexes/KeyIndex';\nimport {\n  PRIORITY_INDEX,\n  setMaxNode as setPriorityMaxNode\n} from './indexes/PriorityIndex';\nimport { IndexMap } from './IndexMap';\nimport { LeafNode } from './LeafNode';\nimport { NamedNode, Node } from './Node';\nimport { priorityHashText, setMaxNode, validatePriorityNode } from './snap';\n\nexport interface ChildrenNodeConstructor {\n  new (\n    children_: SortedMap<string, Node>,\n    priorityNode_: Node | null,\n    indexMap_: IndexMap\n  ): ChildrenNode;\n  EMPTY_NODE: ChildrenNode;\n}\n\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\n\nlet EMPTY_NODE: ChildrenNode;\n\n/**\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\n * (i.e. nodes with children).  It implements Node and stores the\n * list of children in the children property, sorted by child name.\n */\nexport class ChildrenNode implements Node {\n  private lazyHash_: string | null = null;\n\n  static get EMPTY_NODE(): ChildrenNode {\n    return (\n      EMPTY_NODE ||\n      (EMPTY_NODE = new ChildrenNode(\n        new SortedMap<string, Node>(NAME_COMPARATOR),\n        null,\n        IndexMap.Default\n      ))\n    );\n  }\n\n  /**\n   * @param children_ - List of children of this node..\n   * @param priorityNode_ - The priority of this node (as a snapshot node).\n   */\n  constructor(\n    private readonly children_: SortedMap<string, Node>,\n    private readonly priorityNode_: Node | null,\n    private indexMap_: IndexMap\n  ) {\n    /**\n     * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\n     * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\n     * class instead of an empty ChildrenNode.\n     */\n    if (this.priorityNode_) {\n      validatePriorityNode(this.priorityNode_);\n    }\n\n    if (this.children_.isEmpty()) {\n      assert(\n        !this.priorityNode_ || this.priorityNode_.isEmpty(),\n        'An empty node cannot have a priority'\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_ || EMPTY_NODE;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    if (this.children_.isEmpty()) {\n      // Don't allow priorities on empty nodes\n      return this;\n    } else {\n      return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\n    }\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.getPriority();\n    } else {\n      const child = this.children_.get(childName);\n      return child === null ? EMPTY_NODE : child;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return this;\n    }\n\n    return this.getImmediateChild(front).getChild(pathPopFront(path));\n  }\n\n  /** @inheritDoc */\n  hasChild(childName: string): boolean {\n    return this.children_.get(childName) !== null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    assert(newChildNode, 'We should always be passing snapshot nodes');\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else {\n      const namedNode = new NamedNode(childName, newChildNode);\n      let newChildren, newIndexMap;\n      if (newChildNode.isEmpty()) {\n        newChildren = this.children_.remove(childName);\n        newIndexMap = this.indexMap_.removeFromIndexes(\n          namedNode,\n          this.children_\n        );\n      } else {\n        newChildren = this.children_.insert(childName, newChildNode);\n        newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\n      }\n\n      const newPriority = newChildren.isEmpty()\n        ? EMPTY_NODE\n        : this.priorityNode_;\n      return new ChildrenNode(newChildren, newPriority, newIndexMap);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return newChildNode;\n    } else {\n      assert(\n        pathGetFront(path) !== '.priority' || pathGetLength(path) === 1,\n        '.priority must be the last token in a path'\n      );\n      const newImmediateChild = this.getImmediateChild(front).updateChild(\n        pathPopFront(path),\n        newChildNode\n      );\n      return this.updateImmediateChild(front, newImmediateChild);\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return this.children_.isEmpty();\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return this.children_.count();\n  }\n\n  private static INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\n\n  /** @inheritDoc */\n  val(exportFormat?: boolean): object {\n    if (this.isEmpty()) {\n      return null;\n    }\n\n    const obj: { [k: string]: unknown } = {};\n    let numKeys = 0,\n      maxKey = 0,\n      allIntegerKeys = true;\n    this.forEachChild(PRIORITY_INDEX, (key: string, childNode: Node) => {\n      obj[key] = childNode.val(exportFormat);\n\n      numKeys++;\n      if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\n        maxKey = Math.max(maxKey, Number(key));\n      } else {\n        allIntegerKeys = false;\n      }\n    });\n\n    if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\n      // convert to array.\n      const array: unknown[] = [];\n      // eslint-disable-next-line guard-for-in\n      for (const key in obj) {\n        array[key as unknown as number] = obj[key];\n      }\n\n      return array;\n    } else {\n      if (exportFormat && !this.getPriority().isEmpty()) {\n        obj['.priority'] = this.getPriority().val();\n      }\n      return obj;\n    }\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.getPriority().isEmpty()) {\n        toHash +=\n          'priority:' +\n          priorityHashText(this.getPriority().val() as string | number) +\n          ':';\n      }\n\n      this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n        const childHash = childNode.hash();\n        if (childHash !== '') {\n          toHash += ':' + key + ':' + childHash;\n        }\n      });\n\n      this.lazyHash_ = toHash === '' ? '' : sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(\n    childName: string,\n    childNode: Node,\n    index: Index\n  ): string {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      const predecessor = idx.getPredecessorKey(\n        new NamedNode(childName, childNode)\n      );\n      return predecessor ? predecessor.name : null;\n    } else {\n      return this.children_.getPredecessorKey(childName);\n    }\n  }\n\n  getFirstChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const minKey = idx.minKey();\n      return minKey && minKey.name;\n    } else {\n      return this.children_.minKey();\n    }\n  }\n\n  getFirstChild(indexDefinition: Index): NamedNode | null {\n    const minKey = this.getFirstChildName(indexDefinition);\n    if (minKey) {\n      return new NamedNode(minKey, this.children_.get(minKey));\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Given an index, return the key name of the largest value we have, according to that index\n   */\n  getLastChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const maxKey = idx.maxKey();\n      return maxKey && maxKey.name;\n    } else {\n      return this.children_.maxKey();\n    }\n  }\n\n  getLastChild(indexDefinition: Index): NamedNode | null {\n    const maxKey = this.getLastChildName(indexDefinition);\n    if (maxKey) {\n      return new NamedNode(maxKey, this.children_.get(maxKey));\n    } else {\n      return null;\n    }\n  }\n  forEachChild(\n    index: Index,\n    action: (key: string, node: Node) => boolean | void\n  ): boolean {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      return idx.inorderTraversal(wrappedNode => {\n        return action(wrappedNode.name, wrappedNode.node);\n      });\n    } else {\n      return this.children_.inorderTraversal(action);\n    }\n  }\n\n  getIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\n  }\n\n  getIteratorFrom(\n    startPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getIteratorFrom(startPost, key => key);\n    } else {\n      const iterator = this.children_.getIteratorFrom(\n        startPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, startPost) < 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n\n  getReverseIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getReverseIteratorFrom(\n      indexDefinition.maxPost(),\n      indexDefinition\n    );\n  }\n\n  getReverseIteratorFrom(\n    endPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getReverseIteratorFrom(endPost, key => {\n        return key;\n      });\n    } else {\n      const iterator = this.children_.getReverseIteratorFrom(\n        endPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, endPost) > 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n  compareTo(other: ChildrenNode): number {\n    if (this.isEmpty()) {\n      if (other.isEmpty()) {\n        return 0;\n      } else {\n        return -1;\n      }\n    } else if (other.isLeafNode() || other.isEmpty()) {\n      return 1;\n    } else if (other === MAX_NODE) {\n      return -1;\n    } else {\n      // Must be another node with children.\n      return 0;\n    }\n  }\n  withIndex(indexDefinition: Index): Node {\n    if (\n      indexDefinition === KEY_INDEX ||\n      this.indexMap_.hasIndex(indexDefinition)\n    ) {\n      return this;\n    } else {\n      const newIndexMap = this.indexMap_.addIndex(\n        indexDefinition,\n        this.children_\n      );\n      return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\n    }\n  }\n  isIndexed(index: Index): boolean {\n    return index === KEY_INDEX || this.indexMap_.hasIndex(index);\n  }\n  equals(other: Node): boolean {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      return false;\n    } else {\n      const otherChildrenNode = other as ChildrenNode;\n      if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\n        return false;\n      } else if (\n        this.children_.count() === otherChildrenNode.children_.count()\n      ) {\n        const thisIter = this.getIterator(PRIORITY_INDEX);\n        const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\n        let thisCurrent = thisIter.getNext();\n        let otherCurrent = otherIter.getNext();\n        while (thisCurrent && otherCurrent) {\n          if (\n            thisCurrent.name !== otherCurrent.name ||\n            !thisCurrent.node.equals(otherCurrent.node)\n          ) {\n            return false;\n          }\n          thisCurrent = thisIter.getNext();\n          otherCurrent = otherIter.getNext();\n        }\n        return thisCurrent === null && otherCurrent === null;\n      } else {\n        return false;\n      }\n    }\n  }\n\n  /**\n   * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\n   * instead.\n   *\n   */\n  private resolveIndex_(\n    indexDefinition: Index\n  ): SortedMap<NamedNode, Node> | null {\n    if (indexDefinition === KEY_INDEX) {\n      return null;\n    } else {\n      return this.indexMap_.get(indexDefinition.toString());\n    }\n  }\n}\n\nexport class MaxNode extends ChildrenNode {\n  constructor() {\n    super(\n      new SortedMap<string, Node>(NAME_COMPARATOR),\n      ChildrenNode.EMPTY_NODE,\n      IndexMap.Default\n    );\n  }\n\n  compareTo(other: Node): number {\n    if (other === this) {\n      return 0;\n    } else {\n      return 1;\n    }\n  }\n\n  equals(other: Node): boolean {\n    // Not that we every compare it, but MAX_NODE is only ever equal to itself\n    return other === this;\n  }\n\n  getPriority(): MaxNode {\n    return this;\n  }\n\n  getImmediateChild(childName: string): ChildrenNode {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  isEmpty(): boolean {\n    return false;\n  }\n}\n\n/**\n * Marker that will sort higher than any other snapshot.\n */\nexport const MAX_NODE = new MaxNode();\n\n/**\n * Document NamedNode extensions\n */\ndeclare module './Node' {\n  interface NamedNode {\n    MIN: NamedNode;\n    MAX: NamedNode;\n  }\n}\n\nObject.defineProperties(NamedNode, {\n  MIN: {\n    value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\n  },\n  MAX: {\n    value: new NamedNode(MAX_NAME, MAX_NODE)\n  }\n});\n\n/**\n * Reference Extensions\n */\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\nLeafNode.__childrenNodeConstructor = ChildrenNode;\nsetMaxNode(MAX_NODE);\nsetPriorityMaxNode(MAX_NODE);\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains, assert } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport { SortedMap } from '../util/SortedMap';\nimport { each } from '../util/util';\n\nimport { ChildrenNode } from './ChildrenNode';\nimport { buildChildSet } from './childSet';\nimport { NAME_COMPARATOR, NAME_ONLY_COMPARATOR } from './comparators';\nimport { PRIORITY_INDEX, setNodeFromJSON } from './indexes/PriorityIndex';\nimport { IndexMap } from './IndexMap';\nimport { LeafNode } from './LeafNode';\nimport { NamedNode, Node } from './Node';\n\nconst USE_HINZE = true;\n\n/**\n * Constructs a snapshot node representing the passed JSON and returns it.\n * @param json - JSON to create a node for.\n * @param priority - Optional priority to use.  This will be ignored if the\n * passed JSON contains a .priority property.\n */\nexport function nodeFromJSON(\n  json: unknown | null,\n  priority: unknown = null\n): Node {\n  if (json === null) {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  if (typeof json === 'object' && '.priority' in json) {\n    priority = json['.priority'];\n  }\n\n  assert(\n    priority === null ||\n      typeof priority === 'string' ||\n      typeof priority === 'number' ||\n      (typeof priority === 'object' && '.sv' in (priority as object)),\n    'Invalid priority type found: ' + typeof priority\n  );\n\n  if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\n    json = json['.value'];\n  }\n\n  // Valid leaf nodes include non-objects or server-value wrapper objects\n  if (typeof json !== 'object' || '.sv' in json) {\n    const jsonLeaf = json as string | number | boolean | Indexable;\n    return new LeafNode(jsonLeaf, nodeFromJSON(priority));\n  }\n\n  if (!(json instanceof Array) && USE_HINZE) {\n    const children: NamedNode[] = [];\n    let childrenHavePriority = false;\n    const hinzeJsonObj = json;\n    each(hinzeJsonObj, (key, child) => {\n      if (key.substring(0, 1) !== '.') {\n        // Ignore metadata nodes\n        const childNode = nodeFromJSON(child);\n        if (!childNode.isEmpty()) {\n          childrenHavePriority =\n            childrenHavePriority || !childNode.getPriority().isEmpty();\n          children.push(new NamedNode(key, childNode));\n        }\n      }\n    });\n\n    if (children.length === 0) {\n      return ChildrenNode.EMPTY_NODE;\n    }\n\n    const childSet = buildChildSet(\n      children,\n      NAME_ONLY_COMPARATOR,\n      namedNode => namedNode.name,\n      NAME_COMPARATOR\n    ) as SortedMap<string, Node>;\n    if (childrenHavePriority) {\n      const sortedChildSet = buildChildSet(\n        children,\n        PRIORITY_INDEX.getCompare()\n      );\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        new IndexMap(\n          { '.priority': sortedChildSet },\n          { '.priority': PRIORITY_INDEX }\n        )\n      );\n    } else {\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        IndexMap.Default\n      );\n    }\n  } else {\n    let node: Node = ChildrenNode.EMPTY_NODE;\n    each(json, (key: string, childData: unknown) => {\n      if (contains(json as object, key)) {\n        if (key.substring(0, 1) !== '.') {\n          // ignore metadata nodes.\n          const childNode = nodeFromJSON(childData);\n          if (childNode.isLeafNode() || !childNode.isEmpty()) {\n            node = node.updateImmediateChild(key, childNode);\n          }\n        }\n      }\n    });\n\n    return node.updatePriority(nodeFromJSON(priority));\n  }\n}\n\nsetNodeFromJSON(nodeFromJSON);\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Path, pathGetFront, pathIsEmpty, pathSlice } from '../../util/Path';\nimport { MAX_NAME, nameCompare } from '../../util/util';\nimport { ChildrenNode, MAX_NODE } from '../ChildrenNode';\nimport { NamedNode, Node } from '../Node';\nimport { nodeFromJSON } from '../nodeFromJSON';\n\nimport { Index } from './Index';\n\nexport class PathIndex extends Index {\n  constructor(private indexPath_: Path) {\n    super();\n\n    assert(\n      !pathIsEmpty(indexPath_) && pathGetFront(indexPath_) !== '.priority',\n      \"Can't create PathIndex with empty path or .priority key\"\n    );\n  }\n\n  protected extractChild(snap: Node): Node {\n    return snap.getChild(this.indexPath_);\n  }\n  isDefinedOn(node: Node): boolean {\n    return !node.getChild(this.indexPath_).isEmpty();\n  }\n  compare(a: NamedNode, b: NamedNode): number {\n    const aChild = this.extractChild(a.node);\n    const bChild = this.extractChild(b.node);\n    const indexCmp = aChild.compareTo(bChild);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    const node = ChildrenNode.EMPTY_NODE.updateChild(\n      this.indexPath_,\n      valueNode\n    );\n    return new NamedNode(name, node);\n  }\n  maxPost(): NamedNode {\n    const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\n    return new NamedNode(MAX_NAME, node);\n  }\n  toString(): string {\n    return pathSlice(this.indexPath_, 0).join('/');\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare } from '../../util/util';\nimport { NamedNode, Node } from '../Node';\nimport { nodeFromJSON } from '../nodeFromJSON';\n\nimport { Index } from './Index';\n\nexport class ValueIndex extends Index {\n  compare(a: NamedNode, b: NamedNode): number {\n    const indexCmp = a.node.compareTo(b.node);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  isDefinedOn(node: Node): boolean {\n    return true;\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.equals(newNode);\n  }\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MAX;\n  }\n\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, valueNode);\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.value';\n  }\n}\n\nexport const VALUE_INDEX = new ValueIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\n\nexport const enum ChangeType {\n  /** Event type for a child added */\n  CHILD_ADDED = 'child_added',\n  /** Event type for a child removed */\n  CHILD_REMOVED = 'child_removed',\n  /** Event type for a child changed */\n  CHILD_CHANGED = 'child_changed',\n  /** Event type for a child moved */\n  CHILD_MOVED = 'child_moved',\n  /** Event type for a value change */\n  VALUE = 'value'\n}\n\nexport interface Change {\n  /** @param type - The event type */\n  type: ChangeType;\n  /** @param snapshotNode - The data */\n  snapshotNode: Node;\n  /** @param childName - The name for this child, if it's a child even */\n  childName?: string;\n  /** @param oldSnap - Used for intermediate processing of child changed events */\n  oldSnap?: Node;\n  /**  * @param prevName - The name for the previous child, if applicable */\n  prevName?: string | null;\n}\n\nexport function changeValue(snapshotNode: Node): Change {\n  return { type: ChangeType.VALUE, snapshotNode };\n}\n\nexport function changeChildAdded(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_ADDED, snapshotNode, childName };\n}\n\nexport function changeChildRemoved(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_REMOVED, snapshotNode, childName };\n}\n\nexport function changeChildChanged(\n  childName: string,\n  snapshotNode: Node,\n  oldSnap: Node\n): Change {\n  return {\n    type: ChangeType.CHILD_CHANGED,\n    snapshotNode,\n    childName,\n    oldSnap\n  };\n}\n\nexport function changeChildMoved(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_MOVED, snapshotNode, childName };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { PRIORITY_INDEX } from '../../snap/indexes/PriorityIndex';\nimport { Node } from '../../snap/Node';\nimport { Path } from '../../util/Path';\nimport {\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from '../Change';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\n\nimport { NodeFilter } from './NodeFilter';\n\n/**\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\n */\nexport class IndexedFilter implements NodeFilter {\n  constructor(private readonly index_: Index) {}\n\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    assert(\n      snap.isIndexed(this.index_),\n      'A node must be indexed if only a child is updated'\n    );\n    const oldChild = snap.getImmediateChild(key);\n    // Check if anything actually changed.\n    if (\n      oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))\n    ) {\n      // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\n      // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\n      // to avoid treating these cases as \"nothing changed.\"\n      if (oldChild.isEmpty() === newChild.isEmpty()) {\n        // Nothing changed.\n\n        // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\n        //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\n        return snap;\n      }\n    }\n\n    if (optChangeAccumulator != null) {\n      if (newChild.isEmpty()) {\n        if (snap.hasChild(key)) {\n          optChangeAccumulator.trackChildChange(\n            changeChildRemoved(key, oldChild)\n          );\n        } else {\n          assert(\n            snap.isLeafNode(),\n            'A child remove without an old child only makes sense on a leaf node'\n          );\n        }\n      } else if (oldChild.isEmpty()) {\n        optChangeAccumulator.trackChildChange(changeChildAdded(key, newChild));\n      } else {\n        optChangeAccumulator.trackChildChange(\n          changeChildChanged(key, newChild, oldChild)\n        );\n      }\n    }\n    if (snap.isLeafNode() && newChild.isEmpty()) {\n      return snap;\n    } else {\n      // Make sure the node is indexed\n      return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\n    }\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (optChangeAccumulator != null) {\n      if (!oldSnap.isLeafNode()) {\n        oldSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (!newSnap.hasChild(key)) {\n            optChangeAccumulator.trackChildChange(\n              changeChildRemoved(key, childNode)\n            );\n          }\n        });\n      }\n      if (!newSnap.isLeafNode()) {\n        newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (oldSnap.hasChild(key)) {\n            const oldChild = oldSnap.getImmediateChild(key);\n            if (!oldChild.equals(childNode)) {\n              optChangeAccumulator.trackChildChange(\n                changeChildChanged(key, childNode, oldChild)\n              );\n            }\n          } else {\n            optChangeAccumulator.trackChildChange(\n              changeChildAdded(key, childNode)\n            );\n          }\n        });\n      }\n    }\n    return newSnap.withIndex(this.index_);\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    if (oldSnap.isEmpty()) {\n      return ChildrenNode.EMPTY_NODE;\n    } else {\n      return oldSnap.updatePriority(newPriority);\n    }\n  }\n  filtersNodes(): boolean {\n    return false;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this;\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NamedNode, Node } from '../../../core/snap/Node';\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { PRIORITY_INDEX } from '../../snap/indexes/PriorityIndex';\nimport { Path } from '../../util/Path';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { QueryParams } from '../QueryParams';\n\nimport { IndexedFilter } from './IndexedFilter';\nimport { NodeFilter } from './NodeFilter';\n\n/**\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\n */\nexport class RangedFilter implements NodeFilter {\n  private indexedFilter_: IndexedFilter;\n\n  private index_: Index;\n\n  private startPost_: NamedNode;\n\n  private endPost_: NamedNode;\n\n  private startIsInclusive_: boolean;\n\n  private endIsInclusive_: boolean;\n\n  constructor(params: QueryParams) {\n    this.indexedFilter_ = new IndexedFilter(params.getIndex());\n    this.index_ = params.getIndex();\n    this.startPost_ = RangedFilter.getStartPost_(params);\n    this.endPost_ = RangedFilter.getEndPost_(params);\n    this.startIsInclusive_ = !params.startAfterSet_;\n    this.endIsInclusive_ = !params.endBeforeSet_;\n  }\n\n  getStartPost(): NamedNode {\n    return this.startPost_;\n  }\n\n  getEndPost(): NamedNode {\n    return this.endPost_;\n  }\n\n  matches(node: NamedNode): boolean {\n    const isWithinStart = this.startIsInclusive_\n      ? this.index_.compare(this.getStartPost(), node) <= 0\n      : this.index_.compare(this.getStartPost(), node) < 0;\n    const isWithinEnd = this.endIsInclusive_\n      ? this.index_.compare(node, this.getEndPost()) <= 0\n      : this.index_.compare(node, this.getEndPost()) < 0;\n    return isWithinStart && isWithinEnd;\n  }\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (!this.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    return this.indexedFilter_.updateChild(\n      snap,\n      key,\n      newChild,\n      affectedPath,\n      source,\n      optChangeAccumulator\n    );\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (newSnap.isLeafNode()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      newSnap = ChildrenNode.EMPTY_NODE;\n    }\n    let filtered = newSnap.withIndex(this.index_);\n    // Don't support priorities on queries\n    filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n    const self = this;\n    newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      if (!self.matches(new NamedNode(key, childNode))) {\n        filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\n      }\n    });\n    return this.indexedFilter_.updateFullNode(\n      oldSnap,\n      filtered,\n      optChangeAccumulator\n    );\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n  filtersNodes(): boolean {\n    return true;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this.indexedFilter_;\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  private static getStartPost_(params: QueryParams): NamedNode {\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      return params.getIndex().makePost(params.getIndexStartValue(), startName);\n    } else {\n      return params.getIndex().minPost();\n    }\n  }\n\n  private static getEndPost_(params: QueryParams): NamedNode {\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      return params.getIndex().makePost(params.getIndexEndValue(), endName);\n    } else {\n      return params.getIndex().maxPost();\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { NamedNode, Node } from '../../snap/Node';\nimport { Path } from '../../util/Path';\nimport {\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from '../Change';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { QueryParams } from '../QueryParams';\n\nimport { IndexedFilter } from './IndexedFilter';\nimport { NodeFilter } from './NodeFilter';\nimport { RangedFilter } from './RangedFilter';\n\n/**\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\n */\nexport class LimitedFilter implements NodeFilter {\n  private readonly rangedFilter_: RangedFilter;\n\n  private readonly index_: Index;\n\n  private readonly limit_: number;\n\n  private readonly reverse_: boolean;\n\n  private readonly startIsInclusive_: boolean;\n\n  private readonly endIsInclusive_: boolean;\n\n  constructor(params: QueryParams) {\n    this.rangedFilter_ = new RangedFilter(params);\n    this.index_ = params.getIndex();\n    this.limit_ = params.getLimit();\n    this.reverse_ = !params.isViewFromLeft();\n    this.startIsInclusive_ = !params.startAfterSet_;\n    this.endIsInclusive_ = !params.endBeforeSet_;\n  }\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    if (snap.getImmediateChild(key).equals(newChild)) {\n      // No change\n      return snap;\n    } else if (snap.numChildren() < this.limit_) {\n      return this.rangedFilter_\n        .getIndexedFilter()\n        .updateChild(\n          snap,\n          key,\n          newChild,\n          affectedPath,\n          source,\n          optChangeAccumulator\n        );\n    } else {\n      return this.fullLimitUpdateChild_(\n        snap,\n        key,\n        newChild,\n        source,\n        optChangeAccumulator\n      );\n    }\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    let filtered;\n    if (newSnap.isLeafNode() || newSnap.isEmpty()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n    } else {\n      if (\n        this.limit_ * 2 < newSnap.numChildren() &&\n        newSnap.isIndexed(this.index_)\n      ) {\n        // Easier to build up a snapshot, since what we're given has more than twice the elements we want\n        filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n        // anchor to the startPost, endPost, or last element as appropriate\n        let iterator;\n        if (this.reverse_) {\n          iterator = (newSnap as ChildrenNode).getReverseIteratorFrom(\n            this.rangedFilter_.getEndPost(),\n            this.index_\n          );\n        } else {\n          iterator = (newSnap as ChildrenNode).getIteratorFrom(\n            this.rangedFilter_.getStartPost(),\n            this.index_\n          );\n        }\n        let count = 0;\n        while (iterator.hasNext() && count < this.limit_) {\n          const next = iterator.getNext();\n          if (!this.withinDirectionalStart(next)) {\n            // if we have not reached the start, skip to the next element\n            continue;\n          } else if (!this.withinDirectionalEnd(next)) {\n            // if we have reached the end, stop adding elements\n            break;\n          } else {\n            filtered = filtered.updateImmediateChild(next.name, next.node);\n            count++;\n          }\n        }\n      } else {\n        // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\n        filtered = newSnap.withIndex(this.index_);\n        // Don't support priorities on queries\n        filtered = filtered.updatePriority(\n          ChildrenNode.EMPTY_NODE\n        ) as ChildrenNode;\n\n        let iterator;\n        if (this.reverse_) {\n          iterator = filtered.getReverseIterator(this.index_);\n        } else {\n          iterator = filtered.getIterator(this.index_);\n        }\n\n        let count = 0;\n        while (iterator.hasNext()) {\n          const next = iterator.getNext();\n          const inRange =\n            count < this.limit_ &&\n            this.withinDirectionalStart(next) &&\n            this.withinDirectionalEnd(next);\n          if (inRange) {\n            count++;\n          } else {\n            filtered = filtered.updateImmediateChild(\n              next.name,\n              ChildrenNode.EMPTY_NODE\n            );\n          }\n        }\n      }\n    }\n    return this.rangedFilter_\n      .getIndexedFilter()\n      .updateFullNode(oldSnap, filtered, optChangeAccumulator);\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n  filtersNodes(): boolean {\n    return true;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this.rangedFilter_.getIndexedFilter();\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  private fullLimitUpdateChild_(\n    snap: Node,\n    childKey: string,\n    childSnap: Node,\n    source: CompleteChildSource,\n    changeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    // TODO: rename all cache stuff etc to general snap terminology\n    let cmp;\n    if (this.reverse_) {\n      const indexCmp = this.index_.getCompare();\n      cmp = (a: NamedNode, b: NamedNode) => indexCmp(b, a);\n    } else {\n      cmp = this.index_.getCompare();\n    }\n    const oldEventCache = snap as ChildrenNode;\n    assert(oldEventCache.numChildren() === this.limit_, '');\n    const newChildNamedNode = new NamedNode(childKey, childSnap);\n    const windowBoundary = this.reverse_\n      ? oldEventCache.getFirstChild(this.index_)\n      : (oldEventCache.getLastChild(this.index_) as NamedNode);\n    const inRange = this.rangedFilter_.matches(newChildNamedNode);\n    if (oldEventCache.hasChild(childKey)) {\n      const oldChildSnap = oldEventCache.getImmediateChild(childKey);\n      let nextChild = source.getChildAfterChild(\n        this.index_,\n        windowBoundary,\n        this.reverse_\n      );\n      while (\n        nextChild != null &&\n        (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))\n      ) {\n        // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\n        // been applied to the limited filter yet. Ignore this next child which will be updated later in\n        // the limited filter...\n        nextChild = source.getChildAfterChild(\n          this.index_,\n          nextChild,\n          this.reverse_\n        );\n      }\n      const compareNext =\n        nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\n      const remainsInWindow =\n        inRange && !childSnap.isEmpty() && compareNext >= 0;\n      if (remainsInWindow) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildChanged(childKey, childSnap, oldChildSnap)\n          );\n        }\n        return oldEventCache.updateImmediateChild(childKey, childSnap);\n      } else {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildRemoved(childKey, oldChildSnap)\n          );\n        }\n        const newEventCache = oldEventCache.updateImmediateChild(\n          childKey,\n          ChildrenNode.EMPTY_NODE\n        );\n        const nextChildInRange =\n          nextChild != null && this.rangedFilter_.matches(nextChild);\n        if (nextChildInRange) {\n          if (changeAccumulator != null) {\n            changeAccumulator.trackChildChange(\n              changeChildAdded(nextChild.name, nextChild.node)\n            );\n          }\n          return newEventCache.updateImmediateChild(\n            nextChild.name,\n            nextChild.node\n          );\n        } else {\n          return newEventCache;\n        }\n      }\n    } else if (childSnap.isEmpty()) {\n      // we're deleting a node, but it was not in the window, so ignore it\n      return snap;\n    } else if (inRange) {\n      if (cmp(windowBoundary, newChildNamedNode) >= 0) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildRemoved(windowBoundary.name, windowBoundary.node)\n          );\n          changeAccumulator.trackChildChange(\n            changeChildAdded(childKey, childSnap)\n          );\n        }\n        return oldEventCache\n          .updateImmediateChild(childKey, childSnap)\n          .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\n      } else {\n        return snap;\n      }\n    } else {\n      return snap;\n    }\n  }\n\n  private withinDirectionalStart = (node: NamedNode) =>\n    this.reverse_ ? this.withinEndPost(node) : this.withinStartPost(node);\n\n  private withinDirectionalEnd = (node: NamedNode) =>\n    this.reverse_ ? this.withinStartPost(node) : this.withinEndPost(node);\n\n  private withinStartPost = (node: NamedNode) => {\n    const compareRes = this.index_.compare(\n      this.rangedFilter_.getStartPost(),\n      node\n    );\n    return this.startIsInclusive_ ? compareRes <= 0 : compareRes < 0;\n  };\n\n  private withinEndPost = (node: NamedNode) => {\n    const compareRes = this.index_.compare(\n      node,\n      this.rangedFilter_.getEndPost()\n    );\n    return this.endIsInclusive_ ? compareRes <= 0 : compareRes < 0;\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, stringify } from '@firebase/util';\n\nimport { Index } from '../snap/indexes/Index';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { PathIndex } from '../snap/indexes/PathIndex';\nimport { PRIORITY_INDEX, PriorityIndex } from '../snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../snap/indexes/ValueIndex';\nimport { MAX_NAME, MIN_NAME } from '../util/util';\n\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { LimitedFilter } from './filter/LimitedFilter';\nimport { NodeFilter } from './filter/NodeFilter';\nimport { RangedFilter } from './filter/RangedFilter';\n\n/**\n * Wire Protocol Constants\n */\nconst enum WIRE_PROTOCOL_CONSTANTS {\n  INDEX_START_VALUE = 'sp',\n  INDEX_START_NAME = 'sn',\n  INDEX_START_IS_INCLUSIVE = 'sin',\n  INDEX_END_VALUE = 'ep',\n  INDEX_END_NAME = 'en',\n  INDEX_END_IS_INCLUSIVE = 'ein',\n  LIMIT = 'l',\n  VIEW_FROM = 'vf',\n  VIEW_FROM_LEFT = 'l',\n  VIEW_FROM_RIGHT = 'r',\n  INDEX = 'i'\n}\n\n/**\n * REST Query Constants\n */\nconst enum REST_QUERY_CONSTANTS {\n  ORDER_BY = 'orderBy',\n  PRIORITY_INDEX = '$priority',\n  VALUE_INDEX = '$value',\n  KEY_INDEX = '$key',\n  START_AFTER = 'startAfter',\n  START_AT = 'startAt',\n  END_AT = 'endAt',\n  END_BEFORE = 'endBefore',\n  LIMIT_TO_FIRST = 'limitToFirst',\n  LIMIT_TO_LAST = 'limitToLast'\n}\n\n/**\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\n * user-facing API level, so it is not done here.\n *\n * @internal\n */\nexport class QueryParams {\n  limitSet_ = false;\n  startSet_ = false;\n  startNameSet_ = false;\n  startAfterSet_ = false; // can only be true if startSet_ is true\n  endSet_ = false;\n  endNameSet_ = false;\n  endBeforeSet_ = false; // can only be true if endSet_ is true\n  limit_ = 0;\n  viewFrom_ = '';\n  indexStartValue_: unknown | null = null;\n  indexStartName_ = '';\n  indexEndValue_: unknown | null = null;\n  indexEndName_ = '';\n  index_: PriorityIndex = PRIORITY_INDEX;\n\n  hasStart(): boolean {\n    return this.startSet_;\n  }\n\n  /**\n   * @returns True if it would return from left.\n   */\n  isViewFromLeft(): boolean {\n    if (this.viewFrom_ === '') {\n      // limit(), rather than limitToFirst or limitToLast was called.\n      // This means that only one of startSet_ and endSet_ is true. Use them\n      // to calculate which side of the view to anchor to. If neither is set,\n      // anchor to the end.\n      return this.startSet_;\n    } else {\n      return this.viewFrom_ === WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n    }\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true\n   */\n  getIndexStartValue(): unknown {\n    assert(this.startSet_, 'Only valid if start has been set');\n    return this.indexStartValue_;\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true.\n   * Returns the starting key name for the range defined by these query parameters\n   */\n  getIndexStartName(): string {\n    assert(this.startSet_, 'Only valid if start has been set');\n    if (this.startNameSet_) {\n      return this.indexStartName_;\n    } else {\n      return MIN_NAME;\n    }\n  }\n\n  hasEnd(): boolean {\n    return this.endSet_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   */\n  getIndexEndValue(): unknown {\n    assert(this.endSet_, 'Only valid if end has been set');\n    return this.indexEndValue_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   * Returns the end key name for the range defined by these query parameters\n   */\n  getIndexEndName(): string {\n    assert(this.endSet_, 'Only valid if end has been set');\n    if (this.endNameSet_) {\n      return this.indexEndName_;\n    } else {\n      return MAX_NAME;\n    }\n  }\n\n  hasLimit(): boolean {\n    return this.limitSet_;\n  }\n\n  /**\n   * @returns True if a limit has been set and it has been explicitly anchored\n   */\n  hasAnchoredLimit(): boolean {\n    return this.limitSet_ && this.viewFrom_ !== '';\n  }\n\n  /**\n   * Only valid to call if hasLimit() returns true\n   */\n  getLimit(): number {\n    assert(this.limitSet_, 'Only valid if limit has been set');\n    return this.limit_;\n  }\n\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  loadsAllData(): boolean {\n    return !(this.startSet_ || this.endSet_ || this.limitSet_);\n  }\n\n  isDefault(): boolean {\n    return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\n  }\n\n  copy(): QueryParams {\n    const copy = new QueryParams();\n    copy.limitSet_ = this.limitSet_;\n    copy.limit_ = this.limit_;\n    copy.startSet_ = this.startSet_;\n    copy.startAfterSet_ = this.startAfterSet_;\n    copy.indexStartValue_ = this.indexStartValue_;\n    copy.startNameSet_ = this.startNameSet_;\n    copy.indexStartName_ = this.indexStartName_;\n    copy.endSet_ = this.endSet_;\n    copy.endBeforeSet_ = this.endBeforeSet_;\n    copy.indexEndValue_ = this.indexEndValue_;\n    copy.endNameSet_ = this.endNameSet_;\n    copy.indexEndName_ = this.indexEndName_;\n    copy.index_ = this.index_;\n    copy.viewFrom_ = this.viewFrom_;\n    return copy;\n  }\n}\n\nexport function queryParamsGetNodeFilter(queryParams: QueryParams): NodeFilter {\n  if (queryParams.loadsAllData()) {\n    return new IndexedFilter(queryParams.getIndex());\n  } else if (queryParams.hasLimit()) {\n    return new LimitedFilter(queryParams);\n  } else {\n    return new RangedFilter(queryParams);\n  }\n}\n\nexport function queryParamsLimit(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = '';\n  return newParams;\n}\n\nexport function queryParamsLimitToFirst(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n  return newParams;\n}\n\nexport function queryParamsLimitToLast(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n  return newParams;\n}\n\nexport function queryParamsStartAt(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.startSet_ = true;\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n  newParams.indexStartValue_ = indexValue;\n  if (key != null) {\n    newParams.startNameSet_ = true;\n    newParams.indexStartName_ = key;\n  } else {\n    newParams.startNameSet_ = false;\n    newParams.indexStartName_ = '';\n  }\n  return newParams;\n}\n\nexport function queryParamsStartAfter(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  let params: QueryParams;\n  if (queryParams.index_ === KEY_INDEX || !!key) {\n    params = queryParamsStartAt(queryParams, indexValue, key);\n  } else {\n    params = queryParamsStartAt(queryParams, indexValue, MAX_NAME);\n  }\n  params.startAfterSet_ = true;\n  return params;\n}\n\nexport function queryParamsEndAt(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.endSet_ = true;\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n  newParams.indexEndValue_ = indexValue;\n  if (key !== undefined) {\n    newParams.endNameSet_ = true;\n    newParams.indexEndName_ = key;\n  } else {\n    newParams.endNameSet_ = false;\n    newParams.indexEndName_ = '';\n  }\n  return newParams;\n}\n\nexport function queryParamsEndBefore(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  let params: QueryParams;\n  if (queryParams.index_ === KEY_INDEX || !!key) {\n    params = queryParamsEndAt(queryParams, indexValue, key);\n  } else {\n    params = queryParamsEndAt(queryParams, indexValue, MIN_NAME);\n  }\n  params.endBeforeSet_ = true;\n  return params;\n}\n\nexport function queryParamsOrderBy(\n  queryParams: QueryParams,\n  index: Index\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.index_ = index;\n  return newParams;\n}\n\n/**\n * Returns a set of REST query string parameters representing this query.\n *\n * @returns query string parameters\n */\nexport function queryParamsToRestQueryStringParameters(\n  queryParams: QueryParams\n): Record<string, string | number> {\n  const qs: Record<string, string | number> = {};\n\n  if (queryParams.isDefault()) {\n    return qs;\n  }\n\n  let orderBy;\n  if (queryParams.index_ === PRIORITY_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.PRIORITY_INDEX;\n  } else if (queryParams.index_ === VALUE_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.VALUE_INDEX;\n  } else if (queryParams.index_ === KEY_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.KEY_INDEX;\n  } else {\n    assert(queryParams.index_ instanceof PathIndex, 'Unrecognized index type!');\n    orderBy = queryParams.index_.toString();\n  }\n  qs[REST_QUERY_CONSTANTS.ORDER_BY] = stringify(orderBy);\n\n  if (queryParams.startSet_) {\n    const startParam = queryParams.startAfterSet_\n      ? REST_QUERY_CONSTANTS.START_AFTER\n      : REST_QUERY_CONSTANTS.START_AT;\n    qs[startParam] = stringify(queryParams.indexStartValue_);\n    if (queryParams.startNameSet_) {\n      qs[startParam] += ',' + stringify(queryParams.indexStartName_);\n    }\n  }\n\n  if (queryParams.endSet_) {\n    const endParam = queryParams.endBeforeSet_\n      ? REST_QUERY_CONSTANTS.END_BEFORE\n      : REST_QUERY_CONSTANTS.END_AT;\n    qs[endParam] = stringify(queryParams.indexEndValue_);\n    if (queryParams.endNameSet_) {\n      qs[endParam] += ',' + stringify(queryParams.indexEndName_);\n    }\n  }\n\n  if (queryParams.limitSet_) {\n    if (queryParams.isViewFromLeft()) {\n      qs[REST_QUERY_CONSTANTS.LIMIT_TO_FIRST] = queryParams.limit_;\n    } else {\n      qs[REST_QUERY_CONSTANTS.LIMIT_TO_LAST] = queryParams.limit_;\n    }\n  }\n\n  return qs;\n}\n\nexport function queryParamsGetQueryObject(\n  queryParams: QueryParams\n): Record<string, unknown> {\n  const obj: Record<string, unknown> = {};\n  if (queryParams.startSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE] =\n      queryParams.indexStartValue_;\n    if (queryParams.startNameSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME] =\n        queryParams.indexStartName_;\n    }\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_IS_INCLUSIVE] =\n      !queryParams.startAfterSet_;\n  }\n  if (queryParams.endSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE] = queryParams.indexEndValue_;\n    if (queryParams.endNameSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME] = queryParams.indexEndName_;\n    }\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_IS_INCLUSIVE] =\n      !queryParams.endBeforeSet_;\n  }\n  if (queryParams.limitSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.LIMIT] = queryParams.limit_;\n    let viewFrom = queryParams.viewFrom_;\n    if (viewFrom === '') {\n      if (queryParams.isViewFromLeft()) {\n        viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n      } else {\n        viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n      }\n    }\n    obj[WIRE_PROTOCOL_CONSTANTS.VIEW_FROM] = viewFrom;\n  }\n  // For now, priority index is the default, so we only specify if it's some other index\n  if (queryParams.index_ !== PRIORITY_INDEX) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX] = queryParams.index_.toString();\n  }\n  return obj;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  jsonEval,\n  safeGet,\n  querystring,\n  Deferred\n} from '@firebase/util';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { logWrapper, warn } from './util/util';\nimport { QueryContext } from './view/EventRegistration';\nimport { queryParamsToRestQueryStringParameters } from './view/QueryParams';\n\n/**\n * An implementation of ServerActions that communicates with the server via REST requests.\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\n * persistent connection (using WebSockets or long-polling)\n */\nexport class ReadonlyRestClient extends ServerActions {\n  reportStats(stats: { [k: string]: unknown }): void {\n    throw new Error('Method not implemented.');\n  }\n\n  /** @private {function(...[*])} */\n  private log_: (...args: unknown[]) => void = logWrapper('p:rest:');\n\n  /**\n   * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\n   * that's been removed. :-/\n   */\n  private listens_: { [k: string]: object } = {};\n\n  static getListenId_(query: QueryContext, tag?: number | null): string {\n    if (tag !== undefined) {\n      return 'tag$' + tag;\n    } else {\n      assert(\n        query._queryParams.isDefault(),\n        \"should have a tag if it's not a default query.\"\n      );\n      return query._path.toString();\n    }\n  }\n\n  /**\n   * @param repoInfo_ - Data about the namespace we are connecting to\n   * @param onDataUpdate_ - A callback for new data from the server\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private onDataUpdate_: (\n      a: string,\n      b: unknown,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private authTokenProvider_: AuthTokenProvider,\n    private appCheckTokenProvider_: AppCheckTokenProvider\n  ) {\n    super();\n  }\n\n  /** @inheritDoc */\n  listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ) {\n    const pathString = query._path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + query._queryIdentifier);\n\n    // Mark this listener so we can tell if it's removed.\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    const thisListen = {};\n    this.listens_[listenId] = thisListen;\n\n    const queryStringParameters = queryParamsToRestQueryStringParameters(\n      query._queryParams\n    );\n\n    this.restRequest_(\n      pathString + '.json',\n      queryStringParameters,\n      (error, result) => {\n        let data = result;\n\n        if (error === 404) {\n          data = null;\n          error = null;\n        }\n\n        if (error === null) {\n          this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);\n        }\n\n        if (safeGet(this.listens_, listenId) === thisListen) {\n          let status;\n          if (!error) {\n            status = 'ok';\n          } else if (error === 401) {\n            status = 'permission_denied';\n          } else {\n            status = 'rest_error:' + error;\n          }\n\n          onComplete(status, null);\n        }\n      }\n    );\n  }\n\n  /** @inheritDoc */\n  unlisten(query: QueryContext, tag: number | null) {\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    delete this.listens_[listenId];\n  }\n\n  get(query: QueryContext): Promise<string> {\n    const queryStringParameters = queryParamsToRestQueryStringParameters(\n      query._queryParams\n    );\n\n    const pathString = query._path.toString();\n\n    const deferred = new Deferred<string>();\n\n    this.restRequest_(\n      pathString + '.json',\n      queryStringParameters,\n      (error, result) => {\n        let data = result;\n\n        if (error === 404) {\n          data = null;\n          error = null;\n        }\n\n        if (error === null) {\n          this.onDataUpdate_(\n            pathString,\n            data,\n            /*isMerge=*/ false,\n            /*tag=*/ null\n          );\n          deferred.resolve(data as string);\n        } else {\n          deferred.reject(new Error(data as string));\n        }\n      }\n    );\n    return deferred.promise;\n  }\n\n  /** @inheritDoc */\n  refreshAuthToken(token: string) {\n    // no-op since we just always call getToken.\n  }\n\n  /**\n   * Performs a REST request to the given path, with the provided query string parameters,\n   * and any auth credentials we have.\n   */\n  private restRequest_(\n    pathString: string,\n    queryStringParameters: { [k: string]: string | number } = {},\n    callback: ((a: number | null, b?: unknown) => void) | null\n  ) {\n    queryStringParameters['format'] = 'export';\n\n    return Promise.all([\n      this.authTokenProvider_.getToken(/*forceRefresh=*/ false),\n      this.appCheckTokenProvider_.getToken(/*forceRefresh=*/ false)\n    ]).then(([authToken, appCheckToken]) => {\n      if (authToken && authToken.accessToken) {\n        queryStringParameters['auth'] = authToken.accessToken;\n      }\n      if (appCheckToken && appCheckToken.token) {\n        queryStringParameters['ac'] = appCheckToken.token;\n      }\n\n      const url =\n        (this.repoInfo_.secure ? 'https://' : 'http://') +\n        this.repoInfo_.host +\n        pathString +\n        '?' +\n        'ns=' +\n        this.repoInfo_.namespace +\n        querystring(queryStringParameters);\n\n      this.log_('Sending REST request for ' + url);\n      const xhr = new XMLHttpRequest();\n      xhr.onreadystatechange = () => {\n        if (callback && xhr.readyState === 4) {\n          this.log_(\n            'REST Response for ' + url + ' received. status:',\n            xhr.status,\n            'response:',\n            xhr.responseText\n          );\n          let res = null;\n          if (xhr.status >= 200 && xhr.status < 300) {\n            try {\n              res = jsonEval(xhr.responseText);\n            } catch (e) {\n              warn(\n                'Failed to parse JSON response for ' +\n                  url +\n                  ': ' +\n                  xhr.responseText\n              );\n            }\n            callback(null, res);\n          } else {\n            // 401 and 404 are expected.\n            if (xhr.status !== 401 && xhr.status !== 404) {\n              warn(\n                'Got unsuccessful REST response for ' +\n                  url +\n                  ' Status: ' +\n                  xhr.status\n              );\n            }\n            callback(xhr.status);\n          }\n          callback = null;\n        }\n      };\n\n      xhr.open('GET', url, /*asynchronous=*/ true);\n      xhr.send();\n    });\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { Node } from './snap/Node';\nimport { Path, pathGetFront, pathIsEmpty, pathPopFront } from './util/Path';\n\n/**\n * Helper class to store a sparse set of snapshots.\n */\nexport interface SparseSnapshotTree {\n  value: Node | null;\n  readonly children: Map<string, SparseSnapshotTree>;\n}\n\nexport function newSparseSnapshotTree(): SparseSnapshotTree {\n  return {\n    value: null,\n    children: new Map()\n  };\n}\n\n/**\n * Gets the node stored at the given path if one exists.\n * Only seems to be used in tests.\n *\n * @param path - Path to look up snapshot for.\n * @returns The retrieved node, or null.\n */\nexport function sparseSnapshotTreeFind(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path\n): Node | null {\n  if (sparseSnapshotTree.value != null) {\n    return sparseSnapshotTree.value.getChild(path);\n  } else if (!pathIsEmpty(path) && sparseSnapshotTree.children.size > 0) {\n    const childKey = pathGetFront(path);\n    path = pathPopFront(path);\n    if (sparseSnapshotTree.children.has(childKey)) {\n      const childTree = sparseSnapshotTree.children.get(childKey);\n      return sparseSnapshotTreeFind(childTree, path);\n    } else {\n      return null;\n    }\n  } else {\n    return null;\n  }\n}\n\n/**\n * Stores the given node at the specified path. If there is already a node\n * at a shallower path, it merges the new data into that snapshot node.\n *\n * @param path - Path to look up snapshot for.\n * @param data - The new data, or null.\n */\nexport function sparseSnapshotTreeRemember(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path,\n  data: Node\n): void {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = data;\n    sparseSnapshotTree.children.clear();\n  } else if (sparseSnapshotTree.value !== null) {\n    sparseSnapshotTree.value = sparseSnapshotTree.value.updateChild(path, data);\n  } else {\n    const childKey = pathGetFront(path);\n    if (!sparseSnapshotTree.children.has(childKey)) {\n      sparseSnapshotTree.children.set(childKey, newSparseSnapshotTree());\n    }\n\n    const child = sparseSnapshotTree.children.get(childKey);\n    path = pathPopFront(path);\n    sparseSnapshotTreeRemember(child, path, data);\n  }\n}\n\n/**\n * Purge the data at path from the cache.\n *\n * @param path - Path to look up snapshot for.\n * @returns True if this node should now be removed.\n */\nexport function sparseSnapshotTreeForget(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path\n): boolean {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = null;\n    sparseSnapshotTree.children.clear();\n    return true;\n  } else {\n    if (sparseSnapshotTree.value !== null) {\n      if (sparseSnapshotTree.value.isLeafNode()) {\n        // We're trying to forget a node that doesn't exist\n        return false;\n      } else {\n        const value = sparseSnapshotTree.value;\n        sparseSnapshotTree.value = null;\n\n        value.forEachChild(PRIORITY_INDEX, (key, tree) => {\n          sparseSnapshotTreeRemember(sparseSnapshotTree, new Path(key), tree);\n        });\n\n        return sparseSnapshotTreeForget(sparseSnapshotTree, path);\n      }\n    } else if (sparseSnapshotTree.children.size > 0) {\n      const childKey = pathGetFront(path);\n      path = pathPopFront(path);\n      if (sparseSnapshotTree.children.has(childKey)) {\n        const safeToRemove = sparseSnapshotTreeForget(\n          sparseSnapshotTree.children.get(childKey),\n          path\n        );\n        if (safeToRemove) {\n          sparseSnapshotTree.children.delete(childKey);\n        }\n      }\n\n      return sparseSnapshotTree.children.size === 0;\n    } else {\n      return true;\n    }\n  }\n}\n\n/**\n * Recursively iterates through all of the stored tree and calls the\n * callback on each one.\n *\n * @param prefixPath - Path to look up node for.\n * @param func - The function to invoke for each tree.\n */\nexport function sparseSnapshotTreeForEachTree(\n  sparseSnapshotTree: SparseSnapshotTree,\n  prefixPath: Path,\n  func: (a: Path, b: Node) => unknown\n): void {\n  if (sparseSnapshotTree.value !== null) {\n    func(prefixPath, sparseSnapshotTree.value);\n  } else {\n    sparseSnapshotTreeForEachChild(sparseSnapshotTree, (key, tree) => {\n      const path = new Path(prefixPath.toString() + '/' + key);\n      sparseSnapshotTreeForEachTree(tree, path, func);\n    });\n  }\n}\n\n/**\n * Iterates through each immediate child and triggers the callback.\n * Only seems to be used in tests.\n *\n * @param func - The function to invoke for each child.\n */\nexport function sparseSnapshotTreeForEachChild(\n  sparseSnapshotTree: SparseSnapshotTree,\n  func: (a: string, b: SparseSnapshotTree) => void\n): void {\n  sparseSnapshotTree.children.forEach((tree, key) => {\n    func(key, tree);\n  });\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { Path } from './util/Path';\n\n/**\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\n */\nexport class SnapshotHolder {\n  private rootNode_: Node = ChildrenNode.EMPTY_NODE;\n\n  getNode(path: Path): Node {\n    return this.rootNode_.getChild(path);\n  }\n\n  updateSnapshot(path: Path, newSnapshotNode: Node) {\n    this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { each } from '../util/util';\n\nimport { StatsCollection } from './StatsCollection';\n\n/**\n * Returns the delta from the previous call to get stats.\n *\n * @param collection_ - The collection to \"listen\" to.\n */\nexport class StatsListener {\n  private last_: { [k: string]: number } | null = null;\n\n  constructor(private collection_: StatsCollection) {}\n\n  get(): { [k: string]: number } {\n    const newStats = this.collection_.get();\n\n    const delta = { ...newStats };\n    if (this.last_) {\n      each(this.last_, (stat: string, value: number) => {\n        delta[stat] = delta[stat] - value;\n      });\n    }\n    this.last_ = newStats;\n\n    return delta;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains } from '@firebase/util';\n\nimport { ServerActions } from '../ServerActions';\nimport { setTimeoutNonBlocking, each } from '../util/util';\n\nimport { StatsCollection } from './StatsCollection';\nimport { StatsListener } from './StatsListener';\n\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\n// seconds to try to ensure the Firebase connection is established / settled.\nconst FIRST_STATS_MIN_TIME = 10 * 1000;\nconst FIRST_STATS_MAX_TIME = 30 * 1000;\n\n// We'll continue to report stats on average every 5 minutes.\nconst REPORT_STATS_INTERVAL = 5 * 60 * 1000;\n\nexport class StatsReporter {\n  private statsListener_: StatsListener;\n  statsToReport_: { [k: string]: boolean } = {};\n\n  constructor(collection: StatsCollection, private server_: ServerActions) {\n    this.statsListener_ = new StatsListener(collection);\n\n    const timeout =\n      FIRST_STATS_MIN_TIME +\n      (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\n    setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\n  }\n\n  private reportStats_() {\n    const stats = this.statsListener_.get();\n    const reportedStats: typeof stats = {};\n    let haveStatsToReport = false;\n\n    each(stats, (stat: string, value: number) => {\n      if (value > 0 && contains(this.statsToReport_, stat)) {\n        reportedStats[stat] = value;\n        haveStatsToReport = true;\n      }\n    });\n\n    if (haveStatsToReport) {\n      this.server_.reportStats(reportedStats);\n    }\n\n    // queue our next run.\n    setTimeoutNonBlocking(\n      this.reportStats_.bind(this),\n      Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL)\n    );\n  }\n}\n\nexport function statsReporterIncludeStat(\n  reporter: StatsReporter,\n  stat: string\n) {\n  reporter.statsToReport_[stat] = true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\n\n/**\n *\n * @enum\n */\nexport enum OperationType {\n  OVERWRITE,\n  MERGE,\n  ACK_USER_WRITE,\n  LISTEN_COMPLETE\n}\n\n/**\n * @interface\n */\nexport interface Operation {\n  source: OperationSource;\n\n  type: OperationType;\n\n  path: Path;\n\n  operationForChild(childName: string): Operation | null;\n}\n\nexport interface OperationSource {\n  fromUser: boolean;\n  fromServer: boolean;\n  queryId: string | null;\n  tagged: boolean;\n}\n\nexport function newOperationSourceUser(): OperationSource {\n  return {\n    fromUser: true,\n    fromServer: false,\n    queryId: null,\n    tagged: false\n  };\n}\n\nexport function newOperationSourceServer(): OperationSource {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId: null,\n    tagged: false\n  };\n}\n\nexport function newOperationSourceServerTaggedQuery(\n  queryId: string\n): OperationSource {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId,\n    tagged: true\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { newEmptyPath, Path, pathIsEmpty, pathPopFront } from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\n\nexport class ListenComplete implements Operation {\n  /** @inheritDoc */\n  type = OperationType.LISTEN_COMPLETE;\n\n  constructor(public source: OperationSource, public path: Path) {}\n\n  operationForChild(childName: string): ListenComplete {\n    if (pathIsEmpty(this.path)) {\n      return new ListenComplete(this.source, newEmptyPath());\n    } else {\n      return new ListenComplete(this.source, pathPopFront(this.path));\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\nimport { newEmptyPath, Path, pathIsEmpty, pathPopFront } from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\n\nexport class Overwrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.OVERWRITE;\n\n  constructor(\n    public source: OperationSource,\n    public path: Path,\n    public snap: Node\n  ) {}\n\n  operationForChild(childName: string): Overwrite {\n    if (pathIsEmpty(this.path)) {\n      return new Overwrite(\n        this.source,\n        newEmptyPath(),\n        this.snap.getImmediateChild(childName)\n      );\n    } else {\n      return new Overwrite(this.source, pathPopFront(this.path), this.snap);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Node } from '../snap/Node';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\nimport { Overwrite } from './Overwrite';\n\nexport class Merge implements Operation {\n  /** @inheritDoc */\n  type = OperationType.MERGE;\n\n  constructor(\n    /** @inheritDoc */ public source: OperationSource,\n    /** @inheritDoc */ public path: Path,\n    /** @inheritDoc */ public children: ImmutableTree<Node>\n  ) {}\n  operationForChild(childName: string): Operation {\n    if (pathIsEmpty(this.path)) {\n      const childTree = this.children.subtree(new Path(childName));\n      if (childTree.isEmpty()) {\n        // This child is unaffected\n        return null;\n      } else if (childTree.value) {\n        // We have a snapshot for the child in question.  This becomes an overwrite of the child.\n        return new Overwrite(this.source, newEmptyPath(), childTree.value);\n      } else {\n        // This is a merge at a deeper level\n        return new Merge(this.source, newEmptyPath(), childTree);\n      }\n    } else {\n      assert(\n        pathGetFront(this.path) === childName,\n        \"Can't get a merge for a child not on the path of the operation\"\n      );\n      return new Merge(this.source, pathPopFront(this.path), this.children);\n    }\n  }\n  toString(): string {\n    return (\n      'Operation(' +\n      this.path +\n      ': ' +\n      this.source.toString() +\n      ' merge: ' +\n      this.children.toString() +\n      ')'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\nimport { Path, pathGetFront, pathIsEmpty } from '../util/Path';\n\n/**\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\n * whether a node potentially had children removed due to a filter.\n */\nexport class CacheNode {\n  constructor(\n    private node_: Node,\n    private fullyInitialized_: boolean,\n    private filtered_: boolean\n  ) {}\n\n  /**\n   * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\n   */\n  isFullyInitialized(): boolean {\n    return this.fullyInitialized_;\n  }\n\n  /**\n   * Returns whether this node is potentially missing children due to a filter applied to the node\n   */\n  isFiltered(): boolean {\n    return this.filtered_;\n  }\n\n  isCompleteForPath(path: Path): boolean {\n    if (pathIsEmpty(path)) {\n      return this.isFullyInitialized() && !this.filtered_;\n    }\n\n    const childKey = pathGetFront(path);\n    return this.isCompleteForChild(childKey);\n  }\n\n  isCompleteForChild(key: string): boolean {\n    return (\n      (this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key)\n    );\n  }\n\n  getNode(): Node {\n    return this.node_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assertionError } from '@firebase/util';\n\nimport { Index } from '../snap/indexes/Index';\nimport { NamedNode, Node } from '../snap/Node';\n\nimport { Change, ChangeType, changeChildMoved } from './Change';\nimport { Event } from './Event';\nimport { EventRegistration, QueryContext } from './EventRegistration';\n\n/**\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\n * for details.\n *\n */\nexport class EventGenerator {\n  index_: Index;\n\n  constructor(public query_: QueryContext) {\n    this.index_ = this.query_._queryParams.getIndex();\n  }\n}\n\n/**\n * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\n * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\n *\n * Notes:\n *  - child_moved events will be synthesized at this time for any child_changed events that affect\n *    our index.\n *  - prevName will be calculated based on the index ordering.\n */\nexport function eventGeneratorGenerateEventsForChanges(\n  eventGenerator: EventGenerator,\n  changes: Change[],\n  eventCache: Node,\n  eventRegistrations: EventRegistration[]\n): Event[] {\n  const events: Event[] = [];\n  const moves: Change[] = [];\n\n  changes.forEach(change => {\n    if (\n      change.type === ChangeType.CHILD_CHANGED &&\n      eventGenerator.index_.indexedValueChanged(\n        change.oldSnap as Node,\n        change.snapshotNode\n      )\n    ) {\n      moves.push(changeChildMoved(change.childName, change.snapshotNode));\n    }\n  });\n\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_REMOVED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_ADDED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_MOVED,\n    moves,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_CHANGED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.VALUE,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n\n  return events;\n}\n\n/**\n * Given changes of a single change type, generate the corresponding events.\n */\nfunction eventGeneratorGenerateEventsForType(\n  eventGenerator: EventGenerator,\n  events: Event[],\n  eventType: string,\n  changes: Change[],\n  registrations: EventRegistration[],\n  eventCache: Node\n) {\n  const filteredChanges = changes.filter(change => change.type === eventType);\n\n  filteredChanges.sort((a, b) =>\n    eventGeneratorCompareChanges(eventGenerator, a, b)\n  );\n  filteredChanges.forEach(change => {\n    const materializedChange = eventGeneratorMaterializeSingleChange(\n      eventGenerator,\n      change,\n      eventCache\n    );\n    registrations.forEach(registration => {\n      if (registration.respondsTo(change.type)) {\n        events.push(\n          registration.createEvent(materializedChange, eventGenerator.query_)\n        );\n      }\n    });\n  });\n}\n\nfunction eventGeneratorMaterializeSingleChange(\n  eventGenerator: EventGenerator,\n  change: Change,\n  eventCache: Node\n): Change {\n  if (change.type === 'value' || change.type === 'child_removed') {\n    return change;\n  } else {\n    change.prevName = eventCache.getPredecessorChildName(\n      change.childName,\n      change.snapshotNode,\n      eventGenerator.index_\n    );\n    return change;\n  }\n}\n\nfunction eventGeneratorCompareChanges(\n  eventGenerator: EventGenerator,\n  a: Change,\n  b: Change\n) {\n  if (a.childName == null || b.childName == null) {\n    throw assertionError('Should only compare child_ events.');\n  }\n  const aWrapped = new NamedNode(a.childName, a.snapshotNode);\n  const bWrapped = new NamedNode(b.childName, b.snapshotNode);\n  return eventGenerator.index_.compare(aWrapped, bWrapped);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\n\nimport { CacheNode } from './CacheNode';\n\n/**\n * Stores the data we have cached for a view.\n *\n * serverSnap is the cached server data, eventSnap is the cached event data (server data plus any local writes).\n */\nexport interface ViewCache {\n  readonly eventCache: CacheNode;\n  readonly serverCache: CacheNode;\n}\n\nexport function newViewCache(\n  eventCache: CacheNode,\n  serverCache: CacheNode\n): ViewCache {\n  return { eventCache, serverCache };\n}\n\nexport function viewCacheUpdateEventSnap(\n  viewCache: ViewCache,\n  eventSnap: Node,\n  complete: boolean,\n  filtered: boolean\n): ViewCache {\n  return newViewCache(\n    new CacheNode(eventSnap, complete, filtered),\n    viewCache.serverCache\n  );\n}\n\nexport function viewCacheUpdateServerSnap(\n  viewCache: ViewCache,\n  serverSnap: Node,\n  complete: boolean,\n  filtered: boolean\n): ViewCache {\n  return newViewCache(\n    viewCache.eventCache,\n    new CacheNode(serverSnap, complete, filtered)\n  );\n}\n\nexport function viewCacheGetCompleteEventSnap(\n  viewCache: ViewCache\n): Node | null {\n  return viewCache.eventCache.isFullyInitialized()\n    ? viewCache.eventCache.getNode()\n    : null;\n}\n\nexport function viewCacheGetCompleteServerSnap(\n  viewCache: ViewCache\n): Node | null {\n  return viewCache.serverCache.isFullyInitialized()\n    ? viewCache.serverCache.getNode()\n    : null;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  newEmptyPath,\n  Path,\n  pathChild,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from './Path';\nimport { SortedMap } from './SortedMap';\nimport { each, stringCompare } from './util';\n\nlet emptyChildrenSingleton: SortedMap<string, ImmutableTree<null>>;\n\n/**\n * Singleton empty children collection.\n *\n */\nconst EmptyChildren = (): SortedMap<string, ImmutableTree<null>> => {\n  if (!emptyChildrenSingleton) {\n    emptyChildrenSingleton = new SortedMap<string, ImmutableTree<null>>(\n      stringCompare\n    );\n  }\n  return emptyChildrenSingleton;\n};\n\n/**\n * A tree with immutable elements.\n */\nexport class ImmutableTree<T> {\n  static fromObject<T>(obj: { [k: string]: T }): ImmutableTree<T> {\n    let tree: ImmutableTree<T> = new ImmutableTree<T>(null);\n    each(obj, (childPath: string, childSnap: T) => {\n      tree = tree.set(new Path(childPath), childSnap);\n    });\n    return tree;\n  }\n\n  constructor(\n    public readonly value: T | null,\n    public readonly children: SortedMap<\n      string,\n      ImmutableTree<T>\n    > = EmptyChildren()\n  ) {}\n\n  /**\n   * True if the value is empty and there are no children\n   */\n  isEmpty(): boolean {\n    return this.value === null && this.children.isEmpty();\n  }\n\n  /**\n   * Given a path and predicate, return the first node and the path to that node\n   * where the predicate returns true.\n   *\n   * TODO Do a perf test -- If we're creating a bunch of `{path: value:}`\n   * objects on the way back out, it may be better to pass down a pathSoFar obj.\n   *\n   * @param relativePath - The remainder of the path\n   * @param predicate - The predicate to satisfy to return a node\n   */\n  findRootMostMatchingPathAndValue(\n    relativePath: Path,\n    predicate: (a: T) => boolean\n  ): { path: Path; value: T } | null {\n    if (this.value != null && predicate(this.value)) {\n      return { path: newEmptyPath(), value: this.value };\n    } else {\n      if (pathIsEmpty(relativePath)) {\n        return null;\n      } else {\n        const front = pathGetFront(relativePath);\n        const child = this.children.get(front);\n        if (child !== null) {\n          const childExistingPathAndValue =\n            child.findRootMostMatchingPathAndValue(\n              pathPopFront(relativePath),\n              predicate\n            );\n          if (childExistingPathAndValue != null) {\n            const fullPath = pathChild(\n              new Path(front),\n              childExistingPathAndValue.path\n            );\n            return { path: fullPath, value: childExistingPathAndValue.value };\n          } else {\n            return null;\n          }\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  /**\n   * Find, if it exists, the shortest subpath of the given path that points a defined\n   * value in the tree\n   */\n  findRootMostValueAndPath(\n    relativePath: Path\n  ): { path: Path; value: T } | null {\n    return this.findRootMostMatchingPathAndValue(relativePath, () => true);\n  }\n\n  /**\n   * @returns The subtree at the given path\n   */\n  subtree(relativePath: Path): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return this;\n    } else {\n      const front = pathGetFront(relativePath);\n      const childTree = this.children.get(front);\n      if (childTree !== null) {\n        return childTree.subtree(pathPopFront(relativePath));\n      } else {\n        return new ImmutableTree<T>(null);\n      }\n    }\n  }\n\n  /**\n   * Sets a value at the specified path.\n   *\n   * @param relativePath - Path to set value at.\n   * @param toSet - Value to set.\n   * @returns Resulting tree.\n   */\n  set(relativePath: Path, toSet: T | null): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return new ImmutableTree(toSet, this.children);\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front) || new ImmutableTree<T>(null);\n      const newChild = child.set(pathPopFront(relativePath), toSet);\n      const newChildren = this.children.insert(front, newChild);\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Removes the value at the specified path.\n   *\n   * @param relativePath - Path to value to remove.\n   * @returns Resulting tree.\n   */\n  remove(relativePath: Path): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      if (this.children.isEmpty()) {\n        return new ImmutableTree<T>(null);\n      } else {\n        return new ImmutableTree(null, this.children);\n      }\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front);\n      if (child) {\n        const newChild = child.remove(pathPopFront(relativePath));\n        let newChildren;\n        if (newChild.isEmpty()) {\n          newChildren = this.children.remove(front);\n        } else {\n          newChildren = this.children.insert(front, newChild);\n        }\n        if (this.value === null && newChildren.isEmpty()) {\n          return new ImmutableTree<T>(null);\n        } else {\n          return new ImmutableTree(this.value, newChildren);\n        }\n      } else {\n        return this;\n      }\n    }\n  }\n\n  /**\n   * Gets a value from the tree.\n   *\n   * @param relativePath - Path to get value for.\n   * @returns Value at path, or null.\n   */\n  get(relativePath: Path): T | null {\n    if (pathIsEmpty(relativePath)) {\n      return this.value;\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front);\n      if (child) {\n        return child.get(pathPopFront(relativePath));\n      } else {\n        return null;\n      }\n    }\n  }\n\n  /**\n   * Replace the subtree at the specified path with the given new tree.\n   *\n   * @param relativePath - Path to replace subtree for.\n   * @param newTree - New tree.\n   * @returns Resulting tree.\n   */\n  setTree(relativePath: Path, newTree: ImmutableTree<T>): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return newTree;\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front) || new ImmutableTree<T>(null);\n      const newChild = child.setTree(pathPopFront(relativePath), newTree);\n      let newChildren;\n      if (newChild.isEmpty()) {\n        newChildren = this.children.remove(front);\n      } else {\n        newChildren = this.children.insert(front, newChild);\n      }\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Performs a depth first fold on this tree. Transforms a tree into a single\n   * value, given a function that operates on the path to a node, an optional\n   * current value, and a map of child names to folded subtrees\n   */\n  fold<V>(fn: (path: Path, value: T, children: { [k: string]: V }) => V): V {\n    return this.fold_(newEmptyPath(), fn);\n  }\n\n  /**\n   * Recursive helper for public-facing fold() method\n   */\n  private fold_<V>(\n    pathSoFar: Path,\n    fn: (path: Path, value: T | null, children: { [k: string]: V }) => V\n  ): V {\n    const accum: { [k: string]: V } = {};\n    this.children.inorderTraversal(\n      (childKey: string, childTree: ImmutableTree<T>) => {\n        accum[childKey] = childTree.fold_(pathChild(pathSoFar, childKey), fn);\n      }\n    );\n    return fn(pathSoFar, this.value, accum);\n  }\n\n  /**\n   * Find the first matching value on the given path. Return the result of applying f to it.\n   */\n  findOnPath<V>(path: Path, f: (path: Path, value: T) => V | null): V | null {\n    return this.findOnPath_(path, newEmptyPath(), f);\n  }\n\n  private findOnPath_<V>(\n    pathToFollow: Path,\n    pathSoFar: Path,\n    f: (path: Path, value: T) => V | null\n  ): V | null {\n    const result = this.value ? f(pathSoFar, this.value) : false;\n    if (result) {\n      return result;\n    } else {\n      if (pathIsEmpty(pathToFollow)) {\n        return null;\n      } else {\n        const front = pathGetFront(pathToFollow)!;\n        const nextChild = this.children.get(front);\n        if (nextChild) {\n          return nextChild.findOnPath_(\n            pathPopFront(pathToFollow),\n            pathChild(pathSoFar, front),\n            f\n          );\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  foreachOnPath(\n    path: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    return this.foreachOnPath_(path, newEmptyPath(), f);\n  }\n\n  private foreachOnPath_(\n    pathToFollow: Path,\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    if (pathIsEmpty(pathToFollow)) {\n      return this;\n    } else {\n      if (this.value) {\n        f(currentRelativePath, this.value);\n      }\n      const front = pathGetFront(pathToFollow);\n      const nextChild = this.children.get(front);\n      if (nextChild) {\n        return nextChild.foreachOnPath_(\n          pathPopFront(pathToFollow),\n          pathChild(currentRelativePath, front),\n          f\n        );\n      } else {\n        return new ImmutableTree<T>(null);\n      }\n    }\n  }\n\n  /**\n   * Calls the given function for each node in the tree that has a value.\n   *\n   * @param f - A function to be called with the path from the root of the tree to\n   * a node, and the value at that node. Called in depth-first order.\n   */\n  foreach(f: (path: Path, value: T) => void) {\n    this.foreach_(newEmptyPath(), f);\n  }\n\n  private foreach_(\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ) {\n    this.children.inorderTraversal((childName, childTree) => {\n      childTree.foreach_(pathChild(currentRelativePath, childName), f);\n    });\n    if (this.value) {\n      f(currentRelativePath, this.value);\n    }\n  }\n\n  foreachChild(f: (name: string, value: T) => void) {\n    this.children.inorderTraversal(\n      (childName: string, childTree: ImmutableTree<T>) => {\n        if (childTree.value) {\n          f(childName, childTree.value);\n        }\n      }\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { NamedNode, Node } from './snap/Node';\nimport { ImmutableTree } from './util/ImmutableTree';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathIsEmpty\n} from './util/Path';\nimport { each } from './util/util';\n\n/**\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\n * to reflect the write added.\n */\nexport class CompoundWrite {\n  constructor(public writeTree_: ImmutableTree<Node>) {}\n\n  static empty(): CompoundWrite {\n    return new CompoundWrite(new ImmutableTree(null));\n  }\n}\n\nexport function compoundWriteAddWrite(\n  compoundWrite: CompoundWrite,\n  path: Path,\n  node: Node\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return new CompoundWrite(new ImmutableTree(node));\n  } else {\n    const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n    if (rootmost != null) {\n      const rootMostPath = rootmost.path;\n      let value = rootmost.value;\n      const relativePath = newRelativePath(rootMostPath, path);\n      value = value.updateChild(relativePath, node);\n      return new CompoundWrite(\n        compoundWrite.writeTree_.set(rootMostPath, value)\n      );\n    } else {\n      const subtree = new ImmutableTree(node);\n      const newWriteTree = compoundWrite.writeTree_.setTree(path, subtree);\n      return new CompoundWrite(newWriteTree);\n    }\n  }\n}\n\nexport function compoundWriteAddWrites(\n  compoundWrite: CompoundWrite,\n  path: Path,\n  updates: { [name: string]: Node }\n): CompoundWrite {\n  let newWrite = compoundWrite;\n  each(updates, (childKey: string, node: Node) => {\n    newWrite = compoundWriteAddWrite(newWrite, pathChild(path, childKey), node);\n  });\n  return newWrite;\n}\n\n/**\n * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\n * location, which must be removed by calling this method with that path.\n *\n * @param compoundWrite - The CompoundWrite to remove.\n * @param path - The path at which a write and all deeper writes should be removed\n * @returns The new CompoundWrite with the removed path\n */\nexport function compoundWriteRemoveWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return CompoundWrite.empty();\n  } else {\n    const newWriteTree = compoundWrite.writeTree_.setTree(\n      path,\n      new ImmutableTree<Node>(null)\n    );\n    return new CompoundWrite(newWriteTree);\n  }\n}\n\n/**\n * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\n * considered \"complete\".\n *\n * @param compoundWrite - The CompoundWrite to check.\n * @param path - The path to check for\n * @returns Whether there is a complete write at that path\n */\nexport function compoundWriteHasCompleteWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): boolean {\n  return compoundWriteGetCompleteNode(compoundWrite, path) != null;\n}\n\n/**\n * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\n * writes from deeper paths, but will return child nodes from a more shallow path.\n *\n * @param compoundWrite - The CompoundWrite to get the node from.\n * @param path - The path to get a complete write\n * @returns The node if complete at that path, or null otherwise.\n */\nexport function compoundWriteGetCompleteNode(\n  compoundWrite: CompoundWrite,\n  path: Path\n): Node | null {\n  const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n  if (rootmost != null) {\n    return compoundWrite.writeTree_\n      .get(rootmost.path)\n      .getChild(newRelativePath(rootmost.path, path));\n  } else {\n    return null;\n  }\n}\n\n/**\n * Returns all children that are guaranteed to be a complete overwrite.\n *\n * @param compoundWrite - The CompoundWrite to get children from.\n * @returns A list of all complete children.\n */\nexport function compoundWriteGetCompleteChildren(\n  compoundWrite: CompoundWrite\n): NamedNode[] {\n  const children: NamedNode[] = [];\n  const node = compoundWrite.writeTree_.value;\n  if (node != null) {\n    // If it's a leaf node, it has no children; so nothing to do.\n    if (!node.isLeafNode()) {\n      (node as ChildrenNode).forEachChild(\n        PRIORITY_INDEX,\n        (childName, childNode) => {\n          children.push(new NamedNode(childName, childNode));\n        }\n      );\n    }\n  } else {\n    compoundWrite.writeTree_.children.inorderTraversal(\n      (childName, childTree) => {\n        if (childTree.value != null) {\n          children.push(new NamedNode(childName, childTree.value));\n        }\n      }\n    );\n  }\n  return children;\n}\n\nexport function compoundWriteChildCompoundWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return compoundWrite;\n  } else {\n    const shadowingNode = compoundWriteGetCompleteNode(compoundWrite, path);\n    if (shadowingNode != null) {\n      return new CompoundWrite(new ImmutableTree(shadowingNode));\n    } else {\n      return new CompoundWrite(compoundWrite.writeTree_.subtree(path));\n    }\n  }\n}\n\n/**\n * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\n * @returns Whether this CompoundWrite is empty\n */\nexport function compoundWriteIsEmpty(compoundWrite: CompoundWrite): boolean {\n  return compoundWrite.writeTree_.isEmpty();\n}\n\n/**\n * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\n * node\n * @param node - The node to apply this CompoundWrite to\n * @returns The node with all writes applied\n */\nexport function compoundWriteApply(\n  compoundWrite: CompoundWrite,\n  node: Node\n): Node {\n  return applySubtreeWrite(newEmptyPath(), compoundWrite.writeTree_, node);\n}\n\nfunction applySubtreeWrite(\n  relativePath: Path,\n  writeTree: ImmutableTree<Node>,\n  node: Node\n): Node {\n  if (writeTree.value != null) {\n    // Since there a write is always a leaf, we're done here\n    return node.updateChild(relativePath, writeTree.value);\n  } else {\n    let priorityWrite = null;\n    writeTree.children.inorderTraversal((childKey, childTree) => {\n      if (childKey === '.priority') {\n        // Apply priorities at the end so we don't update priorities for either empty nodes or forget\n        // to apply priorities to empty nodes that are later filled\n        assert(\n          childTree.value !== null,\n          'Priority writes must always be leaf nodes'\n        );\n        priorityWrite = childTree.value;\n      } else {\n        node = applySubtreeWrite(\n          pathChild(relativePath, childKey),\n          childTree,\n          node\n        );\n      }\n    });\n    // If there was a priority write, we only apply it if the node is not empty\n    if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) {\n      node = node.updateChild(\n        pathChild(relativePath, '.priority'),\n        priorityWrite\n      );\n    }\n    return node;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError, safeGet } from '@firebase/util';\n\nimport {\n  CompoundWrite,\n  compoundWriteAddWrite,\n  compoundWriteAddWrites,\n  compoundWriteApply,\n  compoundWriteChildCompoundWrite,\n  compoundWriteGetCompleteChildren,\n  compoundWriteGetCompleteNode,\n  compoundWriteHasCompleteWrite,\n  compoundWriteIsEmpty,\n  compoundWriteRemoveWrite\n} from './CompoundWrite';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Index } from './snap/indexes/Index';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { NamedNode, Node } from './snap/Node';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathContains,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from './util/Path';\nimport { each } from './util/util';\nimport { CacheNode } from './view/CacheNode';\n\n/**\n * Defines a single user-initiated write operation. May be the result of a set(), transaction(), or update() call. In\n * the case of a set() or transaction, snap wil be non-null.  In the case of an update(), children will be non-null.\n */\nexport interface WriteRecord {\n  writeId: number;\n  path: Path;\n  snap?: Node | null;\n  children?: { [k: string]: Node } | null;\n  visible: boolean;\n}\n\n/**\n * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\n *\n */\nexport function writeTreeChildWrites(\n  writeTree: WriteTree,\n  path: Path\n): WriteTreeRef {\n  return newWriteTreeRef(path, writeTree);\n}\n\n/**\n * Record a new overwrite from user code.\n *\n * @param visible - This is set to false by some transactions. It should be excluded from event caches\n */\nexport function writeTreeAddOverwrite(\n  writeTree: WriteTree,\n  path: Path,\n  snap: Node,\n  writeId: number,\n  visible?: boolean\n) {\n  assert(\n    writeId > writeTree.lastWriteId,\n    'Stacking an older write on top of newer ones'\n  );\n  if (visible === undefined) {\n    visible = true;\n  }\n  writeTree.allWrites.push({\n    path,\n    snap,\n    writeId,\n    visible\n  });\n\n  if (visible) {\n    writeTree.visibleWrites = compoundWriteAddWrite(\n      writeTree.visibleWrites,\n      path,\n      snap\n    );\n  }\n  writeTree.lastWriteId = writeId;\n}\n\n/**\n * Record a new merge from user code.\n */\nexport function writeTreeAddMerge(\n  writeTree: WriteTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  writeId: number\n) {\n  assert(\n    writeId > writeTree.lastWriteId,\n    'Stacking an older merge on top of newer ones'\n  );\n  writeTree.allWrites.push({\n    path,\n    children: changedChildren,\n    writeId,\n    visible: true\n  });\n\n  writeTree.visibleWrites = compoundWriteAddWrites(\n    writeTree.visibleWrites,\n    path,\n    changedChildren\n  );\n  writeTree.lastWriteId = writeId;\n}\n\nexport function writeTreeGetWrite(\n  writeTree: WriteTree,\n  writeId: number\n): WriteRecord | null {\n  for (let i = 0; i < writeTree.allWrites.length; i++) {\n    const record = writeTree.allWrites[i];\n    if (record.writeId === writeId) {\n      return record;\n    }\n  }\n  return null;\n}\n\n/**\n * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\n * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\n *\n * @returns true if the write may have been visible (meaning we'll need to reevaluate / raise\n * events as a result).\n */\nexport function writeTreeRemoveWrite(\n  writeTree: WriteTree,\n  writeId: number\n): boolean {\n  // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\n  // out of order.\n  //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\n  //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\n\n  const idx = writeTree.allWrites.findIndex(s => {\n    return s.writeId === writeId;\n  });\n  assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\n  const writeToRemove = writeTree.allWrites[idx];\n  writeTree.allWrites.splice(idx, 1);\n\n  let removedWriteWasVisible = writeToRemove.visible;\n  let removedWriteOverlapsWithOtherWrites = false;\n\n  let i = writeTree.allWrites.length - 1;\n\n  while (removedWriteWasVisible && i >= 0) {\n    const currentWrite = writeTree.allWrites[i];\n    if (currentWrite.visible) {\n      if (\n        i >= idx &&\n        writeTreeRecordContainsPath_(currentWrite, writeToRemove.path)\n      ) {\n        // The removed write was completely shadowed by a subsequent write.\n        removedWriteWasVisible = false;\n      } else if (pathContains(writeToRemove.path, currentWrite.path)) {\n        // Either we're covering some writes or they're covering part of us (depending on which came first).\n        removedWriteOverlapsWithOtherWrites = true;\n      }\n    }\n    i--;\n  }\n\n  if (!removedWriteWasVisible) {\n    return false;\n  } else if (removedWriteOverlapsWithOtherWrites) {\n    // There's some shadowing going on. Just rebuild the visible writes from scratch.\n    writeTreeResetTree_(writeTree);\n    return true;\n  } else {\n    // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\n    if (writeToRemove.snap) {\n      writeTree.visibleWrites = compoundWriteRemoveWrite(\n        writeTree.visibleWrites,\n        writeToRemove.path\n      );\n    } else {\n      const children = writeToRemove.children;\n      each(children, (childName: string) => {\n        writeTree.visibleWrites = compoundWriteRemoveWrite(\n          writeTree.visibleWrites,\n          pathChild(writeToRemove.path, childName)\n        );\n      });\n    }\n    return true;\n  }\n}\n\nfunction writeTreeRecordContainsPath_(\n  writeRecord: WriteRecord,\n  path: Path\n): boolean {\n  if (writeRecord.snap) {\n    return pathContains(writeRecord.path, path);\n  } else {\n    for (const childName in writeRecord.children) {\n      if (\n        writeRecord.children.hasOwnProperty(childName) &&\n        pathContains(pathChild(writeRecord.path, childName), path)\n      ) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n\n/**\n * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\n */\nfunction writeTreeResetTree_(writeTree: WriteTree) {\n  writeTree.visibleWrites = writeTreeLayerTree_(\n    writeTree.allWrites,\n    writeTreeDefaultFilter_,\n    newEmptyPath()\n  );\n  if (writeTree.allWrites.length > 0) {\n    writeTree.lastWriteId =\n      writeTree.allWrites[writeTree.allWrites.length - 1].writeId;\n  } else {\n    writeTree.lastWriteId = -1;\n  }\n}\n\n/**\n * The default filter used when constructing the tree. Keep everything that's visible.\n */\nfunction writeTreeDefaultFilter_(write: WriteRecord) {\n  return write.visible;\n}\n\n/**\n * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\n * event data at that path.\n */\nfunction writeTreeLayerTree_(\n  writes: WriteRecord[],\n  filter: (w: WriteRecord) => boolean,\n  treeRoot: Path\n): CompoundWrite {\n  let compoundWrite = CompoundWrite.empty();\n  for (let i = 0; i < writes.length; ++i) {\n    const write = writes[i];\n    // Theory, a later set will either:\n    // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\n    // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\n    if (filter(write)) {\n      const writePath = write.path;\n      let relativePath: Path;\n      if (write.snap) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrite(\n            compoundWrite,\n            relativePath,\n            write.snap\n          );\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n          compoundWrite = compoundWriteAddWrite(\n            compoundWrite,\n            newEmptyPath(),\n            write.snap.getChild(relativePath)\n          );\n        } else {\n          // There is no overlap between root path and write path, ignore write\n        }\n      } else if (write.children) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrites(\n            compoundWrite,\n            relativePath,\n            write.children\n          );\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n          if (pathIsEmpty(relativePath)) {\n            compoundWrite = compoundWriteAddWrites(\n              compoundWrite,\n              newEmptyPath(),\n              write.children\n            );\n          } else {\n            const child = safeGet(write.children, pathGetFront(relativePath));\n            if (child) {\n              // There exists a child in this node that matches the root path\n              const deepNode = child.getChild(pathPopFront(relativePath));\n              compoundWrite = compoundWriteAddWrite(\n                compoundWrite,\n                newEmptyPath(),\n                deepNode\n              );\n            }\n          }\n        } else {\n          // There is no overlap between root path and write path, ignore write\n        }\n      } else {\n        throw assertionError('WriteRecord should have .snap or .children');\n      }\n    }\n  }\n  return compoundWrite;\n}\n\n/**\n * Return a complete snapshot for the given path if there's visible write data at that path, else null.\n * No server data is considered.\n *\n */\nexport function writeTreeGetCompleteWriteData(\n  writeTree: WriteTree,\n  path: Path\n): Node | null {\n  return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n}\n\n/**\n * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\n * writes), attempt to calculate a complete snapshot for the given path\n *\n * @param writeIdsToExclude - An optional set to be excluded\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\n */\nexport function writeTreeCalcCompleteEventCache(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerCache: Node | null,\n  writeIdsToExclude?: number[],\n  includeHiddenWrites?: boolean\n): Node | null {\n  if (!writeIdsToExclude && !includeHiddenWrites) {\n    const shadowingNode = compoundWriteGetCompleteNode(\n      writeTree.visibleWrites,\n      treePath\n    );\n    if (shadowingNode != null) {\n      return shadowingNode;\n    } else {\n      const subMerge = compoundWriteChildCompoundWrite(\n        writeTree.visibleWrites,\n        treePath\n      );\n      if (compoundWriteIsEmpty(subMerge)) {\n        return completeServerCache;\n      } else if (\n        completeServerCache == null &&\n        !compoundWriteHasCompleteWrite(subMerge, newEmptyPath())\n      ) {\n        // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\n        return null;\n      } else {\n        const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(subMerge, layeredCache);\n      }\n    }\n  } else {\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    if (!includeHiddenWrites && compoundWriteIsEmpty(merge)) {\n      return completeServerCache;\n    } else {\n      // If the server cache is null, and we don't have a complete cache, we need to return null\n      if (\n        !includeHiddenWrites &&\n        completeServerCache == null &&\n        !compoundWriteHasCompleteWrite(merge, newEmptyPath())\n      ) {\n        return null;\n      } else {\n        const filter = function (write: WriteRecord) {\n          return (\n            (write.visible || includeHiddenWrites) &&\n            (!writeIdsToExclude ||\n              !~writeIdsToExclude.indexOf(write.writeId)) &&\n            (pathContains(write.path, treePath) ||\n              pathContains(treePath, write.path))\n          );\n        };\n        const mergeAtPath = writeTreeLayerTree_(\n          writeTree.allWrites,\n          filter,\n          treePath\n        );\n        const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(mergeAtPath, layeredCache);\n      }\n    }\n  }\n}\n\n/**\n * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\n * Used when creating new views, to pre-fill their complete event children snapshot.\n */\nexport function writeTreeCalcCompleteEventChildren(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerChildren: ChildrenNode | null\n) {\n  let completeChildren = ChildrenNode.EMPTY_NODE as Node;\n  const topLevelSet = compoundWriteGetCompleteNode(\n    writeTree.visibleWrites,\n    treePath\n  );\n  if (topLevelSet) {\n    if (!topLevelSet.isLeafNode()) {\n      // we're shadowing everything. Return the children.\n      topLevelSet.forEachChild(PRIORITY_INDEX, (childName, childSnap) => {\n        completeChildren = completeChildren.updateImmediateChild(\n          childName,\n          childSnap\n        );\n      });\n    }\n    return completeChildren;\n  } else if (completeServerChildren) {\n    // Layer any children we have on top of this\n    // We know we don't have a top-level set, so just enumerate existing children\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    completeServerChildren.forEachChild(\n      PRIORITY_INDEX,\n      (childName, childNode) => {\n        const node = compoundWriteApply(\n          compoundWriteChildCompoundWrite(merge, new Path(childName)),\n          childNode\n        );\n        completeChildren = completeChildren.updateImmediateChild(\n          childName,\n          node\n        );\n      }\n    );\n    // Add any complete children we have from the set\n    compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n      completeChildren = completeChildren.updateImmediateChild(\n        namedNode.name,\n        namedNode.node\n      );\n    });\n    return completeChildren;\n  } else {\n    // We don't have anything to layer on top of. Layer on any children we have\n    // Note that we can return an empty snap if we have a defined delete\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n      completeChildren = completeChildren.updateImmediateChild(\n        namedNode.name,\n        namedNode.node\n      );\n    });\n    return completeChildren;\n  }\n}\n\n/**\n * Given that the underlying server data has updated, determine what, if anything, needs to be\n * applied to the event cache.\n *\n * Possibilities:\n *\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n *\n * 2. Some write is completely shadowing. No events to be raised\n *\n * 3. Is partially shadowed. Events\n *\n * Either existingEventSnap or existingServerSnap must exist\n */\nexport function writeTreeCalcEventCacheAfterServerOverwrite(\n  writeTree: WriteTree,\n  treePath: Path,\n  childPath: Path,\n  existingEventSnap: Node | null,\n  existingServerSnap: Node | null\n): Node | null {\n  assert(\n    existingEventSnap || existingServerSnap,\n    'Either existingEventSnap or existingServerSnap must exist'\n  );\n  const path = pathChild(treePath, childPath);\n  if (compoundWriteHasCompleteWrite(writeTree.visibleWrites, path)) {\n    // At this point we can probably guarantee that we're in case 2, meaning no events\n    // May need to check visibility while doing the findRootMostValueAndPath call\n    return null;\n  } else {\n    // No complete shadowing. We're either partially shadowing or not shadowing at all.\n    const childMerge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      path\n    );\n    if (compoundWriteIsEmpty(childMerge)) {\n      // We're not shadowing at all. Case 1\n      return existingServerSnap.getChild(childPath);\n    } else {\n      // This could be more efficient if the serverNode + updates doesn't change the eventSnap\n      // However this is tricky to find out, since user updates don't necessary change the server\n      // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\n      // adds nodes, but doesn't change any existing writes. It is therefore not enough to\n      // only check if the updates change the serverNode.\n      // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\n      return compoundWriteApply(\n        childMerge,\n        existingServerSnap.getChild(childPath)\n      );\n    }\n  }\n}\n\n/**\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\n * complete child for this ChildKey.\n */\nexport function writeTreeCalcCompleteChild(\n  writeTree: WriteTree,\n  treePath: Path,\n  childKey: string,\n  existingServerSnap: CacheNode\n): Node | null {\n  const path = pathChild(treePath, childKey);\n  const shadowingNode = compoundWriteGetCompleteNode(\n    writeTree.visibleWrites,\n    path\n  );\n  if (shadowingNode != null) {\n    return shadowingNode;\n  } else {\n    if (existingServerSnap.isCompleteForChild(childKey)) {\n      const childMerge = compoundWriteChildCompoundWrite(\n        writeTree.visibleWrites,\n        path\n      );\n      return compoundWriteApply(\n        childMerge,\n        existingServerSnap.getNode().getImmediateChild(childKey)\n      );\n    } else {\n      return null;\n    }\n  }\n}\n\n/**\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n * a higher path, this will return the child of that write relative to the write and this path.\n * Returns null if there is no write at this path.\n */\nexport function writeTreeShadowingWrite(\n  writeTree: WriteTree,\n  path: Path\n): Node | null {\n  return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n}\n\n/**\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n * the window, but may now be in the window.\n */\nexport function writeTreeCalcIndexedSlice(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerData: Node | null,\n  startPost: NamedNode,\n  count: number,\n  reverse: boolean,\n  index: Index\n): NamedNode[] {\n  let toIterate: Node;\n  const merge = compoundWriteChildCompoundWrite(\n    writeTree.visibleWrites,\n    treePath\n  );\n  const shadowingNode = compoundWriteGetCompleteNode(merge, newEmptyPath());\n  if (shadowingNode != null) {\n    toIterate = shadowingNode;\n  } else if (completeServerData != null) {\n    toIterate = compoundWriteApply(merge, completeServerData);\n  } else {\n    // no children to iterate on\n    return [];\n  }\n  toIterate = toIterate.withIndex(index);\n  if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\n    const nodes = [];\n    const cmp = index.getCompare();\n    const iter = reverse\n      ? (toIterate as ChildrenNode).getReverseIteratorFrom(startPost, index)\n      : (toIterate as ChildrenNode).getIteratorFrom(startPost, index);\n    let next = iter.getNext();\n    while (next && nodes.length < count) {\n      if (cmp(next, startPost) !== 0) {\n        nodes.push(next);\n      }\n      next = iter.getNext();\n    }\n    return nodes;\n  } else {\n    return [];\n  }\n}\n\nexport function newWriteTree(): WriteTree {\n  return {\n    visibleWrites: CompoundWrite.empty(),\n    allWrites: [],\n    lastWriteId: -1\n  };\n}\n\n/**\n * WriteTree tracks all pending user-initiated writes and has methods to calculate the result of merging them\n * with underlying server data (to create \"event cache\" data).  Pending writes are added with addOverwrite()\n * and addMerge(), and removed with removeWrite().\n */\nexport interface WriteTree {\n  /**\n   * A tree tracking the result of applying all visible writes.  This does not include transactions with\n   * applyLocally=false or writes that are completely shadowed by other writes.\n   */\n  visibleWrites: CompoundWrite;\n\n  /**\n   * A list of all pending writes, regardless of visibility and shadowed-ness.  Used to calculate arbitrary\n   * sets of the changed data, such as hidden writes (from transactions) or changes with certain writes excluded (also\n   * used by transactions).\n   */\n  allWrites: WriteRecord[];\n\n  lastWriteId: number;\n}\n\n/**\n * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\n * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\n * can lead to a more expensive calculation.\n *\n * @param writeIdsToExclude - Optional writes to exclude.\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\n */\nexport function writeTreeRefCalcCompleteEventCache(\n  writeTreeRef: WriteTreeRef,\n  completeServerCache: Node | null,\n  writeIdsToExclude?: number[],\n  includeHiddenWrites?: boolean\n): Node | null {\n  return writeTreeCalcCompleteEventCache(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerCache,\n    writeIdsToExclude,\n    includeHiddenWrites\n  );\n}\n\n/**\n * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\n * mix of the given server data and write data.\n *\n */\nexport function writeTreeRefCalcCompleteEventChildren(\n  writeTreeRef: WriteTreeRef,\n  completeServerChildren: ChildrenNode | null\n): ChildrenNode {\n  return writeTreeCalcCompleteEventChildren(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerChildren\n  ) as ChildrenNode;\n}\n\n/**\n * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\n * if anything, needs to be applied to the event cache.\n *\n * Possibilities:\n *\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n *\n * 2. Some write is completely shadowing. No events to be raised\n *\n * 3. Is partially shadowed. Events should be raised\n *\n * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\n *\n *\n */\nexport function writeTreeRefCalcEventCacheAfterServerOverwrite(\n  writeTreeRef: WriteTreeRef,\n  path: Path,\n  existingEventSnap: Node | null,\n  existingServerSnap: Node | null\n): Node | null {\n  return writeTreeCalcEventCacheAfterServerOverwrite(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    path,\n    existingEventSnap,\n    existingServerSnap\n  );\n}\n\n/**\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n * a higher path, this will return the child of that write relative to the write and this path.\n * Returns null if there is no write at this path.\n *\n */\nexport function writeTreeRefShadowingWrite(\n  writeTreeRef: WriteTreeRef,\n  path: Path\n): Node | null {\n  return writeTreeShadowingWrite(\n    writeTreeRef.writeTree,\n    pathChild(writeTreeRef.treePath, path)\n  );\n}\n\n/**\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n * the window, but may now be in the window\n */\nexport function writeTreeRefCalcIndexedSlice(\n  writeTreeRef: WriteTreeRef,\n  completeServerData: Node | null,\n  startPost: NamedNode,\n  count: number,\n  reverse: boolean,\n  index: Index\n): NamedNode[] {\n  return writeTreeCalcIndexedSlice(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerData,\n    startPost,\n    count,\n    reverse,\n    index\n  );\n}\n\n/**\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\n * complete child for this ChildKey.\n */\nexport function writeTreeRefCalcCompleteChild(\n  writeTreeRef: WriteTreeRef,\n  childKey: string,\n  existingServerCache: CacheNode\n): Node | null {\n  return writeTreeCalcCompleteChild(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    childKey,\n    existingServerCache\n  );\n}\n\n/**\n * Return a WriteTreeRef for a child.\n */\nexport function writeTreeRefChild(\n  writeTreeRef: WriteTreeRef,\n  childName: string\n): WriteTreeRef {\n  return newWriteTreeRef(\n    pathChild(writeTreeRef.treePath, childName),\n    writeTreeRef.writeTree\n  );\n}\n\nexport function newWriteTreeRef(\n  path: Path,\n  writeTree: WriteTree\n): WriteTreeRef {\n  return {\n    treePath: path,\n    writeTree\n  };\n}\n\n/**\n * A WriteTreeRef wraps a WriteTree and a path, for convenient access to a particular subtree.  All of the methods\n * just proxy to the underlying WriteTree.\n *\n */\nexport interface WriteTreeRef {\n  /**\n   * The path to this particular write tree ref. Used for calling methods on writeTree_ while exposing a simpler\n   * interface to callers.\n   */\n  readonly treePath: Path;\n\n  /**\n   * * A reference to the actual tree of write data. All methods are pass-through to the tree, but with the appropriate\n   * path prefixed.\n   *\n   * This lets us make cheap references to points in the tree for sync points without having to copy and maintain all of\n   * the data.\n   */\n  readonly writeTree: WriteTree;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport {\n  Change,\n  ChangeType,\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from './Change';\n\nexport class ChildChangeAccumulator {\n  private readonly changeMap: Map<string, Change> = new Map();\n\n  trackChildChange(change: Change) {\n    const type = change.type;\n    const childKey = change.childName!;\n    assert(\n      type === ChangeType.CHILD_ADDED ||\n        type === ChangeType.CHILD_CHANGED ||\n        type === ChangeType.CHILD_REMOVED,\n      'Only child changes supported for tracking'\n    );\n    assert(\n      childKey !== '.priority',\n      'Only non-priority child changes can be tracked.'\n    );\n    const oldChange = this.changeMap.get(childKey);\n    if (oldChange) {\n      const oldType = oldChange.type;\n      if (\n        type === ChangeType.CHILD_ADDED &&\n        oldType === ChangeType.CHILD_REMOVED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildChanged(\n            childKey,\n            change.snapshotNode,\n            oldChange.snapshotNode\n          )\n        );\n      } else if (\n        type === ChangeType.CHILD_REMOVED &&\n        oldType === ChangeType.CHILD_ADDED\n      ) {\n        this.changeMap.delete(childKey);\n      } else if (\n        type === ChangeType.CHILD_REMOVED &&\n        oldType === ChangeType.CHILD_CHANGED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildRemoved(childKey, oldChange.oldSnap)\n        );\n      } else if (\n        type === ChangeType.CHILD_CHANGED &&\n        oldType === ChangeType.CHILD_ADDED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildAdded(childKey, change.snapshotNode)\n        );\n      } else if (\n        type === ChangeType.CHILD_CHANGED &&\n        oldType === ChangeType.CHILD_CHANGED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildChanged(childKey, change.snapshotNode, oldChange.oldSnap)\n        );\n      } else {\n        throw assertionError(\n          'Illegal combination of changes: ' +\n            change +\n            ' occurred after ' +\n            oldChange\n        );\n      }\n    } else {\n      this.changeMap.set(childKey, change);\n    }\n  }\n\n  getChanges(): Change[] {\n    return Array.from(this.changeMap.values());\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Index } from '../snap/indexes/Index';\nimport { NamedNode, Node } from '../snap/Node';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteChild,\n  writeTreeRefCalcIndexedSlice\n} from '../WriteTree';\n\nimport { CacheNode } from './CacheNode';\nimport { ViewCache, viewCacheGetCompleteServerSnap } from './ViewCache';\n\n/**\n * Since updates to filtered nodes might require nodes to be pulled in from \"outside\" the node, this interface\n * can help to get complete children that can be pulled in.\n * A class implementing this interface takes potentially multiple sources (e.g. user writes, server data from\n * other views etc.) to try it's best to get a complete child that might be useful in pulling into the view.\n *\n * @interface\n */\nexport interface CompleteChildSource {\n  getCompleteChild(childKey: string): Node | null;\n\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null;\n}\n\n/**\n * An implementation of CompleteChildSource that never returns any additional children\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class NoCompleteChildSource_ implements CompleteChildSource {\n  getCompleteChild(childKey?: string): Node | null {\n    return null;\n  }\n  getChildAfterChild(\n    index?: Index,\n    child?: NamedNode,\n    reverse?: boolean\n  ): NamedNode | null {\n    return null;\n  }\n}\n\n/**\n * Singleton instance.\n */\nexport const NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\n\n/**\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\n * old event caches available to calculate complete children.\n */\nexport class WriteTreeCompleteChildSource implements CompleteChildSource {\n  constructor(\n    private writes_: WriteTreeRef,\n    private viewCache_: ViewCache,\n    private optCompleteServerCache_: Node | null = null\n  ) {}\n  getCompleteChild(childKey: string): Node | null {\n    const node = this.viewCache_.eventCache;\n    if (node.isCompleteForChild(childKey)) {\n      return node.getNode().getImmediateChild(childKey);\n    } else {\n      const serverNode =\n        this.optCompleteServerCache_ != null\n          ? new CacheNode(this.optCompleteServerCache_, true, false)\n          : this.viewCache_.serverCache;\n      return writeTreeRefCalcCompleteChild(this.writes_, childKey, serverNode);\n    }\n  }\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null {\n    const completeServerData =\n      this.optCompleteServerCache_ != null\n        ? this.optCompleteServerCache_\n        : viewCacheGetCompleteServerSnap(this.viewCache_);\n    const nodes = writeTreeRefCalcIndexedSlice(\n      this.writes_,\n      completeServerData,\n      child,\n      1,\n      reverse,\n      index\n    );\n    if (nodes.length === 0) {\n      return null;\n    } else {\n      return nodes[0];\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport { AckUserWrite } from '../operation/AckUserWrite';\nimport { Merge } from '../operation/Merge';\nimport { Operation, OperationType } from '../operation/Operation';\nimport { Overwrite } from '../operation/Overwrite';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { Node } from '../snap/Node';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathChild,\n  pathGetBack,\n  pathGetFront,\n  pathGetLength,\n  pathIsEmpty,\n  pathParent,\n  pathPopFront\n} from '../util/Path';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteChild,\n  writeTreeRefCalcCompleteEventCache,\n  writeTreeRefCalcCompleteEventChildren,\n  writeTreeRefCalcEventCacheAfterServerOverwrite,\n  writeTreeRefShadowingWrite\n} from '../WriteTree';\n\nimport { Change, changeValue } from './Change';\nimport { ChildChangeAccumulator } from './ChildChangeAccumulator';\nimport {\n  CompleteChildSource,\n  NO_COMPLETE_CHILD_SOURCE,\n  WriteTreeCompleteChildSource\n} from './CompleteChildSource';\nimport { NodeFilter } from './filter/NodeFilter';\nimport {\n  ViewCache,\n  viewCacheGetCompleteEventSnap,\n  viewCacheGetCompleteServerSnap,\n  viewCacheUpdateEventSnap,\n  viewCacheUpdateServerSnap\n} from './ViewCache';\n\nexport interface ProcessorResult {\n  readonly viewCache: ViewCache;\n  readonly changes: Change[];\n}\n\nexport interface ViewProcessor {\n  readonly filter: NodeFilter;\n}\n\nexport function newViewProcessor(filter: NodeFilter): ViewProcessor {\n  return { filter };\n}\n\nexport function viewProcessorAssertIndexed(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache\n): void {\n  assert(\n    viewCache.eventCache.getNode().isIndexed(viewProcessor.filter.getIndex()),\n    'Event snap not indexed'\n  );\n  assert(\n    viewCache.serverCache.getNode().isIndexed(viewProcessor.filter.getIndex()),\n    'Server snap not indexed'\n  );\n}\n\nexport function viewProcessorApplyOperation(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null\n): ProcessorResult {\n  const accumulator = new ChildChangeAccumulator();\n  let newViewCache, filterServerNode;\n  if (operation.type === OperationType.OVERWRITE) {\n    const overwrite = operation as Overwrite;\n    if (overwrite.source.fromUser) {\n      newViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        oldViewCache,\n        overwrite.path,\n        overwrite.snap,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      assert(overwrite.source.fromServer, 'Unknown source.');\n      // We filter the node if it's a tagged update or the node has been previously filtered  and the\n      // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\n      // again\n      filterServerNode =\n        overwrite.source.tagged ||\n        (oldViewCache.serverCache.isFiltered() && !pathIsEmpty(overwrite.path));\n      newViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        oldViewCache,\n        overwrite.path,\n        overwrite.snap,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.MERGE) {\n    const merge = operation as Merge;\n    if (merge.source.fromUser) {\n      newViewCache = viewProcessorApplyUserMerge(\n        viewProcessor,\n        oldViewCache,\n        merge.path,\n        merge.children,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      assert(merge.source.fromServer, 'Unknown source.');\n      // We filter the node if it's a tagged update or the node has been previously filtered\n      filterServerNode =\n        merge.source.tagged || oldViewCache.serverCache.isFiltered();\n      newViewCache = viewProcessorApplyServerMerge(\n        viewProcessor,\n        oldViewCache,\n        merge.path,\n        merge.children,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.ACK_USER_WRITE) {\n    const ackUserWrite = operation as AckUserWrite;\n    if (!ackUserWrite.revert) {\n      newViewCache = viewProcessorAckUserWrite(\n        viewProcessor,\n        oldViewCache,\n        ackUserWrite.path,\n        ackUserWrite.affectedTree,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      newViewCache = viewProcessorRevertUserWrite(\n        viewProcessor,\n        oldViewCache,\n        ackUserWrite.path,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.LISTEN_COMPLETE) {\n    newViewCache = viewProcessorListenComplete(\n      viewProcessor,\n      oldViewCache,\n      operation.path,\n      writesCache,\n      accumulator\n    );\n  } else {\n    throw assertionError('Unknown operation type: ' + operation.type);\n  }\n  const changes = accumulator.getChanges();\n  viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, changes);\n  return { viewCache: newViewCache, changes };\n}\n\nfunction viewProcessorMaybeAddValueEvent(\n  oldViewCache: ViewCache,\n  newViewCache: ViewCache,\n  accumulator: Change[]\n): void {\n  const eventSnap = newViewCache.eventCache;\n  if (eventSnap.isFullyInitialized()) {\n    const isLeafOrEmpty =\n      eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\n    const oldCompleteSnap = viewCacheGetCompleteEventSnap(oldViewCache);\n    if (\n      accumulator.length > 0 ||\n      !oldViewCache.eventCache.isFullyInitialized() ||\n      (isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap)) ||\n      !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())\n    ) {\n      accumulator.push(\n        changeValue(viewCacheGetCompleteEventSnap(newViewCache))\n      );\n    }\n  }\n}\n\nfunction viewProcessorGenerateEventCacheAfterServerEvent(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  changePath: Path,\n  writesCache: WriteTreeRef,\n  source: CompleteChildSource,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldEventSnap = viewCache.eventCache;\n  if (writeTreeRefShadowingWrite(writesCache, changePath) != null) {\n    // we have a shadowing write, ignore changes\n    return viewCache;\n  } else {\n    let newEventCache, serverNode;\n    if (pathIsEmpty(changePath)) {\n      // TODO: figure out how this plays with \"sliding ack windows\"\n      assert(\n        viewCache.serverCache.isFullyInitialized(),\n        'If change path is empty, we must have complete server data'\n      );\n      if (viewCache.serverCache.isFiltered()) {\n        // We need to special case this, because we need to only apply writes to complete children, or\n        // we might end up raising events for incomplete children. If the server data is filtered deep\n        // writes cannot be guaranteed to be complete\n        const serverCache = viewCacheGetCompleteServerSnap(viewCache);\n        const completeChildren =\n          serverCache instanceof ChildrenNode\n            ? serverCache\n            : ChildrenNode.EMPTY_NODE;\n        const completeEventChildren = writeTreeRefCalcCompleteEventChildren(\n          writesCache,\n          completeChildren\n        );\n        newEventCache = viewProcessor.filter.updateFullNode(\n          viewCache.eventCache.getNode(),\n          completeEventChildren,\n          accumulator\n        );\n      } else {\n        const completeNode = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n        newEventCache = viewProcessor.filter.updateFullNode(\n          viewCache.eventCache.getNode(),\n          completeNode,\n          accumulator\n        );\n      }\n    } else {\n      const childKey = pathGetFront(changePath);\n      if (childKey === '.priority') {\n        assert(\n          pathGetLength(changePath) === 1,\n          \"Can't have a priority with additional path components\"\n        );\n        const oldEventNode = oldEventSnap.getNode();\n        serverNode = viewCache.serverCache.getNode();\n        // we might have overwrites for this priority\n        const updatedPriority = writeTreeRefCalcEventCacheAfterServerOverwrite(\n          writesCache,\n          changePath,\n          oldEventNode,\n          serverNode\n        );\n        if (updatedPriority != null) {\n          newEventCache = viewProcessor.filter.updatePriority(\n            oldEventNode,\n            updatedPriority\n          );\n        } else {\n          // priority didn't change, keep old node\n          newEventCache = oldEventSnap.getNode();\n        }\n      } else {\n        const childChangePath = pathPopFront(changePath);\n        // update child\n        let newEventChild;\n        if (oldEventSnap.isCompleteForChild(childKey)) {\n          serverNode = viewCache.serverCache.getNode();\n          const eventChildUpdate =\n            writeTreeRefCalcEventCacheAfterServerOverwrite(\n              writesCache,\n              changePath,\n              oldEventSnap.getNode(),\n              serverNode\n            );\n          if (eventChildUpdate != null) {\n            newEventChild = oldEventSnap\n              .getNode()\n              .getImmediateChild(childKey)\n              .updateChild(childChangePath, eventChildUpdate);\n          } else {\n            // Nothing changed, just keep the old child\n            newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);\n          }\n        } else {\n          newEventChild = writeTreeRefCalcCompleteChild(\n            writesCache,\n            childKey,\n            viewCache.serverCache\n          );\n        }\n        if (newEventChild != null) {\n          newEventCache = viewProcessor.filter.updateChild(\n            oldEventSnap.getNode(),\n            childKey,\n            newEventChild,\n            childChangePath,\n            source,\n            accumulator\n          );\n        } else {\n          // no complete child available or no change\n          newEventCache = oldEventSnap.getNode();\n        }\n      }\n    }\n    return viewCacheUpdateEventSnap(\n      viewCache,\n      newEventCache,\n      oldEventSnap.isFullyInitialized() || pathIsEmpty(changePath),\n      viewProcessor.filter.filtersNodes()\n    );\n  }\n}\n\nfunction viewProcessorApplyServerOverwrite(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  changePath: Path,\n  changedSnap: Node,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  filterServerNode: boolean,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldServerSnap = oldViewCache.serverCache;\n  let newServerCache;\n  const serverFilter = filterServerNode\n    ? viewProcessor.filter\n    : viewProcessor.filter.getIndexedFilter();\n  if (pathIsEmpty(changePath)) {\n    newServerCache = serverFilter.updateFullNode(\n      oldServerSnap.getNode(),\n      changedSnap,\n      null\n    );\n  } else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\n    // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\n    const newServerNode = oldServerSnap\n      .getNode()\n      .updateChild(changePath, changedSnap);\n    newServerCache = serverFilter.updateFullNode(\n      oldServerSnap.getNode(),\n      newServerNode,\n      null\n    );\n  } else {\n    const childKey = pathGetFront(changePath);\n    if (\n      !oldServerSnap.isCompleteForPath(changePath) &&\n      pathGetLength(changePath) > 1\n    ) {\n      // We don't update incomplete nodes with updates intended for other listeners\n      return oldViewCache;\n    }\n    const childChangePath = pathPopFront(changePath);\n    const childNode = oldServerSnap.getNode().getImmediateChild(childKey);\n    const newChildNode = childNode.updateChild(childChangePath, changedSnap);\n    if (childKey === '.priority') {\n      newServerCache = serverFilter.updatePriority(\n        oldServerSnap.getNode(),\n        newChildNode\n      );\n    } else {\n      newServerCache = serverFilter.updateChild(\n        oldServerSnap.getNode(),\n        childKey,\n        newChildNode,\n        childChangePath,\n        NO_COMPLETE_CHILD_SOURCE,\n        null\n      );\n    }\n  }\n  const newViewCache = viewCacheUpdateServerSnap(\n    oldViewCache,\n    newServerCache,\n    oldServerSnap.isFullyInitialized() || pathIsEmpty(changePath),\n    serverFilter.filtersNodes()\n  );\n  const source = new WriteTreeCompleteChildSource(\n    writesCache,\n    newViewCache,\n    completeCache\n  );\n  return viewProcessorGenerateEventCacheAfterServerEvent(\n    viewProcessor,\n    newViewCache,\n    changePath,\n    writesCache,\n    source,\n    accumulator\n  );\n}\n\nfunction viewProcessorApplyUserOverwrite(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  changePath: Path,\n  changedSnap: Node,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldEventSnap = oldViewCache.eventCache;\n  let newViewCache, newEventCache;\n  const source = new WriteTreeCompleteChildSource(\n    writesCache,\n    oldViewCache,\n    completeCache\n  );\n  if (pathIsEmpty(changePath)) {\n    newEventCache = viewProcessor.filter.updateFullNode(\n      oldViewCache.eventCache.getNode(),\n      changedSnap,\n      accumulator\n    );\n    newViewCache = viewCacheUpdateEventSnap(\n      oldViewCache,\n      newEventCache,\n      true,\n      viewProcessor.filter.filtersNodes()\n    );\n  } else {\n    const childKey = pathGetFront(changePath);\n    if (childKey === '.priority') {\n      newEventCache = viewProcessor.filter.updatePriority(\n        oldViewCache.eventCache.getNode(),\n        changedSnap\n      );\n      newViewCache = viewCacheUpdateEventSnap(\n        oldViewCache,\n        newEventCache,\n        oldEventSnap.isFullyInitialized(),\n        oldEventSnap.isFiltered()\n      );\n    } else {\n      const childChangePath = pathPopFront(changePath);\n      const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\n      let newChild;\n      if (pathIsEmpty(childChangePath)) {\n        // Child overwrite, we can replace the child\n        newChild = changedSnap;\n      } else {\n        const childNode = source.getCompleteChild(childKey);\n        if (childNode != null) {\n          if (\n            pathGetBack(childChangePath) === '.priority' &&\n            childNode.getChild(pathParent(childChangePath)).isEmpty()\n          ) {\n            // This is a priority update on an empty node. If this node exists on the server, the\n            // server will send down the priority in the update, so ignore for now\n            newChild = childNode;\n          } else {\n            newChild = childNode.updateChild(childChangePath, changedSnap);\n          }\n        } else {\n          // There is no complete child node available\n          newChild = ChildrenNode.EMPTY_NODE;\n        }\n      }\n      if (!oldChild.equals(newChild)) {\n        const newEventSnap = viewProcessor.filter.updateChild(\n          oldEventSnap.getNode(),\n          childKey,\n          newChild,\n          childChangePath,\n          source,\n          accumulator\n        );\n        newViewCache = viewCacheUpdateEventSnap(\n          oldViewCache,\n          newEventSnap,\n          oldEventSnap.isFullyInitialized(),\n          viewProcessor.filter.filtersNodes()\n        );\n      } else {\n        newViewCache = oldViewCache;\n      }\n    }\n  }\n  return newViewCache;\n}\n\nfunction viewProcessorCacheHasChild(\n  viewCache: ViewCache,\n  childKey: string\n): boolean {\n  return viewCache.eventCache.isCompleteForChild(childKey);\n}\n\nfunction viewProcessorApplyUserMerge(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  changedChildren: ImmutableTree<Node>,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n  let curViewCache = viewCache;\n  changedChildren.foreach((relativePath, childNode) => {\n    const writePath = pathChild(path, relativePath);\n    if (viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        curViewCache,\n        writePath,\n        childNode,\n        writesCache,\n        serverCache,\n        accumulator\n      );\n    }\n  });\n\n  changedChildren.foreach((relativePath, childNode) => {\n    const writePath = pathChild(path, relativePath);\n    if (!viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        curViewCache,\n        writePath,\n        childNode,\n        writesCache,\n        serverCache,\n        accumulator\n      );\n    }\n  });\n\n  return curViewCache;\n}\n\nfunction viewProcessorApplyMerge(\n  viewProcessor: ViewProcessor,\n  node: Node,\n  merge: ImmutableTree<Node>\n): Node {\n  merge.foreach((relativePath, childNode) => {\n    node = node.updateChild(relativePath, childNode);\n  });\n  return node;\n}\n\nfunction viewProcessorApplyServerMerge(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  changedChildren: ImmutableTree<Node>,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  filterServerNode: boolean,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\n  // wait for the complete data update coming soon.\n  if (\n    viewCache.serverCache.getNode().isEmpty() &&\n    !viewCache.serverCache.isFullyInitialized()\n  ) {\n    return viewCache;\n  }\n\n  // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n  let curViewCache = viewCache;\n  let viewMergeTree: ImmutableTree<Node>;\n  if (pathIsEmpty(path)) {\n    viewMergeTree = changedChildren;\n  } else {\n    viewMergeTree = new ImmutableTree<Node>(null).setTree(\n      path,\n      changedChildren\n    );\n  }\n  const serverNode = viewCache.serverCache.getNode();\n  viewMergeTree.children.inorderTraversal((childKey, childTree) => {\n    if (serverNode.hasChild(childKey)) {\n      const serverChild = viewCache.serverCache\n        .getNode()\n        .getImmediateChild(childKey);\n      const newChild = viewProcessorApplyMerge(\n        viewProcessor,\n        serverChild,\n        childTree\n      );\n      curViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        curViewCache,\n        new Path(childKey),\n        newChild,\n        writesCache,\n        serverCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  });\n  viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => {\n    const isUnknownDeepMerge =\n      !viewCache.serverCache.isCompleteForChild(childKey) &&\n      childMergeTree.value === null;\n    if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\n      const serverChild = viewCache.serverCache\n        .getNode()\n        .getImmediateChild(childKey);\n      const newChild = viewProcessorApplyMerge(\n        viewProcessor,\n        serverChild,\n        childMergeTree\n      );\n      curViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        curViewCache,\n        new Path(childKey),\n        newChild,\n        writesCache,\n        serverCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  });\n\n  return curViewCache;\n}\n\nfunction viewProcessorAckUserWrite(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  ackPath: Path,\n  affectedTree: ImmutableTree<boolean>,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  if (writeTreeRefShadowingWrite(writesCache, ackPath) != null) {\n    return viewCache;\n  }\n\n  // Only filter server node if it is currently filtered\n  const filterServerNode = viewCache.serverCache.isFiltered();\n\n  // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\n  // now that it won't be shadowed.\n  const serverCache = viewCache.serverCache;\n  if (affectedTree.value != null) {\n    // This is an overwrite.\n    if (\n      (pathIsEmpty(ackPath) && serverCache.isFullyInitialized()) ||\n      serverCache.isCompleteForPath(ackPath)\n    ) {\n      return viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        viewCache,\n        ackPath,\n        serverCache.getNode().getChild(ackPath),\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    } else if (pathIsEmpty(ackPath)) {\n      // This is a goofy edge case where we are acking data at this location but don't have full data.  We\n      // should just re-apply whatever we have in our cache as a merge.\n      let changedChildren = new ImmutableTree<Node>(null);\n      serverCache.getNode().forEachChild(KEY_INDEX, (name, node) => {\n        changedChildren = changedChildren.set(new Path(name), node);\n      });\n      return viewProcessorApplyServerMerge(\n        viewProcessor,\n        viewCache,\n        ackPath,\n        changedChildren,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    } else {\n      return viewCache;\n    }\n  } else {\n    // This is a merge.\n    let changedChildren = new ImmutableTree<Node>(null);\n    affectedTree.foreach((mergePath, value) => {\n      const serverCachePath = pathChild(ackPath, mergePath);\n      if (serverCache.isCompleteForPath(serverCachePath)) {\n        changedChildren = changedChildren.set(\n          mergePath,\n          serverCache.getNode().getChild(serverCachePath)\n        );\n      }\n    });\n    return viewProcessorApplyServerMerge(\n      viewProcessor,\n      viewCache,\n      ackPath,\n      changedChildren,\n      writesCache,\n      completeCache,\n      filterServerNode,\n      accumulator\n    );\n  }\n}\n\nfunction viewProcessorListenComplete(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  writesCache: WriteTreeRef,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldServerNode = viewCache.serverCache;\n  const newViewCache = viewCacheUpdateServerSnap(\n    viewCache,\n    oldServerNode.getNode(),\n    oldServerNode.isFullyInitialized() || pathIsEmpty(path),\n    oldServerNode.isFiltered()\n  );\n  return viewProcessorGenerateEventCacheAfterServerEvent(\n    viewProcessor,\n    newViewCache,\n    path,\n    writesCache,\n    NO_COMPLETE_CHILD_SOURCE,\n    accumulator\n  );\n}\n\nfunction viewProcessorRevertUserWrite(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  writesCache: WriteTreeRef,\n  completeServerCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  let complete;\n  if (writeTreeRefShadowingWrite(writesCache, path) != null) {\n    return viewCache;\n  } else {\n    const source = new WriteTreeCompleteChildSource(\n      writesCache,\n      viewCache,\n      completeServerCache\n    );\n    const oldEventCache = viewCache.eventCache.getNode();\n    let newEventCache;\n    if (pathIsEmpty(path) || pathGetFront(path) === '.priority') {\n      let newNode;\n      if (viewCache.serverCache.isFullyInitialized()) {\n        newNode = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n      } else {\n        const serverChildren = viewCache.serverCache.getNode();\n        assert(\n          serverChildren instanceof ChildrenNode,\n          'serverChildren would be complete if leaf node'\n        );\n        newNode = writeTreeRefCalcCompleteEventChildren(\n          writesCache,\n          serverChildren as ChildrenNode\n        );\n      }\n      newNode = newNode as Node;\n      newEventCache = viewProcessor.filter.updateFullNode(\n        oldEventCache,\n        newNode,\n        accumulator\n      );\n    } else {\n      const childKey = pathGetFront(path);\n      let newChild = writeTreeRefCalcCompleteChild(\n        writesCache,\n        childKey,\n        viewCache.serverCache\n      );\n      if (\n        newChild == null &&\n        viewCache.serverCache.isCompleteForChild(childKey)\n      ) {\n        newChild = oldEventCache.getImmediateChild(childKey);\n      }\n      if (newChild != null) {\n        newEventCache = viewProcessor.filter.updateChild(\n          oldEventCache,\n          childKey,\n          newChild,\n          pathPopFront(path),\n          source,\n          accumulator\n        );\n      } else if (viewCache.eventCache.getNode().hasChild(childKey)) {\n        // No complete child available, delete the existing one, if any\n        newEventCache = viewProcessor.filter.updateChild(\n          oldEventCache,\n          childKey,\n          ChildrenNode.EMPTY_NODE,\n          pathPopFront(path),\n          source,\n          accumulator\n        );\n      } else {\n        newEventCache = oldEventCache;\n      }\n      if (\n        newEventCache.isEmpty() &&\n        viewCache.serverCache.isFullyInitialized()\n      ) {\n        // We might have reverted all child writes. Maybe the old event was a leaf node\n        complete = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n        if (complete.isLeafNode()) {\n          newEventCache = viewProcessor.filter.updateFullNode(\n            newEventCache,\n            complete,\n            accumulator\n          );\n        }\n      }\n    }\n    complete =\n      viewCache.serverCache.isFullyInitialized() ||\n      writeTreeRefShadowingWrite(writesCache, newEmptyPath()) != null;\n    return viewCacheUpdateEventSnap(\n      viewCache,\n      newEventCache,\n      complete,\n      viewProcessor.filter.filtersNodes()\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Operation, OperationType } from '../operation/Operation';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { Node } from '../snap/Node';\nimport { Path, pathGetFront, pathIsEmpty } from '../util/Path';\nimport { WriteTreeRef } from '../WriteTree';\n\nimport { CacheNode } from './CacheNode';\nimport { Change, changeChildAdded, changeValue } from './Change';\nimport { CancelEvent, Event } from './Event';\nimport {\n  EventGenerator,\n  eventGeneratorGenerateEventsForChanges\n} from './EventGenerator';\nimport { EventRegistration, QueryContext } from './EventRegistration';\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { queryParamsGetNodeFilter } from './QueryParams';\nimport {\n  newViewCache,\n  ViewCache,\n  viewCacheGetCompleteEventSnap,\n  viewCacheGetCompleteServerSnap\n} from './ViewCache';\nimport {\n  newViewProcessor,\n  ViewProcessor,\n  viewProcessorApplyOperation,\n  viewProcessorAssertIndexed\n} from './ViewProcessor';\n\n/**\n * A view represents a specific location and query that has 1 or more event registrations.\n *\n * It does several things:\n *  - Maintains the list of event registrations for this location/query.\n *  - Maintains a cache of the data visible for this location/query.\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\n *    registrations returns the set of events to be raised.\n */\nexport class View {\n  processor_: ViewProcessor;\n  viewCache_: ViewCache;\n  eventRegistrations_: EventRegistration[] = [];\n  eventGenerator_: EventGenerator;\n\n  constructor(private query_: QueryContext, initialViewCache: ViewCache) {\n    const params = this.query_._queryParams;\n\n    const indexFilter = new IndexedFilter(params.getIndex());\n    const filter = queryParamsGetNodeFilter(params);\n\n    this.processor_ = newViewProcessor(filter);\n\n    const initialServerCache = initialViewCache.serverCache;\n    const initialEventCache = initialViewCache.eventCache;\n\n    // Don't filter server node with other filter than index, wait for tagged listen\n    const serverSnap = indexFilter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialServerCache.getNode(),\n      null\n    );\n    const eventSnap = filter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialEventCache.getNode(),\n      null\n    );\n    const newServerCache = new CacheNode(\n      serverSnap,\n      initialServerCache.isFullyInitialized(),\n      indexFilter.filtersNodes()\n    );\n    const newEventCache = new CacheNode(\n      eventSnap,\n      initialEventCache.isFullyInitialized(),\n      filter.filtersNodes()\n    );\n\n    this.viewCache_ = newViewCache(newEventCache, newServerCache);\n    this.eventGenerator_ = new EventGenerator(this.query_);\n  }\n\n  get query(): QueryContext {\n    return this.query_;\n  }\n}\n\nexport function viewGetServerCache(view: View): Node | null {\n  return view.viewCache_.serverCache.getNode();\n}\n\nexport function viewGetCompleteNode(view: View): Node | null {\n  return viewCacheGetCompleteEventSnap(view.viewCache_);\n}\n\nexport function viewGetCompleteServerCache(\n  view: View,\n  path: Path\n): Node | null {\n  const cache = viewCacheGetCompleteServerSnap(view.viewCache_);\n  if (cache) {\n    // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\n    // we need to see if it contains the child we're interested in.\n    if (\n      view.query._queryParams.loadsAllData() ||\n      (!pathIsEmpty(path) &&\n        !cache.getImmediateChild(pathGetFront(path)).isEmpty())\n    ) {\n      return cache.getChild(path);\n    }\n  }\n  return null;\n}\n\nexport function viewIsEmpty(view: View): boolean {\n  return view.eventRegistrations_.length === 0;\n}\n\nexport function viewAddEventRegistration(\n  view: View,\n  eventRegistration: EventRegistration\n) {\n  view.eventRegistrations_.push(eventRegistration);\n}\n\n/**\n * @param eventRegistration - If null, remove all callbacks.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns Cancel events, if cancelError was provided.\n */\nexport function viewRemoveEventRegistration(\n  view: View,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error\n): Event[] {\n  const cancelEvents: CancelEvent[] = [];\n  if (cancelError) {\n    assert(\n      eventRegistration == null,\n      'A cancel should cancel all event registrations.'\n    );\n    const path = view.query._path;\n    view.eventRegistrations_.forEach(registration => {\n      const maybeEvent = registration.createCancelEvent(cancelError, path);\n      if (maybeEvent) {\n        cancelEvents.push(maybeEvent);\n      }\n    });\n  }\n\n  if (eventRegistration) {\n    let remaining = [];\n    for (let i = 0; i < view.eventRegistrations_.length; ++i) {\n      const existing = view.eventRegistrations_[i];\n      if (!existing.matches(eventRegistration)) {\n        remaining.push(existing);\n      } else if (eventRegistration.hasAnyCallback()) {\n        // We're removing just this one\n        remaining = remaining.concat(view.eventRegistrations_.slice(i + 1));\n        break;\n      }\n    }\n    view.eventRegistrations_ = remaining;\n  } else {\n    view.eventRegistrations_ = [];\n  }\n  return cancelEvents;\n}\n\n/**\n * Applies the given Operation, updates our cache, and returns the appropriate events.\n */\nexport function viewApplyOperation(\n  view: View,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  completeServerCache: Node | null\n): Event[] {\n  if (\n    operation.type === OperationType.MERGE &&\n    operation.source.queryId !== null\n  ) {\n    assert(\n      viewCacheGetCompleteServerSnap(view.viewCache_),\n      'We should always have a full cache before handling merges'\n    );\n    assert(\n      viewCacheGetCompleteEventSnap(view.viewCache_),\n      'Missing event cache, even though we have a server cache'\n    );\n  }\n\n  const oldViewCache = view.viewCache_;\n  const result = viewProcessorApplyOperation(\n    view.processor_,\n    oldViewCache,\n    operation,\n    writesCache,\n    completeServerCache\n  );\n  viewProcessorAssertIndexed(view.processor_, result.viewCache);\n\n  assert(\n    result.viewCache.serverCache.isFullyInitialized() ||\n      !oldViewCache.serverCache.isFullyInitialized(),\n    'Once a server snap is complete, it should never go back'\n  );\n\n  view.viewCache_ = result.viewCache;\n\n  return viewGenerateEventsForChanges_(\n    view,\n    result.changes,\n    result.viewCache.eventCache.getNode(),\n    null\n  );\n}\n\nexport function viewGetInitialEvents(\n  view: View,\n  registration: EventRegistration\n): Event[] {\n  const eventSnap = view.viewCache_.eventCache;\n  const initialChanges: Change[] = [];\n  if (!eventSnap.getNode().isLeafNode()) {\n    const eventNode = eventSnap.getNode() as ChildrenNode;\n    eventNode.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      initialChanges.push(changeChildAdded(key, childNode));\n    });\n  }\n  if (eventSnap.isFullyInitialized()) {\n    initialChanges.push(changeValue(eventSnap.getNode()));\n  }\n  return viewGenerateEventsForChanges_(\n    view,\n    initialChanges,\n    eventSnap.getNode(),\n    registration\n  );\n}\n\nfunction viewGenerateEventsForChanges_(\n  view: View,\n  changes: Change[],\n  eventCache: Node,\n  eventRegistration?: EventRegistration\n): Event[] {\n  const registrations = eventRegistration\n    ? [eventRegistration]\n    : view.eventRegistrations_;\n  return eventGeneratorGenerateEventsForChanges(\n    view.eventGenerator_,\n    changes,\n    eventCache,\n    registrations\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ReferenceConstructor } from '../api/Reference';\n\nimport { Operation } from './operation/Operation';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { Path } from './util/Path';\nimport { CacheNode } from './view/CacheNode';\nimport { Event } from './view/Event';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\nimport {\n  View,\n  viewAddEventRegistration,\n  viewApplyOperation,\n  viewGetCompleteServerCache,\n  viewGetInitialEvents,\n  viewIsEmpty,\n  viewRemoveEventRegistration\n} from './view/View';\nimport { newViewCache } from './view/ViewCache';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteEventCache,\n  writeTreeRefCalcCompleteEventChildren\n} from './WriteTree';\n\nlet referenceConstructor: ReferenceConstructor;\n\n/**\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\n * and user writes (set, transaction, update).\n *\n * It's responsible for:\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\n *    applyUserOverwrite, etc.)\n */\nexport class SyncPoint {\n  /**\n   * The Views being tracked at this location in the tree, stored as a map where the key is a\n   * queryId and the value is the View for that query.\n   *\n   * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\n   */\n  readonly views: Map<string, View> = new Map();\n}\n\nexport function syncPointSetReferenceConstructor(\n  val: ReferenceConstructor\n): void {\n  assert(\n    !referenceConstructor,\n    '__referenceConstructor has already been defined'\n  );\n  referenceConstructor = val;\n}\n\nfunction syncPointGetReferenceConstructor(): ReferenceConstructor {\n  assert(referenceConstructor, 'Reference.ts has not been loaded');\n  return referenceConstructor;\n}\n\nexport function syncPointIsEmpty(syncPoint: SyncPoint): boolean {\n  return syncPoint.views.size === 0;\n}\n\nexport function syncPointApplyOperation(\n  syncPoint: SyncPoint,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  optCompleteServerCache: Node | null\n): Event[] {\n  const queryId = operation.source.queryId;\n  if (queryId !== null) {\n    const view = syncPoint.views.get(queryId);\n    assert(view != null, 'SyncTree gave us an op for an invalid query.');\n    return viewApplyOperation(\n      view,\n      operation,\n      writesCache,\n      optCompleteServerCache\n    );\n  } else {\n    let events: Event[] = [];\n\n    for (const view of syncPoint.views.values()) {\n      events = events.concat(\n        viewApplyOperation(view, operation, writesCache, optCompleteServerCache)\n      );\n    }\n\n    return events;\n  }\n}\n\n/**\n * Get a view for the specified query.\n *\n * @param query - The query to return a view for\n * @param writesCache\n * @param serverCache\n * @param serverCacheComplete\n * @returns Events to raise.\n */\nexport function syncPointGetView(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  serverCacheComplete: boolean\n): View {\n  const queryId = query._queryIdentifier;\n  const view = syncPoint.views.get(queryId);\n  if (!view) {\n    // TODO: make writesCache take flag for complete server node\n    let eventCache = writeTreeRefCalcCompleteEventCache(\n      writesCache,\n      serverCacheComplete ? serverCache : null\n    );\n    let eventCacheComplete = false;\n    if (eventCache) {\n      eventCacheComplete = true;\n    } else if (serverCache instanceof ChildrenNode) {\n      eventCache = writeTreeRefCalcCompleteEventChildren(\n        writesCache,\n        serverCache\n      );\n      eventCacheComplete = false;\n    } else {\n      eventCache = ChildrenNode.EMPTY_NODE;\n      eventCacheComplete = false;\n    }\n    const viewCache = newViewCache(\n      new CacheNode(eventCache, eventCacheComplete, false),\n      new CacheNode(serverCache, serverCacheComplete, false)\n    );\n    return new View(query, viewCache);\n  }\n  return view;\n}\n\n/**\n * Add an event callback for the specified query.\n *\n * @param query\n * @param eventRegistration\n * @param writesCache\n * @param serverCache - Complete server cache, if we have it.\n * @param serverCacheComplete\n * @returns Events to raise.\n */\nexport function syncPointAddEventRegistration(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  eventRegistration: EventRegistration,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  serverCacheComplete: boolean\n): Event[] {\n  const view = syncPointGetView(\n    syncPoint,\n    query,\n    writesCache,\n    serverCache,\n    serverCacheComplete\n  );\n  if (!syncPoint.views.has(query._queryIdentifier)) {\n    syncPoint.views.set(query._queryIdentifier, view);\n  }\n  // This is guaranteed to exist now, we just created anything that was missing\n  viewAddEventRegistration(view, eventRegistration);\n  return viewGetInitialEvents(view, eventRegistration);\n}\n\n/**\n * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\n *\n * If query is the default query, we'll check all views for the specified eventRegistration.\n * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\n *\n * @param eventRegistration - If null, remove all callbacks.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns removed queries and any cancel events\n */\nexport function syncPointRemoveEventRegistration(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error\n): { removed: QueryContext[]; events: Event[] } {\n  const queryId = query._queryIdentifier;\n  const removed: QueryContext[] = [];\n  let cancelEvents: Event[] = [];\n  const hadCompleteView = syncPointHasCompleteView(syncPoint);\n  if (queryId === 'default') {\n    // When you do ref.off(...), we search all views for the registration to remove.\n    for (const [viewQueryId, view] of syncPoint.views.entries()) {\n      cancelEvents = cancelEvents.concat(\n        viewRemoveEventRegistration(view, eventRegistration, cancelError)\n      );\n      if (viewIsEmpty(view)) {\n        syncPoint.views.delete(viewQueryId);\n\n        // We'll deal with complete views later.\n        if (!view.query._queryParams.loadsAllData()) {\n          removed.push(view.query);\n        }\n      }\n    }\n  } else {\n    // remove the callback from the specific view.\n    const view = syncPoint.views.get(queryId);\n    if (view) {\n      cancelEvents = cancelEvents.concat(\n        viewRemoveEventRegistration(view, eventRegistration, cancelError)\n      );\n      if (viewIsEmpty(view)) {\n        syncPoint.views.delete(queryId);\n\n        // We'll deal with complete views later.\n        if (!view.query._queryParams.loadsAllData()) {\n          removed.push(view.query);\n        }\n      }\n    }\n  }\n\n  if (hadCompleteView && !syncPointHasCompleteView(syncPoint)) {\n    // We removed our last complete view.\n    removed.push(\n      new (syncPointGetReferenceConstructor())(query._repo, query._path)\n    );\n  }\n\n  return { removed, events: cancelEvents };\n}\n\nexport function syncPointGetQueryViews(syncPoint: SyncPoint): View[] {\n  const result = [];\n  for (const view of syncPoint.views.values()) {\n    if (!view.query._queryParams.loadsAllData()) {\n      result.push(view);\n    }\n  }\n  return result;\n}\n\n/**\n * @param path - The path to the desired complete snapshot\n * @returns A complete cache, if it exists\n */\nexport function syncPointGetCompleteServerCache(\n  syncPoint: SyncPoint,\n  path: Path\n): Node | null {\n  let serverCache: Node | null = null;\n  for (const view of syncPoint.views.values()) {\n    serverCache = serverCache || viewGetCompleteServerCache(view, path);\n  }\n  return serverCache;\n}\n\nexport function syncPointViewForQuery(\n  syncPoint: SyncPoint,\n  query: QueryContext\n): View | null {\n  const params = query._queryParams;\n  if (params.loadsAllData()) {\n    return syncPointGetCompleteView(syncPoint);\n  } else {\n    const queryId = query._queryIdentifier;\n    return syncPoint.views.get(queryId);\n  }\n}\n\nexport function syncPointViewExistsForQuery(\n  syncPoint: SyncPoint,\n  query: QueryContext\n): boolean {\n  return syncPointViewForQuery(syncPoint, query) != null;\n}\n\nexport function syncPointHasCompleteView(syncPoint: SyncPoint): boolean {\n  return syncPointGetCompleteView(syncPoint) != null;\n}\n\nexport function syncPointGetCompleteView(syncPoint: SyncPoint): View | null {\n  for (const view of syncPoint.views.values()) {\n    if (view.query._queryParams.loadsAllData()) {\n      return view;\n    }\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ReferenceConstructor } from '../api/Reference';\n\nimport { AckUserWrite } from './operation/AckUserWrite';\nimport { ListenComplete } from './operation/ListenComplete';\nimport { Merge } from './operation/Merge';\nimport {\n  newOperationSourceServer,\n  newOperationSourceServerTaggedQuery,\n  newOperationSourceUser,\n  Operation\n} from './operation/Operation';\nimport { Overwrite } from './operation/Overwrite';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport {\n  SyncPoint,\n  syncPointAddEventRegistration,\n  syncPointApplyOperation,\n  syncPointGetCompleteServerCache,\n  syncPointGetCompleteView,\n  syncPointGetQueryViews,\n  syncPointGetView,\n  syncPointHasCompleteView,\n  syncPointIsEmpty,\n  syncPointRemoveEventRegistration,\n  syncPointViewExistsForQuery,\n  syncPointViewForQuery\n} from './SyncPoint';\nimport { ImmutableTree } from './util/ImmutableTree';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathGetFront,\n  pathIsEmpty\n} from './util/Path';\nimport { each, errorForServerCode } from './util/util';\nimport { CacheNode } from './view/CacheNode';\nimport { Event } from './view/Event';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\nimport { View, viewGetCompleteNode, viewGetServerCache } from './view/View';\nimport {\n  newWriteTree,\n  WriteTree,\n  writeTreeAddMerge,\n  writeTreeAddOverwrite,\n  writeTreeCalcCompleteEventCache,\n  writeTreeChildWrites,\n  writeTreeGetWrite,\n  WriteTreeRef,\n  writeTreeRefChild,\n  writeTreeRemoveWrite\n} from './WriteTree';\n\nlet referenceConstructor: ReferenceConstructor;\n\nexport function syncTreeSetReferenceConstructor(\n  val: ReferenceConstructor\n): void {\n  assert(\n    !referenceConstructor,\n    '__referenceConstructor has already been defined'\n  );\n  referenceConstructor = val;\n}\n\nfunction syncTreeGetReferenceConstructor(): ReferenceConstructor {\n  assert(referenceConstructor, 'Reference.ts has not been loaded');\n  return referenceConstructor;\n}\n\nexport interface ListenProvider {\n  startListening(\n    query: QueryContext,\n    tag: number | null,\n    hashFn: () => string,\n    onComplete: (a: string, b?: unknown) => Event[]\n  ): Event[];\n\n  stopListening(a: QueryContext, b: number | null): void;\n}\n\n/**\n * Static tracker for next query tag.\n */\nlet syncTreeNextQueryTag_ = 1;\n\nexport function resetSyncTreeTag() {\n  syncTreeNextQueryTag_ = 1;\n}\n\n/**\n * SyncTree is the central class for managing event callback registration, data caching, views\n * (query processing), and event generation.  There are typically two SyncTree instances for\n * each Repo, one for the normal Firebase data, and one for the .info data.\n *\n * It has a number of responsibilities, including:\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\n *    (applyUserOverwrite(), applyUserMerge()).\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\n *    applyServerMerge()).\n *  - Generating user-facing events for server and user changes (all of the apply* methods\n *    return the set of events that need to be raised as a result).\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\n *    to the correct set of paths and queries to satisfy the current set of user event\n *    callbacks (listens are started/stopped using the provided listenProvider).\n *\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\n * events are returned to the caller rather than raised synchronously.\n *\n */\nexport class SyncTree {\n  /**\n   * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\n   */\n  syncPointTree_: ImmutableTree<SyncPoint> = new ImmutableTree<SyncPoint>(null);\n\n  /**\n   * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\n   */\n  pendingWriteTree_: WriteTree = newWriteTree();\n\n  readonly tagToQueryMap: Map<number, string> = new Map();\n  readonly queryToTagMap: Map<string, number> = new Map();\n\n  /**\n   * @param listenProvider_ - Used by SyncTree to start / stop listening\n   *   to server data.\n   */\n  constructor(public listenProvider_: ListenProvider) {}\n}\n\n/**\n * Apply the data changes for a user-generated set() or transaction() call.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyUserOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  newData: Node,\n  writeId: number,\n  visible?: boolean\n): Event[] {\n  // Record pending write.\n  writeTreeAddOverwrite(\n    syncTree.pendingWriteTree_,\n    path,\n    newData,\n    writeId,\n    visible\n  );\n\n  if (!visible) {\n    return [];\n  } else {\n    return syncTreeApplyOperationToSyncPoints_(\n      syncTree,\n      new Overwrite(newOperationSourceUser(), path, newData)\n    );\n  }\n}\n\n/**\n * Apply the data from a user-generated update() call\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyUserMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  writeId: number\n): Event[] {\n  // Record pending merge.\n  writeTreeAddMerge(syncTree.pendingWriteTree_, path, changedChildren, writeId);\n\n  const changeTree = ImmutableTree.fromObject(changedChildren);\n\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Merge(newOperationSourceUser(), path, changeTree)\n  );\n}\n\n/**\n * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\n *\n * @param revert - True if the given write failed and needs to be reverted\n * @returns Events to raise.\n */\nexport function syncTreeAckUserWrite(\n  syncTree: SyncTree,\n  writeId: number,\n  revert: boolean = false\n) {\n  const write = writeTreeGetWrite(syncTree.pendingWriteTree_, writeId);\n  const needToReevaluate = writeTreeRemoveWrite(\n    syncTree.pendingWriteTree_,\n    writeId\n  );\n  if (!needToReevaluate) {\n    return [];\n  } else {\n    let affectedTree = new ImmutableTree<boolean>(null);\n    if (write.snap != null) {\n      // overwrite\n      affectedTree = affectedTree.set(newEmptyPath(), true);\n    } else {\n      each(write.children, (pathString: string) => {\n        affectedTree = affectedTree.set(new Path(pathString), true);\n      });\n    }\n    return syncTreeApplyOperationToSyncPoints_(\n      syncTree,\n      new AckUserWrite(write.path, affectedTree, revert)\n    );\n  }\n}\n\n/**\n * Apply new server data for the specified path..\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyServerOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  newData: Node\n): Event[] {\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Overwrite(newOperationSourceServer(), path, newData)\n  );\n}\n\n/**\n * Apply new server data to be merged in at the specified path.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyServerMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node }\n): Event[] {\n  const changeTree = ImmutableTree.fromObject(changedChildren);\n\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Merge(newOperationSourceServer(), path, changeTree)\n  );\n}\n\n/**\n * Apply a listen complete for a query\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyListenComplete(\n  syncTree: SyncTree,\n  path: Path\n): Event[] {\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new ListenComplete(newOperationSourceServer(), path)\n  );\n}\n\n/**\n * Apply a listen complete for a tagged query\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedListenComplete(\n  syncTree: SyncTree,\n  path: Path,\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const op = new ListenComplete(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n\n/**\n * Remove event callback(s).\n *\n * If query is the default query, we'll check all queries for the specified eventRegistration.\n * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\n *\n * @param eventRegistration - If null, all callbacks are removed.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @param skipListenerDedup - When performing a `get()`, we don't add any new listeners, so no\n *  deduping needs to take place. This flag allows toggling of that behavior\n * @returns Cancel events, if cancelError was provided.\n */\nexport function syncTreeRemoveEventRegistration(\n  syncTree: SyncTree,\n  query: QueryContext,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error,\n  skipListenerDedup = false\n): Event[] {\n  // Find the syncPoint first. Then deal with whether or not it has matching listeners\n  const path = query._path;\n  const maybeSyncPoint = syncTree.syncPointTree_.get(path);\n  let cancelEvents: Event[] = [];\n  // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\n  // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\n  // not loadsAllData().\n  if (\n    maybeSyncPoint &&\n    (query._queryIdentifier === 'default' ||\n      syncPointViewExistsForQuery(maybeSyncPoint, query))\n  ) {\n    const removedAndEvents = syncPointRemoveEventRegistration(\n      maybeSyncPoint,\n      query,\n      eventRegistration,\n      cancelError\n    );\n    if (syncPointIsEmpty(maybeSyncPoint)) {\n      syncTree.syncPointTree_ = syncTree.syncPointTree_.remove(path);\n    }\n\n    const removed = removedAndEvents.removed;\n    cancelEvents = removedAndEvents.events;\n\n    if (!skipListenerDedup) {\n      /**\n       * We may have just removed one of many listeners and can short-circuit this whole process\n       * We may also not have removed a default listener, in which case all of the descendant listeners should already be\n       * properly set up.\n       */\n\n      // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\n      // queryId === 'default'\n      const removingDefault =\n        -1 !==\n        removed.findIndex(query => {\n          return query._queryParams.loadsAllData();\n        });\n      const covered = syncTree.syncPointTree_.findOnPath(\n        path,\n        (relativePath, parentSyncPoint) =>\n          syncPointHasCompleteView(parentSyncPoint)\n      );\n\n      if (removingDefault && !covered) {\n        const subtree = syncTree.syncPointTree_.subtree(path);\n        // There are potentially child listeners. Determine what if any listens we need to send before executing the\n        // removal\n        if (!subtree.isEmpty()) {\n          // We need to fold over our subtree and collect the listeners to send\n          const newViews = syncTreeCollectDistinctViewsForSubTree_(subtree);\n\n          // Ok, we've collected all the listens we need. Set them up.\n          for (let i = 0; i < newViews.length; ++i) {\n            const view = newViews[i],\n              newQuery = view.query;\n            const listener = syncTreeCreateListenerForView_(syncTree, view);\n            syncTree.listenProvider_.startListening(\n              syncTreeQueryForListening_(newQuery),\n              syncTreeTagForQuery(syncTree, newQuery),\n              listener.hashFn,\n              listener.onComplete\n            );\n          }\n        }\n        // Otherwise there's nothing below us, so nothing we need to start listening on\n      }\n      // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\n      // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\n      // Also, note that if we have a cancelError, it's already been removed at the provider level.\n      if (!covered && removed.length > 0 && !cancelError) {\n        // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\n        // default. Otherwise, we need to iterate through and cancel each individual query\n        if (removingDefault) {\n          // We don't tag default listeners\n          const defaultTag: number | null = null;\n          syncTree.listenProvider_.stopListening(\n            syncTreeQueryForListening_(query),\n            defaultTag\n          );\n        } else {\n          removed.forEach((queryToRemove: QueryContext) => {\n            const tagToRemove = syncTree.queryToTagMap.get(\n              syncTreeMakeQueryKey_(queryToRemove)\n            );\n            syncTree.listenProvider_.stopListening(\n              syncTreeQueryForListening_(queryToRemove),\n              tagToRemove\n            );\n          });\n        }\n      }\n    }\n    // Now, clear all of the tags we're tracking for the removed listens\n    syncTreeRemoveTags_(syncTree, removed);\n  } else {\n    // No-op, this listener must've been already removed\n  }\n  return cancelEvents;\n}\n\n/**\n * Apply new server data for the specified tagged query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedQueryOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  snap: Node,\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey != null) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const op = new Overwrite(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath,\n      snap\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // Query must have been removed already\n    return [];\n  }\n}\n\n/**\n * Apply server data to be merged in for the specified tagged query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedQueryMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const changeTree = ImmutableTree.fromObject(changedChildren);\n    const op = new Merge(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath,\n      changeTree\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n\n/**\n * Add an event callback for the specified query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeAddEventRegistration(\n  syncTree: SyncTree,\n  query: QueryContext,\n  eventRegistration: EventRegistration,\n  skipSetupListener = false\n): Event[] {\n  const path = query._path;\n\n  let serverCache: Node | null = null;\n  let foundAncestorDefaultView = false;\n  // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n  syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n    const relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n    foundAncestorDefaultView =\n      foundAncestorDefaultView || syncPointHasCompleteView(sp);\n  });\n  let syncPoint = syncTree.syncPointTree_.get(path);\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    foundAncestorDefaultView =\n      foundAncestorDefaultView || syncPointHasCompleteView(syncPoint);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n\n  let serverCacheComplete;\n  if (serverCache != null) {\n    serverCacheComplete = true;\n  } else {\n    serverCacheComplete = false;\n    serverCache = ChildrenNode.EMPTY_NODE;\n    const subtree = syncTree.syncPointTree_.subtree(path);\n    subtree.foreachChild((childName, childSyncPoint) => {\n      const completeCache = syncPointGetCompleteServerCache(\n        childSyncPoint,\n        newEmptyPath()\n      );\n      if (completeCache) {\n        serverCache = serverCache.updateImmediateChild(\n          childName,\n          completeCache\n        );\n      }\n    });\n  }\n\n  const viewAlreadyExists = syncPointViewExistsForQuery(syncPoint, query);\n  if (!viewAlreadyExists && !query._queryParams.loadsAllData()) {\n    // We need to track a tag for this query\n    const queryKey = syncTreeMakeQueryKey_(query);\n    assert(\n      !syncTree.queryToTagMap.has(queryKey),\n      'View does not exist, but we have a tag'\n    );\n    const tag = syncTreeGetNextQueryTag_();\n    syncTree.queryToTagMap.set(queryKey, tag);\n    syncTree.tagToQueryMap.set(tag, queryKey);\n  }\n  const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, path);\n  let events = syncPointAddEventRegistration(\n    syncPoint,\n    query,\n    eventRegistration,\n    writesCache,\n    serverCache,\n    serverCacheComplete\n  );\n  if (!viewAlreadyExists && !foundAncestorDefaultView && !skipSetupListener) {\n    const view = syncPointViewForQuery(syncPoint, query);\n    events = events.concat(syncTreeSetupListener_(syncTree, query, view));\n  }\n  return events;\n}\n\n/**\n * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\n * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\n * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\n *     <incremented total> as the write is applied locally and then acknowledged at the server.\n *\n * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\n *\n * @param path - The path to the data we want\n * @param writeIdsToExclude - A specific set to be excluded\n */\nexport function syncTreeCalcCompleteEventCache(\n  syncTree: SyncTree,\n  path: Path,\n  writeIdsToExclude?: number[]\n): Node {\n  const includeHiddenSets = true;\n  const writeTree = syncTree.pendingWriteTree_;\n  const serverCache = syncTree.syncPointTree_.findOnPath(\n    path,\n    (pathSoFar, syncPoint) => {\n      const relativePath = newRelativePath(pathSoFar, path);\n      const serverCache = syncPointGetCompleteServerCache(\n        syncPoint,\n        relativePath\n      );\n      if (serverCache) {\n        return serverCache;\n      }\n    }\n  );\n  return writeTreeCalcCompleteEventCache(\n    writeTree,\n    path,\n    serverCache,\n    writeIdsToExclude,\n    includeHiddenSets\n  );\n}\n\nexport function syncTreeGetServerValue(\n  syncTree: SyncTree,\n  query: QueryContext\n): Node | null {\n  const path = query._path;\n  let serverCache: Node | null = null;\n  // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n  syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n    const relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n  });\n  let syncPoint = syncTree.syncPointTree_.get(path);\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n  const serverCacheComplete = serverCache != null;\n  const serverCacheNode: CacheNode | null = serverCacheComplete\n    ? new CacheNode(serverCache, true, false)\n    : null;\n  const writesCache: WriteTreeRef | null = writeTreeChildWrites(\n    syncTree.pendingWriteTree_,\n    query._path\n  );\n  const view: View = syncPointGetView(\n    syncPoint,\n    query,\n    writesCache,\n    serverCacheComplete ? serverCacheNode.getNode() : ChildrenNode.EMPTY_NODE,\n    serverCacheComplete\n  );\n  return viewGetCompleteNode(view);\n}\n\n/**\n * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\n *\n * NOTES:\n * - Descendant SyncPoints will be visited first (since we raise events depth-first).\n *\n * - We call applyOperation() on each SyncPoint passing three things:\n *   1. A version of the Operation that has been made relative to the SyncPoint location.\n *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\n *   3. A snapshot Node with cached server data, if we have it.\n *\n * - We concatenate all of the events returned by each SyncPoint and return the result.\n */\nfunction syncTreeApplyOperationToSyncPoints_(\n  syncTree: SyncTree,\n  operation: Operation\n): Event[] {\n  return syncTreeApplyOperationHelper_(\n    operation,\n    syncTree.syncPointTree_,\n    /*serverCache=*/ null,\n    writeTreeChildWrites(syncTree.pendingWriteTree_, newEmptyPath())\n  );\n}\n\n/**\n * Recursive helper for applyOperationToSyncPoints_\n */\nfunction syncTreeApplyOperationHelper_(\n  operation: Operation,\n  syncPointTree: ImmutableTree<SyncPoint>,\n  serverCache: Node | null,\n  writesCache: WriteTreeRef\n): Event[] {\n  if (pathIsEmpty(operation.path)) {\n    return syncTreeApplyOperationDescendantsHelper_(\n      operation,\n      syncPointTree,\n      serverCache,\n      writesCache\n    );\n  } else {\n    const syncPoint = syncPointTree.get(newEmptyPath());\n\n    // If we don't have cached server data, see if we can get it from this SyncPoint.\n    if (serverCache == null && syncPoint != null) {\n      serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n    }\n\n    let events: Event[] = [];\n    const childName = pathGetFront(operation.path);\n    const childOperation = operation.operationForChild(childName);\n    const childTree = syncPointTree.children.get(childName);\n    if (childTree && childOperation) {\n      const childServerCache = serverCache\n        ? serverCache.getImmediateChild(childName)\n        : null;\n      const childWritesCache = writeTreeRefChild(writesCache, childName);\n      events = events.concat(\n        syncTreeApplyOperationHelper_(\n          childOperation,\n          childTree,\n          childServerCache,\n          childWritesCache\n        )\n      );\n    }\n\n    if (syncPoint) {\n      events = events.concat(\n        syncPointApplyOperation(syncPoint, operation, writesCache, serverCache)\n      );\n    }\n\n    return events;\n  }\n}\n\n/**\n * Recursive helper for applyOperationToSyncPoints_\n */\nfunction syncTreeApplyOperationDescendantsHelper_(\n  operation: Operation,\n  syncPointTree: ImmutableTree<SyncPoint>,\n  serverCache: Node | null,\n  writesCache: WriteTreeRef\n): Event[] {\n  const syncPoint = syncPointTree.get(newEmptyPath());\n\n  // If we don't have cached server data, see if we can get it from this SyncPoint.\n  if (serverCache == null && syncPoint != null) {\n    serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n\n  let events: Event[] = [];\n  syncPointTree.children.inorderTraversal((childName, childTree) => {\n    const childServerCache = serverCache\n      ? serverCache.getImmediateChild(childName)\n      : null;\n    const childWritesCache = writeTreeRefChild(writesCache, childName);\n    const childOperation = operation.operationForChild(childName);\n    if (childOperation) {\n      events = events.concat(\n        syncTreeApplyOperationDescendantsHelper_(\n          childOperation,\n          childTree,\n          childServerCache,\n          childWritesCache\n        )\n      );\n    }\n  });\n\n  if (syncPoint) {\n    events = events.concat(\n      syncPointApplyOperation(syncPoint, operation, writesCache, serverCache)\n    );\n  }\n\n  return events;\n}\n\nfunction syncTreeCreateListenerForView_(\n  syncTree: SyncTree,\n  view: View\n): { hashFn(): string; onComplete(a: string, b?: unknown): Event[] } {\n  const query = view.query;\n  const tag = syncTreeTagForQuery(syncTree, query);\n\n  return {\n    hashFn: () => {\n      const cache = viewGetServerCache(view) || ChildrenNode.EMPTY_NODE;\n      return cache.hash();\n    },\n    onComplete: (status: string): Event[] => {\n      if (status === 'ok') {\n        if (tag) {\n          return syncTreeApplyTaggedListenComplete(syncTree, query._path, tag);\n        } else {\n          return syncTreeApplyListenComplete(syncTree, query._path);\n        }\n      } else {\n        // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\n        // Note that this may need to be scoped to just this listener if we change permissions on filtered children\n        const error = errorForServerCode(status, query);\n        return syncTreeRemoveEventRegistration(\n          syncTree,\n          query,\n          /*eventRegistration*/ null,\n          error\n        );\n      }\n    }\n  };\n}\n\n/**\n * Return the tag associated with the given query.\n */\nexport function syncTreeTagForQuery(\n  syncTree: SyncTree,\n  query: QueryContext\n): number | null {\n  const queryKey = syncTreeMakeQueryKey_(query);\n  return syncTree.queryToTagMap.get(queryKey);\n}\n\n/**\n * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\n */\nfunction syncTreeMakeQueryKey_(query: QueryContext): string {\n  return query._path.toString() + '$' + query._queryIdentifier;\n}\n\n/**\n * Return the query associated with the given tag, if we have one\n */\nfunction syncTreeQueryKeyForTag_(\n  syncTree: SyncTree,\n  tag: number\n): string | null {\n  return syncTree.tagToQueryMap.get(tag);\n}\n\n/**\n * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\n */\nfunction syncTreeParseQueryKey_(queryKey: string): {\n  queryId: string;\n  path: Path;\n} {\n  const splitIndex = queryKey.indexOf('$');\n  assert(\n    splitIndex !== -1 && splitIndex < queryKey.length - 1,\n    'Bad queryKey.'\n  );\n  return {\n    queryId: queryKey.substr(splitIndex + 1),\n    path: new Path(queryKey.substr(0, splitIndex))\n  };\n}\n\n/**\n * A helper method to apply tagged operations\n */\nfunction syncTreeApplyTaggedOperation_(\n  syncTree: SyncTree,\n  queryPath: Path,\n  operation: Operation\n): Event[] {\n  const syncPoint = syncTree.syncPointTree_.get(queryPath);\n  assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\n  const writesCache = writeTreeChildWrites(\n    syncTree.pendingWriteTree_,\n    queryPath\n  );\n  return syncPointApplyOperation(syncPoint, operation, writesCache, null);\n}\n\n/**\n * This collapses multiple unfiltered views into a single view, since we only need a single\n * listener for them.\n */\nfunction syncTreeCollectDistinctViewsForSubTree_(\n  subtree: ImmutableTree<SyncPoint>\n): View[] {\n  return subtree.fold<View[]>((relativePath, maybeChildSyncPoint, childMap) => {\n    if (maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {\n      const completeView = syncPointGetCompleteView(maybeChildSyncPoint);\n      return [completeView];\n    } else {\n      // No complete view here, flatten any deeper listens into an array\n      let views: View[] = [];\n      if (maybeChildSyncPoint) {\n        views = syncPointGetQueryViews(maybeChildSyncPoint);\n      }\n      each(childMap, (_key: string, childViews: View[]) => {\n        views = views.concat(childViews);\n      });\n      return views;\n    }\n  });\n}\n\n/**\n * Normalizes a query to a query we send the server for listening\n *\n * @returns The normalized query\n */\nfunction syncTreeQueryForListening_(query: QueryContext): QueryContext {\n  if (query._queryParams.loadsAllData() && !query._queryParams.isDefault()) {\n    // We treat queries that load all data as default queries\n    // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\n    // from Query\n    return new (syncTreeGetReferenceConstructor())(query._repo, query._path);\n  } else {\n    return query;\n  }\n}\n\nfunction syncTreeRemoveTags_(syncTree: SyncTree, queries: QueryContext[]) {\n  for (let j = 0; j < queries.length; ++j) {\n    const removedQuery = queries[j];\n    if (!removedQuery._queryParams.loadsAllData()) {\n      // We should have a tag for this\n      const removedQueryKey = syncTreeMakeQueryKey_(removedQuery);\n      const removedQueryTag = syncTree.queryToTagMap.get(removedQueryKey);\n      syncTree.queryToTagMap.delete(removedQueryKey);\n      syncTree.tagToQueryMap.delete(removedQueryTag);\n    }\n  }\n}\n\n/**\n * Static accessor for query tags.\n */\nfunction syncTreeGetNextQueryTag_(): number {\n  return syncTreeNextQueryTag_++;\n}\n\n/**\n * For a given new listen, manage the de-duplication of outstanding subscriptions.\n *\n * @returns This method can return events to support synchronous data sources\n */\nfunction syncTreeSetupListener_(\n  syncTree: SyncTree,\n  query: QueryContext,\n  view: View\n): Event[] {\n  const path = query._path;\n  const tag = syncTreeTagForQuery(syncTree, query);\n  const listener = syncTreeCreateListenerForView_(syncTree, view);\n\n  const events = syncTree.listenProvider_.startListening(\n    syncTreeQueryForListening_(query),\n    tag,\n    listener.hashFn,\n    listener.onComplete\n  );\n\n  const subtree = syncTree.syncPointTree_.subtree(path);\n  // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\n  // may need to shadow other listens as well.\n  if (tag) {\n    assert(\n      !syncPointHasCompleteView(subtree.value),\n      \"If we're adding a query, it shouldn't be shadowed\"\n    );\n  } else {\n    // Shadow everything at or below this location, this is a default listener.\n    const queriesToStop = subtree.fold<QueryContext[]>(\n      (relativePath, maybeChildSyncPoint, childMap) => {\n        if (\n          !pathIsEmpty(relativePath) &&\n          maybeChildSyncPoint &&\n          syncPointHasCompleteView(maybeChildSyncPoint)\n        ) {\n          return [syncPointGetCompleteView(maybeChildSyncPoint).query];\n        } else {\n          // No default listener here, flatten any deeper queries into an array\n          let queries: QueryContext[] = [];\n          if (maybeChildSyncPoint) {\n            queries = queries.concat(\n              syncPointGetQueryViews(maybeChildSyncPoint).map(\n                view => view.query\n              )\n            );\n          }\n          each(childMap, (_key: string, childQueries: QueryContext[]) => {\n            queries = queries.concat(childQueries);\n          });\n          return queries;\n        }\n      }\n    );\n    for (let i = 0; i < queriesToStop.length; ++i) {\n      const queryToStop = queriesToStop[i];\n      syncTree.listenProvider_.stopListening(\n        syncTreeQueryForListening_(queryToStop),\n        syncTreeTagForQuery(syncTree, queryToStop)\n      );\n    }\n  }\n  return events;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { LeafNode } from '../snap/LeafNode';\nimport { Node } from '../snap/Node';\nimport { nodeFromJSON } from '../snap/nodeFromJSON';\nimport { SyncTree, syncTreeCalcCompleteEventCache } from '../SyncTree';\n\nimport { Indexable } from './misc';\nimport { Path, pathChild } from './Path';\n\n/* It's critical for performance that we do not calculate actual values from a SyncTree\n * unless and until the value is needed. Because we expose both a SyncTree and Node\n * version of deferred value resolution, we ned a wrapper class that will let us share\n * code.\n *\n * @see https://github.com/firebase/firebase-js-sdk/issues/2487\n */\ninterface ValueProvider {\n  getImmediateChild(childName: string): ValueProvider;\n  node(): Node;\n}\n\nclass ExistingValueProvider implements ValueProvider {\n  constructor(readonly node_: Node) {}\n\n  getImmediateChild(childName: string): ValueProvider {\n    const child = this.node_.getImmediateChild(childName);\n    return new ExistingValueProvider(child);\n  }\n\n  node(): Node {\n    return this.node_;\n  }\n}\n\nclass DeferredValueProvider implements ValueProvider {\n  private syncTree_: SyncTree;\n  private path_: Path;\n\n  constructor(syncTree: SyncTree, path: Path) {\n    this.syncTree_ = syncTree;\n    this.path_ = path;\n  }\n\n  getImmediateChild(childName: string): ValueProvider {\n    const childPath = pathChild(this.path_, childName);\n    return new DeferredValueProvider(this.syncTree_, childPath);\n  }\n\n  node(): Node {\n    return syncTreeCalcCompleteEventCache(this.syncTree_, this.path_);\n  }\n}\n\n/**\n * Generate placeholders for deferred values.\n */\nexport const generateWithValues = function (\n  values: {\n    [k: string]: unknown;\n  } | null\n): { [k: string]: unknown } {\n  values = values || {};\n  values['timestamp'] = values['timestamp'] || new Date().getTime();\n  return values;\n};\n\n/**\n * Value to use when firing local events. When writing server values, fire\n * local events with an approximate value, otherwise return value as-is.\n */\nexport const resolveDeferredLeafValue = function (\n  value: { [k: string]: unknown } | string | number | boolean,\n  existingVal: ValueProvider,\n  serverValues: { [k: string]: unknown }\n): string | number | boolean {\n  if (!value || typeof value !== 'object') {\n    return value as string | number | boolean;\n  }\n  assert('.sv' in value, 'Unexpected leaf node or priority contents');\n\n  if (typeof value['.sv'] === 'string') {\n    return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);\n  } else if (typeof value['.sv'] === 'object') {\n    return resolveComplexDeferredValue(value['.sv'], existingVal, serverValues);\n  } else {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));\n  }\n};\n\nconst resolveScalarDeferredValue = function (\n  op: string,\n  existing: ValueProvider,\n  serverValues: { [k: string]: unknown }\n): string | number | boolean {\n  switch (op) {\n    case 'timestamp':\n      return serverValues['timestamp'] as string | number | boolean;\n    default:\n      assert(false, 'Unexpected server value: ' + op);\n  }\n};\n\nconst resolveComplexDeferredValue = function (\n  op: object,\n  existing: ValueProvider,\n  unused: { [k: string]: unknown }\n): string | number | boolean {\n  if (!op.hasOwnProperty('increment')) {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));\n  }\n  const delta = op['increment'];\n  if (typeof delta !== 'number') {\n    assert(false, 'Unexpected increment value: ' + delta);\n  }\n\n  const existingNode = existing.node();\n  assert(\n    existingNode !== null && typeof existingNode !== 'undefined',\n    'Expected ChildrenNode.EMPTY_NODE for nulls'\n  );\n\n  // Incrementing a non-number sets the value to the incremented amount\n  if (!existingNode.isLeafNode()) {\n    return delta;\n  }\n\n  const leaf = existingNode as LeafNode;\n  const existingVal = leaf.getValue();\n  if (typeof existingVal !== 'number') {\n    return delta;\n  }\n\n  // No need to do over/underflow arithmetic here because JS only handles floats under the covers\n  return existingVal + delta;\n};\n\n/**\n * Recursively replace all deferred values and priorities in the tree with the\n * specified generated replacement values.\n * @param path - path to which write is relative\n * @param node - new data written at path\n * @param syncTree - current data\n */\nexport const resolveDeferredValueTree = function (\n  path: Path,\n  node: Node,\n  syncTree: SyncTree,\n  serverValues: Indexable\n): Node {\n  return resolveDeferredValue(\n    node,\n    new DeferredValueProvider(syncTree, path),\n    serverValues\n  );\n};\n\n/**\n * Recursively replace all deferred values and priorities in the node with the\n * specified generated replacement values.  If there are no server values in the node,\n * it'll be returned as-is.\n */\nexport const resolveDeferredValueSnapshot = function (\n  node: Node,\n  existing: Node,\n  serverValues: Indexable\n): Node {\n  return resolveDeferredValue(\n    node,\n    new ExistingValueProvider(existing),\n    serverValues\n  );\n};\n\nfunction resolveDeferredValue(\n  node: Node,\n  existingVal: ValueProvider,\n  serverValues: Indexable\n): Node {\n  const rawPri = node.getPriority().val() as\n    | Indexable\n    | boolean\n    | null\n    | number\n    | string;\n  const priority = resolveDeferredLeafValue(\n    rawPri,\n    existingVal.getImmediateChild('.priority'),\n    serverValues\n  );\n  let newNode: Node;\n\n  if (node.isLeafNode()) {\n    const leafNode = node as LeafNode;\n    const value = resolveDeferredLeafValue(\n      leafNode.getValue(),\n      existingVal,\n      serverValues\n    );\n    if (\n      value !== leafNode.getValue() ||\n      priority !== leafNode.getPriority().val()\n    ) {\n      return new LeafNode(value, nodeFromJSON(priority));\n    } else {\n      return node;\n    }\n  } else {\n    const childrenNode = node as ChildrenNode;\n    newNode = childrenNode;\n    if (priority !== childrenNode.getPriority().val()) {\n      newNode = newNode.updatePriority(new LeafNode(priority));\n    }\n    childrenNode.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\n      const newChildNode = resolveDeferredValue(\n        childNode,\n        existingVal.getImmediateChild(childName),\n        serverValues\n      );\n      if (newChildNode !== childNode) {\n        newNode = newNode.updateImmediateChild(childName, newChildNode);\n      }\n    });\n    return newNode;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains, safeGet } from '@firebase/util';\n\nimport { Path, pathGetFront, pathPopFront } from './Path';\nimport { each } from './util';\n\n/**\n * Node in a Tree.\n */\nexport interface TreeNode<T> {\n  // TODO: Consider making accessors that create children and value lazily or\n  // separate Internal / Leaf 'types'.\n  children: Record<string, TreeNode<T>>;\n  childCount: number;\n  value?: T;\n}\n\n/**\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\n * children.\n */\nexport class Tree<T> {\n  /**\n   * @param name - Optional name of the node.\n   * @param parent - Optional parent node.\n   * @param node - Optional node to wrap.\n   */\n  constructor(\n    readonly name: string = '',\n    readonly parent: Tree<T> | null = null,\n    public node: TreeNode<T> = { children: {}, childCount: 0 }\n  ) {}\n}\n\n/**\n * Returns a sub-Tree for the given path.\n *\n * @param pathObj - Path to look up.\n * @returns Tree for path.\n */\nexport function treeSubTree<T>(tree: Tree<T>, pathObj: string | Path): Tree<T> {\n  // TODO: Require pathObj to be Path?\n  let path = pathObj instanceof Path ? pathObj : new Path(pathObj);\n  let child = tree,\n    next = pathGetFront(path);\n  while (next !== null) {\n    const childNode = safeGet(child.node.children, next) || {\n      children: {},\n      childCount: 0\n    };\n    child = new Tree<T>(next, child, childNode);\n    path = pathPopFront(path);\n    next = pathGetFront(path);\n  }\n\n  return child;\n}\n\n/**\n * Returns the data associated with this tree node.\n *\n * @returns The data or null if no data exists.\n */\nexport function treeGetValue<T>(tree: Tree<T>): T | undefined {\n  return tree.node.value;\n}\n\n/**\n * Sets data to this tree node.\n *\n * @param value - Value to set.\n */\nexport function treeSetValue<T>(tree: Tree<T>, value: T | undefined): void {\n  tree.node.value = value;\n  treeUpdateParents(tree);\n}\n\n/**\n * @returns Whether the tree has any children.\n */\nexport function treeHasChildren<T>(tree: Tree<T>): boolean {\n  return tree.node.childCount > 0;\n}\n\n/**\n * @returns Whethe rthe tree is empty (no value or children).\n */\nexport function treeIsEmpty<T>(tree: Tree<T>): boolean {\n  return treeGetValue(tree) === undefined && !treeHasChildren(tree);\n}\n\n/**\n * Calls action for each child of this tree node.\n *\n * @param action - Action to be called for each child.\n */\nexport function treeForEachChild<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void\n): void {\n  each(tree.node.children, (child: string, childTree: TreeNode<T>) => {\n    action(new Tree<T>(child, tree, childTree));\n  });\n}\n\n/**\n * Does a depth-first traversal of this node's descendants, calling action for each one.\n *\n * @param action - Action to be called for each child.\n * @param includeSelf - Whether to call action on this node as well. Defaults to\n *   false.\n * @param childrenFirst - Whether to call action on children before calling it on\n *   parent.\n */\nexport function treeForEachDescendant<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void,\n  includeSelf?: boolean,\n  childrenFirst?: boolean\n): void {\n  if (includeSelf && !childrenFirst) {\n    action(tree);\n  }\n\n  treeForEachChild(tree, child => {\n    treeForEachDescendant(child, action, true, childrenFirst);\n  });\n\n  if (includeSelf && childrenFirst) {\n    action(tree);\n  }\n}\n\n/**\n * Calls action on each ancestor node.\n *\n * @param action - Action to be called on each parent; return\n *   true to abort.\n * @param includeSelf - Whether to call action on this node as well.\n * @returns true if the action callback returned true.\n */\nexport function treeForEachAncestor<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => unknown,\n  includeSelf?: boolean\n): boolean {\n  let node = includeSelf ? tree : tree.parent;\n  while (node !== null) {\n    if (action(node)) {\n      return true;\n    }\n    node = node.parent;\n  }\n  return false;\n}\n\n/**\n * Does a depth-first traversal of this node's descendants.  When a descendant with a value\n * is found, action is called on it and traversal does not continue inside the node.\n * Action is *not* called on this node.\n *\n * @param action - Action to be called for each child.\n */\nexport function treeForEachImmediateDescendantWithValue<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void\n): void {\n  treeForEachChild(tree, child => {\n    if (treeGetValue(child) !== undefined) {\n      action(child);\n    } else {\n      treeForEachImmediateDescendantWithValue(child, action);\n    }\n  });\n}\n\n/**\n * @returns The path of this tree node, as a Path.\n */\nexport function treeGetPath<T>(tree: Tree<T>) {\n  return new Path(\n    tree.parent === null\n      ? tree.name\n      : treeGetPath(tree.parent) + '/' + tree.name\n  );\n}\n\n/**\n * Adds or removes this child from its parent based on whether it's empty or not.\n */\nfunction treeUpdateParents<T>(tree: Tree<T>) {\n  if (tree.parent !== null) {\n    treeUpdateChild(tree.parent, tree.name, tree);\n  }\n}\n\n/**\n * Adds or removes the passed child to this tree node, depending on whether it's empty.\n *\n * @param childName - The name of the child to update.\n * @param child - The child to update.\n */\nfunction treeUpdateChild<T>(tree: Tree<T>, childName: string, child: Tree<T>) {\n  const childEmpty = treeIsEmpty(child);\n  const childExists = contains(tree.node.children, childName);\n  if (childEmpty && childExists) {\n    delete tree.node.children[childName];\n    tree.node.childCount--;\n    treeUpdateParents(tree);\n  } else if (!childEmpty && !childExists) {\n    tree.node.children[childName] = child.node;\n    tree.node.childCount++;\n    treeUpdateParents(tree);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  contains,\n  errorPrefix as errorPrefixFxn,\n  safeGet,\n  stringLength\n} from '@firebase/util';\n\nimport { RepoInfo } from '../RepoInfo';\n\nimport {\n  Path,\n  pathChild,\n  pathCompare,\n  pathContains,\n  pathGetBack,\n  pathGetFront,\n  pathSlice,\n  ValidationPath,\n  validationPathPop,\n  validationPathPush,\n  validationPathToErrorString\n} from './Path';\nimport { each, isInvalidJSONNumber } from './util';\n\n/**\n * True for invalid Firebase keys\n */\nexport const INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\n\n/**\n * True for invalid Firebase paths.\n * Allows '/' in paths.\n */\nexport const INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\n\n/**\n * Maximum number of characters to allow in leaf value\n */\nexport const MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\n\nexport const isValidKey = function (key: unknown): boolean {\n  return (\n    typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key)\n  );\n};\n\nexport const isValidPathString = function (pathString: string): boolean {\n  return (\n    typeof pathString === 'string' &&\n    pathString.length !== 0 &&\n    !INVALID_PATH_REGEX_.test(pathString)\n  );\n};\n\nexport const isValidRootPathString = function (pathString: string): boolean {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  return isValidPathString(pathString);\n};\n\nexport const isValidPriority = function (priority: unknown): boolean {\n  return (\n    priority === null ||\n    typeof priority === 'string' ||\n    (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||\n    (priority &&\n      typeof priority === 'object' &&\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      contains(priority as any, '.sv'))\n  );\n};\n\n/**\n * Pre-validate a datum passed as an argument to Firebase function.\n */\nexport const validateFirebaseDataArg = function (\n  fnName: string,\n  value: unknown,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && value === undefined) {\n    return;\n  }\n\n  validateFirebaseData(errorPrefixFxn(fnName, 'value'), value, path);\n};\n\n/**\n * Validate a data object client-side before sending to server.\n */\nexport const validateFirebaseData = function (\n  errorPrefix: string,\n  data: unknown,\n  path_: Path | ValidationPath\n) {\n  const path =\n    path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\n\n  if (data === undefined) {\n    throw new Error(\n      errorPrefix + 'contains undefined ' + validationPathToErrorString(path)\n    );\n  }\n  if (typeof data === 'function') {\n    throw new Error(\n      errorPrefix +\n        'contains a function ' +\n        validationPathToErrorString(path) +\n        ' with contents = ' +\n        data.toString()\n    );\n  }\n  if (isInvalidJSONNumber(data)) {\n    throw new Error(\n      errorPrefix +\n        'contains ' +\n        data.toString() +\n        ' ' +\n        validationPathToErrorString(path)\n    );\n  }\n\n  // Check max leaf size, but try to avoid the utf8 conversion if we can.\n  if (\n    typeof data === 'string' &&\n    data.length > MAX_LEAF_SIZE_ / 3 &&\n    stringLength(data) > MAX_LEAF_SIZE_\n  ) {\n    throw new Error(\n      errorPrefix +\n        'contains a string greater than ' +\n        MAX_LEAF_SIZE_ +\n        ' utf8 bytes ' +\n        validationPathToErrorString(path) +\n        \" ('\" +\n        data.substring(0, 50) +\n        \"...')\"\n    );\n  }\n\n  // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\n  // to save extra walking of large objects.\n  if (data && typeof data === 'object') {\n    let hasDotValue = false;\n    let hasActualChild = false;\n    each(data, (key: string, value: unknown) => {\n      if (key === '.value') {\n        hasDotValue = true;\n      } else if (key !== '.priority' && key !== '.sv') {\n        hasActualChild = true;\n        if (!isValidKey(key)) {\n          throw new Error(\n            errorPrefix +\n              ' contains an invalid key (' +\n              key +\n              ') ' +\n              validationPathToErrorString(path) +\n              '.  Keys must be non-empty strings ' +\n              'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n          );\n        }\n      }\n\n      validationPathPush(path, key);\n      validateFirebaseData(errorPrefix, value, path);\n      validationPathPop(path);\n    });\n\n    if (hasDotValue && hasActualChild) {\n      throw new Error(\n        errorPrefix +\n          ' contains \".value\" child ' +\n          validationPathToErrorString(path) +\n          ' in addition to actual children.'\n      );\n    }\n  }\n};\n\n/**\n * Pre-validate paths passed in the firebase function.\n */\nexport const validateFirebaseMergePaths = function (\n  errorPrefix: string,\n  mergePaths: Path[]\n) {\n  let i, curPath: Path;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    const keys = pathSlice(curPath);\n    for (let j = 0; j < keys.length; j++) {\n      if (keys[j] === '.priority' && j === keys.length - 1) {\n        // .priority is OK\n      } else if (!isValidKey(keys[j])) {\n        throw new Error(\n          errorPrefix +\n            'contains an invalid key (' +\n            keys[j] +\n            ') in path ' +\n            curPath.toString() +\n            '. Keys must be non-empty strings ' +\n            'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n        );\n      }\n    }\n  }\n\n  // Check that update keys are not descendants of each other.\n  // We rely on the property that sorting guarantees that ancestors come\n  // right before descendants.\n  mergePaths.sort(pathCompare);\n  let prevPath: Path | null = null;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    if (prevPath !== null && pathContains(prevPath, curPath)) {\n      throw new Error(\n        errorPrefix +\n          'contains a path ' +\n          prevPath.toString() +\n          ' that is ancestor of another path ' +\n          curPath.toString()\n      );\n    }\n    prevPath = curPath;\n  }\n};\n\n/**\n * pre-validate an object passed as an argument to firebase function (\n * must be an object - e.g. for firebase.update()).\n */\nexport const validateFirebaseMergeDataArg = function (\n  fnName: string,\n  data: unknown,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && data === undefined) {\n    return;\n  }\n\n  const errorPrefix = errorPrefixFxn(fnName, 'values');\n\n  if (!(data && typeof data === 'object') || Array.isArray(data)) {\n    throw new Error(\n      errorPrefix + ' must be an object containing the children to replace.'\n    );\n  }\n\n  const mergePaths: Path[] = [];\n  each(data, (key: string, value: unknown) => {\n    const curPath = new Path(key);\n    validateFirebaseData(errorPrefix, value, pathChild(path, curPath));\n    if (pathGetBack(curPath) === '.priority') {\n      if (!isValidPriority(value)) {\n        throw new Error(\n          errorPrefix +\n            \"contains an invalid value for '\" +\n            curPath.toString() +\n            \"', which must be a valid \" +\n            'Firebase priority (a string, finite number, server value, or null).'\n        );\n      }\n    }\n    mergePaths.push(curPath);\n  });\n  validateFirebaseMergePaths(errorPrefix, mergePaths);\n};\n\nexport const validatePriority = function (\n  fnName: string,\n  priority: unknown,\n  optional: boolean\n) {\n  if (optional && priority === undefined) {\n    return;\n  }\n  if (isInvalidJSONNumber(priority)) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'priority') +\n        'is ' +\n        priority.toString() +\n        ', but must be a valid Firebase priority (a string, finite number, ' +\n        'server value, or null).'\n    );\n  }\n  // Special case to allow importing data with a .sv.\n  if (!isValidPriority(priority)) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'priority') +\n        'must be a valid Firebase priority ' +\n        '(a string, finite number, server value, or null).'\n    );\n  }\n};\n\nexport const validateKey = function (\n  fnName: string,\n  argumentName: string,\n  key: string,\n  optional: boolean\n) {\n  if (optional && key === undefined) {\n    return;\n  }\n  if (!isValidKey(key)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) +\n        'was an invalid key = \"' +\n        key +\n        '\".  Firebase keys must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").'\n    );\n  }\n};\n\n/**\n * @internal\n */\nexport const validatePathString = function (\n  fnName: string,\n  argumentName: string,\n  pathString: string,\n  optional: boolean\n) {\n  if (optional && pathString === undefined) {\n    return;\n  }\n\n  if (!isValidPathString(pathString)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) +\n        'was an invalid path = \"' +\n        pathString +\n        '\". Paths must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"'\n    );\n  }\n};\n\nexport const validateRootPathString = function (\n  fnName: string,\n  argumentName: string,\n  pathString: string,\n  optional: boolean\n) {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  validatePathString(fnName, argumentName, pathString, optional);\n};\n\n/**\n * @internal\n */\nexport const validateWritablePath = function (fnName: string, path: Path) {\n  if (pathGetFront(path) === '.info') {\n    throw new Error(fnName + \" failed = Can't modify data under /.info/\");\n  }\n};\n\nexport const validateUrl = function (\n  fnName: string,\n  parsedUrl: { repoInfo: RepoInfo; path: Path }\n) {\n  // TODO = Validate server better.\n  const pathString = parsedUrl.path.toString();\n  if (\n    !(typeof parsedUrl.repoInfo.host === 'string') ||\n    parsedUrl.repoInfo.host.length === 0 ||\n    (!isValidKey(parsedUrl.repoInfo.namespace) &&\n      parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||\n    (pathString.length !== 0 && !isValidRootPathString(pathString))\n  ) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'url') +\n        'must be a valid firebase URL and ' +\n        'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".'\n    );\n  }\n};\n\nexport const validateString = function (\n  fnName: string,\n  argumentName: string,\n  string: unknown,\n  optional: boolean\n) {\n  if (optional && string === undefined) {\n    return;\n  }\n  if (!(typeof string === 'string')) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) + 'must be a valid string.'\n    );\n  }\n};\n\nexport const validateObject = function (\n  fnName: string,\n  argumentName: string,\n  obj: unknown,\n  optional: boolean\n) {\n  if (optional && obj === undefined) {\n    return;\n  }\n  if (!(obj && typeof obj === 'object') || obj === null) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) + 'must be a valid object.'\n    );\n  }\n};\n\nexport const validateObjectContainsKey = function (\n  fnName: string,\n  argumentName: string,\n  obj: unknown,\n  key: string,\n  optional: boolean,\n  optType?: string\n) {\n  const objectContainsKey =\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    obj && typeof obj === 'object' && contains(obj as any, key);\n\n  if (!objectContainsKey) {\n    if (optional) {\n      return;\n    } else {\n      throw new Error(\n        errorPrefixFxn(fnName, argumentName) +\n          'must contain the key \"' +\n          key +\n          '\"'\n      );\n    }\n  }\n\n  if (optType) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const val = safeGet(obj as any, key);\n    if (\n      (optType === 'number' && !(typeof val === 'number')) ||\n      (optType === 'string' && !(typeof val === 'string')) ||\n      (optType === 'boolean' && !(typeof val === 'boolean')) ||\n      (optType === 'function' && !(typeof val === 'function')) ||\n      (optType === 'object' && !(typeof val === 'object') && val)\n    ) {\n      if (optional) {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentName) +\n            'contains invalid value for key \"' +\n            key +\n            '\" (must be of type \"' +\n            optType +\n            '\")'\n        );\n      } else {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentName) +\n            'must contain the key \"' +\n            key +\n            '\" with type \"' +\n            optType +\n            '\"'\n        );\n      }\n    }\n  }\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path, pathContains, pathEquals } from '../util/Path';\nimport { exceptionGuard, log, logger } from '../util/util';\n\nimport { Event } from './Event';\n\n/**\n * The event queue serves a few purposes:\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\n *    events being queued.\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\n *    left off, ensuring that the events are still raised synchronously and in order.\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\n *    events are raised synchronously.\n *\n * NOTE: This can all go away if/when we move to async events.\n *\n */\nexport class EventQueue {\n  eventLists_: EventList[] = [];\n\n  /**\n   * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\n   */\n  recursionDepth_ = 0;\n}\n\n/**\n * @param eventDataList - The new events to queue.\n */\nexport function eventQueueQueueEvents(\n  eventQueue: EventQueue,\n  eventDataList: Event[]\n) {\n  // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\n  let currList: EventList | null = null;\n  for (let i = 0; i < eventDataList.length; i++) {\n    const data = eventDataList[i];\n    const path = data.getPath();\n    if (currList !== null && !pathEquals(path, currList.path)) {\n      eventQueue.eventLists_.push(currList);\n      currList = null;\n    }\n\n    if (currList === null) {\n      currList = { events: [], path };\n    }\n\n    currList.events.push(data);\n  }\n  if (currList) {\n    eventQueue.eventLists_.push(currList);\n  }\n}\n\n/**\n * Queues the specified events and synchronously raises all events (including previously queued ones)\n * for the specified path.\n *\n * It is assumed that the new events are all for the specified path.\n *\n * @param path - The path to raise events for.\n * @param eventDataList - The new events to raise.\n */\nexport function eventQueueRaiseEventsAtPath(\n  eventQueue: EventQueue,\n  path: Path,\n  eventDataList: Event[]\n) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath =>\n    pathEquals(eventPath, path)\n  );\n}\n\n/**\n * Queues the specified events and synchronously raises all events (including previously queued ones) for\n * locations related to the specified change path (i.e. all ancestors and descendants).\n *\n * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\n *\n * @param changedPath - The path to raise events for.\n * @param eventDataList - The events to raise\n */\nexport function eventQueueRaiseEventsForChangedPath(\n  eventQueue: EventQueue,\n  changedPath: Path,\n  eventDataList: Event[]\n) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(\n    eventQueue,\n    eventPath =>\n      pathContains(eventPath, changedPath) ||\n      pathContains(changedPath, eventPath)\n  );\n}\n\nfunction eventQueueRaiseQueuedEventsMatchingPredicate(\n  eventQueue: EventQueue,\n  predicate: (path: Path) => boolean\n) {\n  eventQueue.recursionDepth_++;\n\n  let sentAll = true;\n  for (let i = 0; i < eventQueue.eventLists_.length; i++) {\n    const eventList = eventQueue.eventLists_[i];\n    if (eventList) {\n      const eventPath = eventList.path;\n      if (predicate(eventPath)) {\n        eventListRaise(eventQueue.eventLists_[i]);\n        eventQueue.eventLists_[i] = null;\n      } else {\n        sentAll = false;\n      }\n    }\n  }\n\n  if (sentAll) {\n    eventQueue.eventLists_ = [];\n  }\n\n  eventQueue.recursionDepth_--;\n}\n\ninterface EventList {\n  events: Event[];\n  path: Path;\n}\n\n/**\n * Iterates through the list and raises each event\n */\nfunction eventListRaise(eventList: EventList) {\n  for (let i = 0; i < eventList.events.length; i++) {\n    const eventData = eventList.events[i];\n    if (eventData !== null) {\n      eventList.events[i] = null;\n      const eventFn = eventData.getEventRunner();\n      if (logger) {\n        log('event: ' + eventData.toString());\n      }\n      exceptionGuard(eventFn);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  contains,\n  isEmpty,\n  map,\n  safeGet,\n  stringify\n} from '@firebase/util';\n\nimport { ValueEventRegistration } from '../api/Reference_impl';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { PersistentConnection } from './PersistentConnection';\nimport { ReadonlyRestClient } from './ReadonlyRestClient';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { nodeFromJSON } from './snap/nodeFromJSON';\nimport { SnapshotHolder } from './SnapshotHolder';\nimport {\n  newSparseSnapshotTree,\n  SparseSnapshotTree,\n  sparseSnapshotTreeForEachTree,\n  sparseSnapshotTreeForget,\n  sparseSnapshotTreeRemember\n} from './SparseSnapshotTree';\nimport { StatsCollection } from './stats/StatsCollection';\nimport { StatsListener } from './stats/StatsListener';\nimport {\n  statsManagerGetCollection,\n  statsManagerGetOrCreateReporter\n} from './stats/StatsManager';\nimport { StatsReporter, statsReporterIncludeStat } from './stats/StatsReporter';\nimport {\n  SyncTree,\n  syncTreeAckUserWrite,\n  syncTreeAddEventRegistration,\n  syncTreeApplyServerMerge,\n  syncTreeApplyServerOverwrite,\n  syncTreeApplyTaggedQueryMerge,\n  syncTreeApplyTaggedQueryOverwrite,\n  syncTreeApplyUserMerge,\n  syncTreeApplyUserOverwrite,\n  syncTreeCalcCompleteEventCache,\n  syncTreeGetServerValue,\n  syncTreeRemoveEventRegistration,\n  syncTreeTagForQuery\n} from './SyncTree';\nimport { Indexable } from './util/misc';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathGetFront,\n  pathPopFront\n} from './util/Path';\nimport {\n  generateWithValues,\n  resolveDeferredValueSnapshot,\n  resolveDeferredValueTree\n} from './util/ServerValues';\nimport {\n  Tree,\n  treeForEachAncestor,\n  treeForEachChild,\n  treeForEachDescendant,\n  treeGetPath,\n  treeGetValue,\n  treeHasChildren,\n  treeSetValue,\n  treeSubTree\n} from './util/Tree';\nimport {\n  beingCrawled,\n  each,\n  exceptionGuard,\n  log,\n  LUIDGenerator,\n  warn\n} from './util/util';\nimport { isValidPriority, validateFirebaseData } from './util/validation';\nimport { Event } from './view/Event';\nimport {\n  EventQueue,\n  eventQueueQueueEvents,\n  eventQueueRaiseEventsAtPath,\n  eventQueueRaiseEventsForChangedPath\n} from './view/EventQueue';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\n\nconst INTERRUPT_REASON = 'repo_interrupt';\n\n/**\n * If a transaction does not succeed after 25 retries, we abort it. Among other\n * things this ensure that if there's ever a bug causing a mismatch between\n * client / server hashes for some data, we won't retry indefinitely.\n */\nconst MAX_TRANSACTION_RETRIES = 25;\n\nconst enum TransactionStatus {\n  // We've run the transaction and updated transactionResultData_ with the result, but it isn't currently sent to the\n  // server. A transaction will go from RUN -> SENT -> RUN if it comes back from the server as rejected due to\n  // mismatched hash.\n  RUN,\n\n  // We've run the transaction and sent it to the server and it's currently outstanding (hasn't come back as accepted\n  // or rejected yet).\n  SENT,\n\n  // Temporary state used to mark completed transactions (whether successful or aborted).  The transaction will be\n  // removed when we get a chance to prune completed ones.\n  COMPLETED,\n\n  // Used when an already-sent transaction needs to be aborted (e.g. due to a conflicting set() call that was made).\n  // If it comes back as unsuccessful, we'll abort it.\n  SENT_NEEDS_ABORT,\n\n  // Temporary state used to mark transactions that need to be aborted.\n  NEEDS_ABORT\n}\n\ninterface Transaction {\n  path: Path;\n  update: (a: unknown) => unknown;\n  onComplete: (\n    error: Error | null,\n    committed: boolean,\n    node: Node | null\n  ) => void;\n  status: TransactionStatus;\n  order: number;\n  applyLocally: boolean;\n  retryCount: number;\n  unwatcher: () => void;\n  abortReason: string | null;\n  currentWriteId: number;\n  currentInputSnapshot: Node | null;\n  currentOutputSnapshotRaw: Node | null;\n  currentOutputSnapshotResolved: Node | null;\n}\n\n/**\n * A connection to a single data repository.\n */\nexport class Repo {\n  /** Key for uniquely identifying this repo, used in RepoManager */\n  readonly key: string;\n\n  dataUpdateCount = 0;\n  infoSyncTree_: SyncTree;\n  serverSyncTree_: SyncTree;\n\n  stats_: StatsCollection;\n  statsListener_: StatsListener | null = null;\n  eventQueue_ = new EventQueue();\n  nextWriteId_ = 1;\n  server_: ServerActions;\n  statsReporter_: StatsReporter;\n  infoData_: SnapshotHolder;\n  interceptServerDataCallback_: ((a: string, b: unknown) => void) | null = null;\n\n  /** A list of data pieces and paths to be set when this client disconnects. */\n  onDisconnect_: SparseSnapshotTree = newSparseSnapshotTree();\n\n  /** Stores queues of outstanding transactions for Firebase locations. */\n  transactionQueueTree_ = new Tree<Transaction[]>();\n\n  // TODO: This should be @private but it's used by test_access.js and internal.js\n  persistentConnection_: PersistentConnection | null = null;\n\n  constructor(\n    public repoInfo_: RepoInfo,\n    public forceRestClient_: boolean,\n    public authTokenProvider_: AuthTokenProvider,\n    public appCheckProvider_: AppCheckTokenProvider\n  ) {\n    // This key is intentionally not updated if RepoInfo is later changed or replaced\n    this.key = this.repoInfo_.toURLString();\n  }\n\n  /**\n   * @returns The URL corresponding to the root of this Firebase.\n   */\n  toString(): string {\n    return (\n      (this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host\n    );\n  }\n}\n\nexport function repoStart(\n  repo: Repo,\n  appId: string,\n  authOverride?: object\n): void {\n  repo.stats_ = statsManagerGetCollection(repo.repoInfo_);\n\n  if (repo.forceRestClient_ || beingCrawled()) {\n    repo.server_ = new ReadonlyRestClient(\n      repo.repoInfo_,\n      (\n        pathString: string,\n        data: unknown,\n        isMerge: boolean,\n        tag: number | null\n      ) => {\n        repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n      },\n      repo.authTokenProvider_,\n      repo.appCheckProvider_\n    );\n\n    // Minor hack: Fire onConnect immediately, since there's no actual connection.\n    setTimeout(() => repoOnConnectStatus(repo, /* connectStatus= */ true), 0);\n  } else {\n    // Validate authOverride\n    if (typeof authOverride !== 'undefined' && authOverride !== null) {\n      if (typeof authOverride !== 'object') {\n        throw new Error(\n          'Only objects are supported for option databaseAuthVariableOverride'\n        );\n      }\n      try {\n        stringify(authOverride);\n      } catch (e) {\n        throw new Error('Invalid authOverride provided: ' + e);\n      }\n    }\n\n    repo.persistentConnection_ = new PersistentConnection(\n      repo.repoInfo_,\n      appId,\n      (\n        pathString: string,\n        data: unknown,\n        isMerge: boolean,\n        tag: number | null\n      ) => {\n        repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n      },\n      (connectStatus: boolean) => {\n        repoOnConnectStatus(repo, connectStatus);\n      },\n      (updates: object) => {\n        repoOnServerInfoUpdate(repo, updates);\n      },\n      repo.authTokenProvider_,\n      repo.appCheckProvider_,\n      authOverride\n    );\n\n    repo.server_ = repo.persistentConnection_;\n  }\n\n  repo.authTokenProvider_.addTokenChangeListener(token => {\n    repo.server_.refreshAuthToken(token);\n  });\n\n  repo.appCheckProvider_.addTokenChangeListener(result => {\n    repo.server_.refreshAppCheckToken(result.token);\n  });\n\n  // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\n  // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\n  repo.statsReporter_ = statsManagerGetOrCreateReporter(\n    repo.repoInfo_,\n    () => new StatsReporter(repo.stats_, repo.server_)\n  );\n\n  // Used for .info.\n  repo.infoData_ = new SnapshotHolder();\n  repo.infoSyncTree_ = new SyncTree({\n    startListening: (query, tag, currentHashFn, onComplete) => {\n      let infoEvents: Event[] = [];\n      const node = repo.infoData_.getNode(query._path);\n      // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\n      // on initial data...\n      if (!node.isEmpty()) {\n        infoEvents = syncTreeApplyServerOverwrite(\n          repo.infoSyncTree_,\n          query._path,\n          node\n        );\n        setTimeout(() => {\n          onComplete('ok');\n        }, 0);\n      }\n      return infoEvents;\n    },\n    stopListening: () => {}\n  });\n  repoUpdateInfo(repo, 'connected', false);\n\n  repo.serverSyncTree_ = new SyncTree({\n    startListening: (query, tag, currentHashFn, onComplete) => {\n      repo.server_.listen(query, currentHashFn, tag, (status, data) => {\n        const events = onComplete(status, data);\n        eventQueueRaiseEventsForChangedPath(\n          repo.eventQueue_,\n          query._path,\n          events\n        );\n      });\n      // No synchronous events for network-backed sync trees\n      return [];\n    },\n    stopListening: (query, tag) => {\n      repo.server_.unlisten(query, tag);\n    }\n  });\n}\n\n/**\n * @returns The time in milliseconds, taking the server offset into account if we have one.\n */\nexport function repoServerTime(repo: Repo): number {\n  const offsetNode = repo.infoData_.getNode(new Path('.info/serverTimeOffset'));\n  const offset = (offsetNode.val() as number) || 0;\n  return new Date().getTime() + offset;\n}\n\n/**\n * Generate ServerValues using some variables from the repo object.\n */\nexport function repoGenerateServerValues(repo: Repo): Indexable {\n  return generateWithValues({\n    timestamp: repoServerTime(repo)\n  });\n}\n\n/**\n * Called by realtime when we get new messages from the server.\n */\nfunction repoOnDataUpdate(\n  repo: Repo,\n  pathString: string,\n  data: unknown,\n  isMerge: boolean,\n  tag: number | null\n): void {\n  // For testing.\n  repo.dataUpdateCount++;\n  const path = new Path(pathString);\n  data = repo.interceptServerDataCallback_\n    ? repo.interceptServerDataCallback_(pathString, data)\n    : data;\n  let events = [];\n  if (tag) {\n    if (isMerge) {\n      const taggedChildren = map(\n        data as { [k: string]: unknown },\n        (raw: unknown) => nodeFromJSON(raw)\n      );\n      events = syncTreeApplyTaggedQueryMerge(\n        repo.serverSyncTree_,\n        path,\n        taggedChildren,\n        tag\n      );\n    } else {\n      const taggedSnap = nodeFromJSON(data);\n      events = syncTreeApplyTaggedQueryOverwrite(\n        repo.serverSyncTree_,\n        path,\n        taggedSnap,\n        tag\n      );\n    }\n  } else if (isMerge) {\n    const changedChildren = map(\n      data as { [k: string]: unknown },\n      (raw: unknown) => nodeFromJSON(raw)\n    );\n    events = syncTreeApplyServerMerge(\n      repo.serverSyncTree_,\n      path,\n      changedChildren\n    );\n  } else {\n    const snap = nodeFromJSON(data);\n    events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap);\n  }\n  let affectedPath = path;\n  if (events.length > 0) {\n    // Since we have a listener outstanding for each transaction, receiving any events\n    // is a proxy for some change having occurred.\n    affectedPath = repoRerunTransactions(repo, path);\n  }\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, events);\n}\n\n// TODO: This should be @private but it's used by test_access.js and internal.js\nexport function repoInterceptServerData(\n  repo: Repo,\n  callback: ((a: string, b: unknown) => unknown) | null\n): void {\n  repo.interceptServerDataCallback_ = callback;\n}\n\nfunction repoOnConnectStatus(repo: Repo, connectStatus: boolean): void {\n  repoUpdateInfo(repo, 'connected', connectStatus);\n  if (connectStatus === false) {\n    repoRunOnDisconnectEvents(repo);\n  }\n}\n\nfunction repoOnServerInfoUpdate(repo: Repo, updates: object): void {\n  each(updates, (key: string, value: unknown) => {\n    repoUpdateInfo(repo, key, value);\n  });\n}\n\nfunction repoUpdateInfo(repo: Repo, pathString: string, value: unknown): void {\n  const path = new Path('/.info/' + pathString);\n  const newNode = nodeFromJSON(value);\n  repo.infoData_.updateSnapshot(path, newNode);\n  const events = syncTreeApplyServerOverwrite(\n    repo.infoSyncTree_,\n    path,\n    newNode\n  );\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n}\n\nfunction repoGetNextWriteId(repo: Repo): number {\n  return repo.nextWriteId_++;\n}\n\n/**\n * The purpose of `getValue` is to return the latest known value\n * satisfying `query`.\n *\n * This method will first check for in-memory cached values\n * belonging to active listeners. If they are found, such values\n * are considered to be the most up-to-date.\n *\n * If the client is not connected, this method will wait until the\n *  repo has established a connection and then request the value for `query`.\n * If the client is not able to retrieve the query result for another reason,\n * it reports an error.\n *\n * @param query - The query to surface a value for.\n */\nexport function repoGetValue(\n  repo: Repo,\n  query: QueryContext,\n  eventRegistration: ValueEventRegistration\n): Promise<Node> {\n  // Only active queries are cached. There is no persisted cache.\n  const cached = syncTreeGetServerValue(repo.serverSyncTree_, query);\n  if (cached != null) {\n    return Promise.resolve(cached);\n  }\n  return repo.server_.get(query).then(\n    payload => {\n      const node = nodeFromJSON(payload).withIndex(\n        query._queryParams.getIndex()\n      );\n      /**\n       * Below we simulate the actions of an `onlyOnce` `onValue()` event where:\n       * Add an event registration,\n       * Update data at the path,\n       * Raise any events,\n       * Cleanup the SyncTree\n       */\n      syncTreeAddEventRegistration(\n        repo.serverSyncTree_,\n        query,\n        eventRegistration,\n        true\n      );\n      let events: Event[];\n      if (query._queryParams.loadsAllData()) {\n        events = syncTreeApplyServerOverwrite(\n          repo.serverSyncTree_,\n          query._path,\n          node\n        );\n      } else {\n        const tag = syncTreeTagForQuery(repo.serverSyncTree_, query);\n        events = syncTreeApplyTaggedQueryOverwrite(\n          repo.serverSyncTree_,\n          query._path,\n          node,\n          tag\n        );\n      }\n      /*\n       * We need to raise events in the scenario where `get()` is called at a parent path, and\n       * while the `get()` is pending, `onValue` is called at a child location. While get() is waiting\n       * for the data, `onValue` will register a new event. Then, get() will come back, and update the syncTree\n       * and its corresponding serverCache, including the child location where `onValue` is called. Then,\n       * `onValue` will receive the event from the server, but look at the syncTree and see that the data received\n       * from the server is already at the SyncPoint, and so the `onValue` callback will never get fired.\n       * Calling `eventQueueRaiseEventsForChangedPath()` is the correct way to propagate the events and\n       * ensure the corresponding child events will get fired.\n       */\n      eventQueueRaiseEventsForChangedPath(\n        repo.eventQueue_,\n        query._path,\n        events\n      );\n      syncTreeRemoveEventRegistration(\n        repo.serverSyncTree_,\n        query,\n        eventRegistration,\n        null,\n        true\n      );\n      return node;\n    },\n    err => {\n      repoLog(repo, 'get for query ' + stringify(query) + ' failed: ' + err);\n      return Promise.reject(new Error(err as string));\n    }\n  );\n}\n\nexport function repoSetWithPriority(\n  repo: Repo,\n  path: Path,\n  newVal: unknown,\n  newPriority: number | string | null,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repoLog(repo, 'set', {\n    path: path.toString(),\n    value: newVal,\n    priority: newPriority\n  });\n\n  // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\n  // (b) store unresolved paths on JSON parse\n  const serverValues = repoGenerateServerValues(repo);\n  const newNodeUnresolved = nodeFromJSON(newVal, newPriority);\n  const existing = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path);\n  const newNode = resolveDeferredValueSnapshot(\n    newNodeUnresolved,\n    existing,\n    serverValues\n  );\n\n  const writeId = repoGetNextWriteId(repo);\n  const events = syncTreeApplyUserOverwrite(\n    repo.serverSyncTree_,\n    path,\n    newNode,\n    writeId,\n    true\n  );\n  eventQueueQueueEvents(repo.eventQueue_, events);\n  repo.server_.put(\n    path.toString(),\n    newNodeUnresolved.val(/*export=*/ true),\n    (status, errorReason) => {\n      const success = status === 'ok';\n      if (!success) {\n        warn('set at ' + path + ' failed: ' + status);\n      }\n\n      const clearEvents = syncTreeAckUserWrite(\n        repo.serverSyncTree_,\n        writeId,\n        !success\n      );\n      eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, clearEvents);\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n  const affectedPath = repoAbortTransactions(repo, path);\n  repoRerunTransactions(repo, affectedPath);\n  // We queued the events above, so just flush the queue here\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, []);\n}\n\nexport function repoUpdate(\n  repo: Repo,\n  path: Path,\n  childrenToMerge: { [k: string]: unknown },\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repoLog(repo, 'update', { path: path.toString(), value: childrenToMerge });\n\n  // Start with our existing data and merge each child into it.\n  let empty = true;\n  const serverValues = repoGenerateServerValues(repo);\n  const changedChildren: { [k: string]: Node } = {};\n  each(childrenToMerge, (changedKey: string, changedValue: unknown) => {\n    empty = false;\n    changedChildren[changedKey] = resolveDeferredValueTree(\n      pathChild(path, changedKey),\n      nodeFromJSON(changedValue),\n      repo.serverSyncTree_,\n      serverValues\n    );\n  });\n\n  if (!empty) {\n    const writeId = repoGetNextWriteId(repo);\n    const events = syncTreeApplyUserMerge(\n      repo.serverSyncTree_,\n      path,\n      changedChildren,\n      writeId\n    );\n    eventQueueQueueEvents(repo.eventQueue_, events);\n    repo.server_.merge(\n      path.toString(),\n      childrenToMerge,\n      (status, errorReason) => {\n        const success = status === 'ok';\n        if (!success) {\n          warn('update at ' + path + ' failed: ' + status);\n        }\n\n        const clearEvents = syncTreeAckUserWrite(\n          repo.serverSyncTree_,\n          writeId,\n          !success\n        );\n        const affectedPath =\n          clearEvents.length > 0 ? repoRerunTransactions(repo, path) : path;\n        eventQueueRaiseEventsForChangedPath(\n          repo.eventQueue_,\n          affectedPath,\n          clearEvents\n        );\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n      }\n    );\n\n    each(childrenToMerge, (changedPath: string) => {\n      const affectedPath = repoAbortTransactions(\n        repo,\n        pathChild(path, changedPath)\n      );\n      repoRerunTransactions(repo, affectedPath);\n    });\n\n    // We queued the events above, so just flush the queue here\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, []);\n  } else {\n    log(\"update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n  }\n}\n\n/**\n * Applies all of the changes stored up in the onDisconnect_ tree.\n */\nfunction repoRunOnDisconnectEvents(repo: Repo): void {\n  repoLog(repo, 'onDisconnectEvents');\n\n  const serverValues = repoGenerateServerValues(repo);\n  const resolvedOnDisconnectTree = newSparseSnapshotTree();\n  sparseSnapshotTreeForEachTree(\n    repo.onDisconnect_,\n    newEmptyPath(),\n    (path, node) => {\n      const resolved = resolveDeferredValueTree(\n        path,\n        node,\n        repo.serverSyncTree_,\n        serverValues\n      );\n      sparseSnapshotTreeRemember(resolvedOnDisconnectTree, path, resolved);\n    }\n  );\n  let events: Event[] = [];\n\n  sparseSnapshotTreeForEachTree(\n    resolvedOnDisconnectTree,\n    newEmptyPath(),\n    (path, snap) => {\n      events = events.concat(\n        syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap)\n      );\n      const affectedPath = repoAbortTransactions(repo, path);\n      repoRerunTransactions(repo, affectedPath);\n    }\n  );\n\n  repo.onDisconnect_ = newSparseSnapshotTree();\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, newEmptyPath(), events);\n}\n\nexport function repoOnDisconnectCancel(\n  repo: Repo,\n  path: Path,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repo.server_.onDisconnectCancel(path.toString(), (status, errorReason) => {\n    if (status === 'ok') {\n      sparseSnapshotTreeForget(repo.onDisconnect_, path);\n    }\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n}\n\nexport function repoOnDisconnectSet(\n  repo: Repo,\n  path: Path,\n  value: unknown,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  const newNode = nodeFromJSON(value);\n  repo.server_.onDisconnectPut(\n    path.toString(),\n    newNode.val(/*export=*/ true),\n    (status, errorReason) => {\n      if (status === 'ok') {\n        sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoOnDisconnectSetWithPriority(\n  repo: Repo,\n  path: Path,\n  value: unknown,\n  priority: unknown,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  const newNode = nodeFromJSON(value, priority);\n  repo.server_.onDisconnectPut(\n    path.toString(),\n    newNode.val(/*export=*/ true),\n    (status, errorReason) => {\n      if (status === 'ok') {\n        sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoOnDisconnectUpdate(\n  repo: Repo,\n  path: Path,\n  childrenToMerge: { [k: string]: unknown },\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  if (isEmpty(childrenToMerge)) {\n    log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n    return;\n  }\n\n  repo.server_.onDisconnectMerge(\n    path.toString(),\n    childrenToMerge,\n    (status, errorReason) => {\n      if (status === 'ok') {\n        each(childrenToMerge, (childName: string, childNode: unknown) => {\n          const newChildNode = nodeFromJSON(childNode);\n          sparseSnapshotTreeRemember(\n            repo.onDisconnect_,\n            pathChild(path, childName),\n            newChildNode\n          );\n        });\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoAddEventCallbackForQuery(\n  repo: Repo,\n  query: QueryContext,\n  eventRegistration: EventRegistration\n): void {\n  let events;\n  if (pathGetFront(query._path) === '.info') {\n    events = syncTreeAddEventRegistration(\n      repo.infoSyncTree_,\n      query,\n      eventRegistration\n    );\n  } else {\n    events = syncTreeAddEventRegistration(\n      repo.serverSyncTree_,\n      query,\n      eventRegistration\n    );\n  }\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\n\nexport function repoRemoveEventCallbackForQuery(\n  repo: Repo,\n  query: QueryContext,\n  eventRegistration: EventRegistration\n): void {\n  // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\n  // a little bit by handling the return values anyways.\n  let events;\n  if (pathGetFront(query._path) === '.info') {\n    events = syncTreeRemoveEventRegistration(\n      repo.infoSyncTree_,\n      query,\n      eventRegistration\n    );\n  } else {\n    events = syncTreeRemoveEventRegistration(\n      repo.serverSyncTree_,\n      query,\n      eventRegistration\n    );\n  }\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\n\nexport function repoInterrupt(repo: Repo): void {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.interrupt(INTERRUPT_REASON);\n  }\n}\n\nexport function repoResume(repo: Repo): void {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.resume(INTERRUPT_REASON);\n  }\n}\n\nexport function repoStats(repo: Repo, showDelta: boolean = false): void {\n  if (typeof console === 'undefined') {\n    return;\n  }\n\n  let stats: { [k: string]: unknown };\n  if (showDelta) {\n    if (!repo.statsListener_) {\n      repo.statsListener_ = new StatsListener(repo.stats_);\n    }\n    stats = repo.statsListener_.get();\n  } else {\n    stats = repo.stats_.get();\n  }\n\n  const longestName = Object.keys(stats).reduce(\n    (previousValue, currentValue) =>\n      Math.max(currentValue.length, previousValue),\n    0\n  );\n\n  each(stats, (stat: string, value: unknown) => {\n    let paddedStat = stat;\n    // pad stat names to be the same length (plus 2 extra spaces).\n    for (let i = stat.length; i < longestName + 2; i++) {\n      paddedStat += ' ';\n    }\n    console.log(paddedStat + value);\n  });\n}\n\nexport function repoStatsIncrementCounter(repo: Repo, metric: string): void {\n  repo.stats_.incrementCounter(metric);\n  statsReporterIncludeStat(repo.statsReporter_, metric);\n}\n\nfunction repoLog(repo: Repo, ...varArgs: unknown[]): void {\n  let prefix = '';\n  if (repo.persistentConnection_) {\n    prefix = repo.persistentConnection_.id + ':';\n  }\n  log(prefix, ...varArgs);\n}\n\nexport function repoCallOnCompleteCallback(\n  repo: Repo,\n  callback: ((status: Error | null, errorReason?: string) => void) | null,\n  status: string,\n  errorReason?: string | null\n): void {\n  if (callback) {\n    exceptionGuard(() => {\n      if (status === 'ok') {\n        callback(null);\n      } else {\n        const code = (status || 'error').toUpperCase();\n        let message = code;\n        if (errorReason) {\n          message += ': ' + errorReason;\n        }\n\n        const error = new Error(message);\n\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (error as any).code = code;\n        callback(error);\n      }\n    });\n  }\n}\n\n/**\n * Creates a new transaction, adds it to the transactions we're tracking, and\n * sends it to the server if possible.\n *\n * @param path - Path at which to do transaction.\n * @param transactionUpdate - Update callback.\n * @param onComplete - Completion callback.\n * @param unwatcher - Function that will be called when the transaction no longer\n * need data updates for `path`.\n * @param applyLocally - Whether or not to make intermediate results visible\n */\nexport function repoStartTransaction(\n  repo: Repo,\n  path: Path,\n  transactionUpdate: (a: unknown) => unknown,\n  onComplete: ((error: Error, committed: boolean, node: Node) => void) | null,\n  unwatcher: () => void,\n  applyLocally: boolean\n): void {\n  repoLog(repo, 'transaction on ' + path);\n\n  // Initialize transaction.\n  const transaction: Transaction = {\n    path,\n    update: transactionUpdate,\n    onComplete,\n    // One of TransactionStatus enums.\n    status: null,\n    // Used when combining transactions at different locations to figure out\n    // which one goes first.\n    order: LUIDGenerator(),\n    // Whether to raise local events for this transaction.\n    applyLocally,\n    // Count of how many times we've retried the transaction.\n    retryCount: 0,\n    // Function to call to clean up our .on() listener.\n    unwatcher,\n    // Stores why a transaction was aborted.\n    abortReason: null,\n    currentWriteId: null,\n    currentInputSnapshot: null,\n    currentOutputSnapshotRaw: null,\n    currentOutputSnapshotResolved: null\n  };\n\n  // Run transaction initially.\n  const currentState = repoGetLatestState(repo, path, undefined);\n  transaction.currentInputSnapshot = currentState;\n  const newVal = transaction.update(currentState.val());\n  if (newVal === undefined) {\n    // Abort transaction.\n    transaction.unwatcher();\n    transaction.currentOutputSnapshotRaw = null;\n    transaction.currentOutputSnapshotResolved = null;\n    if (transaction.onComplete) {\n      transaction.onComplete(null, false, transaction.currentInputSnapshot);\n    }\n  } else {\n    validateFirebaseData(\n      'transaction failed: Data returned ',\n      newVal,\n      transaction.path\n    );\n\n    // Mark as run and add to our queue.\n    transaction.status = TransactionStatus.RUN;\n    const queueNode = treeSubTree(repo.transactionQueueTree_, path);\n    const nodeQueue = treeGetValue(queueNode) || [];\n    nodeQueue.push(transaction);\n\n    treeSetValue(queueNode, nodeQueue);\n\n    // Update visibleData and raise events\n    // Note: We intentionally raise events after updating all of our\n    // transaction state, since the user could start new transactions from the\n    // event callbacks.\n    let priorityForNode;\n    if (\n      typeof newVal === 'object' &&\n      newVal !== null &&\n      contains(newVal, '.priority')\n    ) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      priorityForNode = safeGet(newVal as any, '.priority');\n      assert(\n        isValidPriority(priorityForNode),\n        'Invalid priority returned by transaction. ' +\n          'Priority must be a valid string, finite number, server value, or null.'\n      );\n    } else {\n      const currentNode =\n        syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path) ||\n        ChildrenNode.EMPTY_NODE;\n      priorityForNode = currentNode.getPriority().val();\n    }\n\n    const serverValues = repoGenerateServerValues(repo);\n    const newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);\n    const newNode = resolveDeferredValueSnapshot(\n      newNodeUnresolved,\n      currentState,\n      serverValues\n    );\n    transaction.currentOutputSnapshotRaw = newNodeUnresolved;\n    transaction.currentOutputSnapshotResolved = newNode;\n    transaction.currentWriteId = repoGetNextWriteId(repo);\n\n    const events = syncTreeApplyUserOverwrite(\n      repo.serverSyncTree_,\n      path,\n      newNode,\n      transaction.currentWriteId,\n      transaction.applyLocally\n    );\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n\n    repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n  }\n}\n\n/**\n * @param excludeSets - A specific set to exclude\n */\nfunction repoGetLatestState(\n  repo: Repo,\n  path: Path,\n  excludeSets?: number[]\n): Node {\n  return (\n    syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path, excludeSets) ||\n    ChildrenNode.EMPTY_NODE\n  );\n}\n\n/**\n * Sends any already-run transactions that aren't waiting for outstanding\n * transactions to complete.\n *\n * Externally it's called with no arguments, but it calls itself recursively\n * with a particular transactionQueueTree node to recurse through the tree.\n *\n * @param node - transactionQueueTree node to start at.\n */\nfunction repoSendReadyTransactions(\n  repo: Repo,\n  node: Tree<Transaction[]> = repo.transactionQueueTree_\n): void {\n  // Before recursing, make sure any completed transactions are removed.\n  if (!node) {\n    repoPruneCompletedTransactionsBelowNode(repo, node);\n  }\n\n  if (treeGetValue(node)) {\n    const queue = repoBuildTransactionQueue(repo, node);\n    assert(queue.length > 0, 'Sending zero length transaction queue');\n\n    const allRun = queue.every(\n      (transaction: Transaction) => transaction.status === TransactionStatus.RUN\n    );\n\n    // If they're all run (and not sent), we can send them.  Else, we must wait.\n    if (allRun) {\n      repoSendTransactionQueue(repo, treeGetPath(node), queue);\n    }\n  } else if (treeHasChildren(node)) {\n    treeForEachChild(node, childNode => {\n      repoSendReadyTransactions(repo, childNode);\n    });\n  }\n}\n\n/**\n * Given a list of run transactions, send them to the server and then handle\n * the result (success or failure).\n *\n * @param path - The location of the queue.\n * @param queue - Queue of transactions under the specified location.\n */\nfunction repoSendTransactionQueue(\n  repo: Repo,\n  path: Path,\n  queue: Transaction[]\n): void {\n  // Mark transactions as sent and increment retry count!\n  const setsToIgnore = queue.map(txn => {\n    return txn.currentWriteId;\n  });\n  const latestState = repoGetLatestState(repo, path, setsToIgnore);\n  let snapToSend = latestState;\n  const latestHash = latestState.hash();\n  for (let i = 0; i < queue.length; i++) {\n    const txn = queue[i];\n    assert(\n      txn.status === TransactionStatus.RUN,\n      'tryToSendTransactionQueue_: items in queue should all be run.'\n    );\n    txn.status = TransactionStatus.SENT;\n    txn.retryCount++;\n    const relativePath = newRelativePath(path, txn.path);\n    // If we've gotten to this point, the output snapshot must be defined.\n    snapToSend = snapToSend.updateChild(\n      relativePath /** @type {!Node} */,\n      txn.currentOutputSnapshotRaw\n    );\n  }\n\n  const dataToSend = snapToSend.val(true);\n  const pathToSend = path;\n\n  // Send the put.\n  repo.server_.put(\n    pathToSend.toString(),\n    dataToSend,\n    (status: string) => {\n      repoLog(repo, 'transaction put response', {\n        path: pathToSend.toString(),\n        status\n      });\n\n      let events: Event[] = [];\n      if (status === 'ok') {\n        // Queue up the callbacks and fire them after cleaning up all of our\n        // transaction state, since the callback could trigger more\n        // transactions or sets.\n        const callbacks = [];\n        for (let i = 0; i < queue.length; i++) {\n          queue[i].status = TransactionStatus.COMPLETED;\n          events = events.concat(\n            syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId)\n          );\n          if (queue[i].onComplete) {\n            // We never unset the output snapshot, and given that this\n            // transaction is complete, it should be set\n            callbacks.push(() =>\n              queue[i].onComplete(\n                null,\n                true,\n                queue[i].currentOutputSnapshotResolved\n              )\n            );\n          }\n          queue[i].unwatcher();\n        }\n\n        // Now remove the completed transactions.\n        repoPruneCompletedTransactionsBelowNode(\n          repo,\n          treeSubTree(repo.transactionQueueTree_, path)\n        );\n        // There may be pending transactions that we can now send.\n        repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n\n        // Finally, trigger onComplete callbacks.\n        for (let i = 0; i < callbacks.length; i++) {\n          exceptionGuard(callbacks[i]);\n        }\n      } else {\n        // transactions are no longer sent.  Update their status appropriately.\n        if (status === 'datastale') {\n          for (let i = 0; i < queue.length; i++) {\n            if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n              queue[i].status = TransactionStatus.NEEDS_ABORT;\n            } else {\n              queue[i].status = TransactionStatus.RUN;\n            }\n          }\n        } else {\n          warn(\n            'transaction at ' + pathToSend.toString() + ' failed: ' + status\n          );\n          for (let i = 0; i < queue.length; i++) {\n            queue[i].status = TransactionStatus.NEEDS_ABORT;\n            queue[i].abortReason = status;\n          }\n        }\n\n        repoRerunTransactions(repo, path);\n      }\n    },\n    latestHash\n  );\n}\n\n/**\n * Finds all transactions dependent on the data at changedPath and reruns them.\n *\n * Should be called any time cached data changes.\n *\n * Return the highest path that was affected by rerunning transactions. This\n * is the path at which events need to be raised for.\n *\n * @param changedPath - The path in mergedData that changed.\n * @returns The rootmost path that was affected by rerunning transactions.\n */\nfunction repoRerunTransactions(repo: Repo, changedPath: Path): Path {\n  const rootMostTransactionNode = repoGetAncestorTransactionNode(\n    repo,\n    changedPath\n  );\n  const path = treeGetPath(rootMostTransactionNode);\n\n  const queue = repoBuildTransactionQueue(repo, rootMostTransactionNode);\n  repoRerunTransactionQueue(repo, queue, path);\n\n  return path;\n}\n\n/**\n * Does all the work of rerunning transactions (as well as cleans up aborted\n * transactions and whatnot).\n *\n * @param queue - The queue of transactions to run.\n * @param path - The path the queue is for.\n */\nfunction repoRerunTransactionQueue(\n  repo: Repo,\n  queue: Transaction[],\n  path: Path\n): void {\n  if (queue.length === 0) {\n    return; // Nothing to do!\n  }\n\n  // Queue up the callbacks and fire them after cleaning up all of our\n  // transaction state, since the callback could trigger more transactions or\n  // sets.\n  const callbacks = [];\n  let events: Event[] = [];\n  // Ignore all of the sets we're going to re-run.\n  const txnsToRerun = queue.filter(q => {\n    return q.status === TransactionStatus.RUN;\n  });\n  const setsToIgnore = txnsToRerun.map(q => {\n    return q.currentWriteId;\n  });\n  for (let i = 0; i < queue.length; i++) {\n    const transaction = queue[i];\n    const relativePath = newRelativePath(path, transaction.path);\n    let abortTransaction = false,\n      abortReason;\n    assert(\n      relativePath !== null,\n      'rerunTransactionsUnderNode_: relativePath should not be null.'\n    );\n\n    if (transaction.status === TransactionStatus.NEEDS_ABORT) {\n      abortTransaction = true;\n      abortReason = transaction.abortReason;\n      events = events.concat(\n        syncTreeAckUserWrite(\n          repo.serverSyncTree_,\n          transaction.currentWriteId,\n          true\n        )\n      );\n    } else if (transaction.status === TransactionStatus.RUN) {\n      if (transaction.retryCount >= MAX_TRANSACTION_RETRIES) {\n        abortTransaction = true;\n        abortReason = 'maxretry';\n        events = events.concat(\n          syncTreeAckUserWrite(\n            repo.serverSyncTree_,\n            transaction.currentWriteId,\n            true\n          )\n        );\n      } else {\n        // This code reruns a transaction\n        const currentNode = repoGetLatestState(\n          repo,\n          transaction.path,\n          setsToIgnore\n        );\n        transaction.currentInputSnapshot = currentNode;\n        const newData = queue[i].update(currentNode.val());\n        if (newData !== undefined) {\n          validateFirebaseData(\n            'transaction failed: Data returned ',\n            newData,\n            transaction.path\n          );\n          let newDataNode = nodeFromJSON(newData);\n          const hasExplicitPriority =\n            typeof newData === 'object' &&\n            newData != null &&\n            contains(newData, '.priority');\n          if (!hasExplicitPriority) {\n            // Keep the old priority if there wasn't a priority explicitly specified.\n            newDataNode = newDataNode.updatePriority(currentNode.getPriority());\n          }\n\n          const oldWriteId = transaction.currentWriteId;\n          const serverValues = repoGenerateServerValues(repo);\n          const newNodeResolved = resolveDeferredValueSnapshot(\n            newDataNode,\n            currentNode,\n            serverValues\n          );\n\n          transaction.currentOutputSnapshotRaw = newDataNode;\n          transaction.currentOutputSnapshotResolved = newNodeResolved;\n          transaction.currentWriteId = repoGetNextWriteId(repo);\n          // Mutates setsToIgnore in place\n          setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\n          events = events.concat(\n            syncTreeApplyUserOverwrite(\n              repo.serverSyncTree_,\n              transaction.path,\n              newNodeResolved,\n              transaction.currentWriteId,\n              transaction.applyLocally\n            )\n          );\n          events = events.concat(\n            syncTreeAckUserWrite(repo.serverSyncTree_, oldWriteId, true)\n          );\n        } else {\n          abortTransaction = true;\n          abortReason = 'nodata';\n          events = events.concat(\n            syncTreeAckUserWrite(\n              repo.serverSyncTree_,\n              transaction.currentWriteId,\n              true\n            )\n          );\n        }\n      }\n    }\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n    events = [];\n    if (abortTransaction) {\n      // Abort.\n      queue[i].status = TransactionStatus.COMPLETED;\n\n      // Removing a listener can trigger pruning which can muck with\n      // mergedData/visibleData (as it prunes data). So defer the unwatcher\n      // until we're done.\n      (function (unwatcher) {\n        setTimeout(unwatcher, Math.floor(0));\n      })(queue[i].unwatcher);\n\n      if (queue[i].onComplete) {\n        if (abortReason === 'nodata') {\n          callbacks.push(() =>\n            queue[i].onComplete(null, false, queue[i].currentInputSnapshot)\n          );\n        } else {\n          callbacks.push(() =>\n            queue[i].onComplete(new Error(abortReason), false, null)\n          );\n        }\n      }\n    }\n  }\n\n  // Clean up completed transactions.\n  repoPruneCompletedTransactionsBelowNode(repo, repo.transactionQueueTree_);\n\n  // Now fire callbacks, now that we're in a good, known state.\n  for (let i = 0; i < callbacks.length; i++) {\n    exceptionGuard(callbacks[i]);\n  }\n\n  // Try to send the transaction result to the server.\n  repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n}\n\n/**\n * Returns the rootmost ancestor node of the specified path that has a pending\n * transaction on it, or just returns the node for the given path if there are\n * no pending transactions on any ancestor.\n *\n * @param path - The location to start at.\n * @returns The rootmost node with a transaction.\n */\nfunction repoGetAncestorTransactionNode(\n  repo: Repo,\n  path: Path\n): Tree<Transaction[]> {\n  let front;\n\n  // Start at the root and walk deeper into the tree towards path until we\n  // find a node with pending transactions.\n  let transactionNode = repo.transactionQueueTree_;\n  front = pathGetFront(path);\n  while (front !== null && treeGetValue(transactionNode) === undefined) {\n    transactionNode = treeSubTree(transactionNode, front);\n    path = pathPopFront(path);\n    front = pathGetFront(path);\n  }\n\n  return transactionNode;\n}\n\n/**\n * Builds the queue of all transactions at or below the specified\n * transactionNode.\n *\n * @param transactionNode\n * @returns The generated queue.\n */\nfunction repoBuildTransactionQueue(\n  repo: Repo,\n  transactionNode: Tree<Transaction[]>\n): Transaction[] {\n  // Walk any child transaction queues and aggregate them into a single queue.\n  const transactionQueue: Transaction[] = [];\n  repoAggregateTransactionQueuesForNode(\n    repo,\n    transactionNode,\n    transactionQueue\n  );\n\n  // Sort them by the order the transactions were created.\n  transactionQueue.sort((a, b) => a.order - b.order);\n\n  return transactionQueue;\n}\n\nfunction repoAggregateTransactionQueuesForNode(\n  repo: Repo,\n  node: Tree<Transaction[]>,\n  queue: Transaction[]\n): void {\n  const nodeQueue = treeGetValue(node);\n  if (nodeQueue) {\n    for (let i = 0; i < nodeQueue.length; i++) {\n      queue.push(nodeQueue[i]);\n    }\n  }\n\n  treeForEachChild(node, child => {\n    repoAggregateTransactionQueuesForNode(repo, child, queue);\n  });\n}\n\n/**\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\n */\nfunction repoPruneCompletedTransactionsBelowNode(\n  repo: Repo,\n  node: Tree<Transaction[]>\n): void {\n  const queue = treeGetValue(node);\n  if (queue) {\n    let to = 0;\n    for (let from = 0; from < queue.length; from++) {\n      if (queue[from].status !== TransactionStatus.COMPLETED) {\n        queue[to] = queue[from];\n        to++;\n      }\n    }\n    queue.length = to;\n    treeSetValue(node, queue.length > 0 ? queue : undefined);\n  }\n\n  treeForEachChild(node, childNode => {\n    repoPruneCompletedTransactionsBelowNode(repo, childNode);\n  });\n}\n\n/**\n * Aborts all transactions on ancestors or descendants of the specified path.\n * Called when doing a set() or update() since we consider them incompatible\n * with transactions.\n *\n * @param path - Path for which we want to abort related transactions.\n */\nfunction repoAbortTransactions(repo: Repo, path: Path): Path {\n  const affectedPath = treeGetPath(repoGetAncestorTransactionNode(repo, path));\n\n  const transactionNode = treeSubTree(repo.transactionQueueTree_, path);\n\n  treeForEachAncestor(transactionNode, (node: Tree<Transaction[]>) => {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n\n  repoAbortTransactionsOnNode(repo, transactionNode);\n\n  treeForEachDescendant(transactionNode, (node: Tree<Transaction[]>) => {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n\n  return affectedPath;\n}\n\n/**\n * Abort transactions stored in this transaction queue node.\n *\n * @param node - Node to abort transactions for.\n */\nfunction repoAbortTransactionsOnNode(\n  repo: Repo,\n  node: Tree<Transaction[]>\n): void {\n  const queue = treeGetValue(node);\n  if (queue) {\n    // Queue up the callbacks and fire them after cleaning up all of our\n    // transaction state, since the callback could trigger more transactions\n    // or sets.\n    const callbacks = [];\n\n    // Go through queue.  Any already-sent transactions must be marked for\n    // abort, while the unsent ones can be immediately aborted and removed.\n    let events: Event[] = [];\n    let lastSent = -1;\n    for (let i = 0; i < queue.length; i++) {\n      if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n        // Already marked.  No action needed.\n      } else if (queue[i].status === TransactionStatus.SENT) {\n        assert(\n          lastSent === i - 1,\n          'All SENT items should be at beginning of queue.'\n        );\n        lastSent = i;\n        // Mark transaction for abort when it comes back.\n        queue[i].status = TransactionStatus.SENT_NEEDS_ABORT;\n        queue[i].abortReason = 'set';\n      } else {\n        assert(\n          queue[i].status === TransactionStatus.RUN,\n          'Unexpected transaction status in abort'\n        );\n        // We can abort it immediately.\n        queue[i].unwatcher();\n        events = events.concat(\n          syncTreeAckUserWrite(\n            repo.serverSyncTree_,\n            queue[i].currentWriteId,\n            true\n          )\n        );\n        if (queue[i].onComplete) {\n          callbacks.push(\n            queue[i].onComplete.bind(null, new Error('set'), false, null)\n          );\n        }\n      }\n    }\n    if (lastSent === -1) {\n      // We're not waiting for any sent transactions.  We can clear the queue.\n      treeSetValue(node, undefined);\n    } else {\n      // Remove the transactions we aborted.\n      queue.length = lastSent + 1;\n    }\n\n    // Now fire the callbacks.\n    eventQueueRaiseEventsForChangedPath(\n      repo.eventQueue_,\n      treeGetPath(node),\n      events\n    );\n    for (let i = 0; i < callbacks.length; i++) {\n      exceptionGuard(callbacks[i]);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../../RepoInfo';\nimport { Path } from '../Path';\nimport { warnIfPageIsSecure, warn, fatal } from '../util';\n\nfunction decodePath(pathString: string): string {\n  let pathStringDecoded = '';\n  const pieces = pathString.split('/');\n  for (let i = 0; i < pieces.length; i++) {\n    if (pieces[i].length > 0) {\n      let piece = pieces[i];\n      try {\n        piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\n      } catch (e) {}\n      pathStringDecoded += '/' + piece;\n    }\n  }\n  return pathStringDecoded;\n}\n\n/**\n * @returns key value hash\n */\nfunction decodeQuery(queryString: string): { [key: string]: string } {\n  const results = {};\n  if (queryString.charAt(0) === '?') {\n    queryString = queryString.substring(1);\n  }\n  for (const segment of queryString.split('&')) {\n    if (segment.length === 0) {\n      continue;\n    }\n    const kv = segment.split('=');\n    if (kv.length === 2) {\n      results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\n    } else {\n      warn(`Invalid query segment '${segment}' in query '${queryString}'`);\n    }\n  }\n  return results;\n}\n\nexport const parseRepoInfo = function (\n  dataURL: string,\n  nodeAdmin: boolean\n): { repoInfo: RepoInfo; path: Path } {\n  const parsedUrl = parseDatabaseURL(dataURL),\n    namespace = parsedUrl.namespace;\n\n  if (parsedUrl.domain === 'firebase.com') {\n    fatal(\n      parsedUrl.host +\n        ' is no longer supported. ' +\n        'Please use <YOUR FIREBASE>.firebaseio.com instead'\n    );\n  }\n\n  // Catch common error of uninitialized namespace value.\n  if (\n    (!namespace || namespace === 'undefined') &&\n    parsedUrl.domain !== 'localhost'\n  ) {\n    fatal(\n      'Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com'\n    );\n  }\n\n  if (!parsedUrl.secure) {\n    warnIfPageIsSecure();\n  }\n\n  const webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\n\n  return {\n    repoInfo: new RepoInfo(\n      parsedUrl.host,\n      parsedUrl.secure,\n      namespace,\n      webSocketOnly,\n      nodeAdmin,\n      /*persistenceKey=*/ '',\n      /*includeNamespaceInQueryParams=*/ namespace !== parsedUrl.subdomain\n    ),\n    path: new Path(parsedUrl.pathString)\n  };\n};\n\nexport const parseDatabaseURL = function (dataURL: string): {\n  host: string;\n  port: number;\n  domain: string;\n  subdomain: string;\n  secure: boolean;\n  scheme: string;\n  pathString: string;\n  namespace: string;\n} {\n  // Default to empty strings in the event of a malformed string.\n  let host = '',\n    domain = '',\n    subdomain = '',\n    pathString = '',\n    namespace = '';\n\n  // Always default to SSL, unless otherwise specified.\n  let secure = true,\n    scheme = 'https',\n    port = 443;\n\n  // Don't do any validation here. The caller is responsible for validating the result of parsing.\n  if (typeof dataURL === 'string') {\n    // Parse scheme.\n    let colonInd = dataURL.indexOf('//');\n    if (colonInd >= 0) {\n      scheme = dataURL.substring(0, colonInd - 1);\n      dataURL = dataURL.substring(colonInd + 2);\n    }\n\n    // Parse host, path, and query string.\n    let slashInd = dataURL.indexOf('/');\n    if (slashInd === -1) {\n      slashInd = dataURL.length;\n    }\n    let questionMarkInd = dataURL.indexOf('?');\n    if (questionMarkInd === -1) {\n      questionMarkInd = dataURL.length;\n    }\n    host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\n    if (slashInd < questionMarkInd) {\n      // For pathString, questionMarkInd will always come after slashInd\n      pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\n    }\n    const queryParams = decodeQuery(\n      dataURL.substring(Math.min(dataURL.length, questionMarkInd))\n    );\n\n    // If we have a port, use scheme for determining if it's secure.\n    colonInd = host.indexOf(':');\n    if (colonInd >= 0) {\n      secure = scheme === 'https' || scheme === 'wss';\n      port = parseInt(host.substring(colonInd + 1), 10);\n    } else {\n      colonInd = host.length;\n    }\n\n    const hostWithoutPort = host.slice(0, colonInd);\n    if (hostWithoutPort.toLowerCase() === 'localhost') {\n      domain = 'localhost';\n    } else if (hostWithoutPort.split('.').length <= 2) {\n      domain = hostWithoutPort;\n    } else {\n      // Interpret the subdomain of a 3 or more component URL as the namespace name.\n      const dotInd = host.indexOf('.');\n      subdomain = host.substring(0, dotInd).toLowerCase();\n      domain = host.substring(dotInd + 1);\n      // Normalize namespaces to lowercase to share storage / connection.\n      namespace = subdomain;\n    }\n    // Always treat the value of the `ns` as the namespace name if it is present.\n    if ('ns' in queryParams) {\n      namespace = queryParams['ns'];\n    }\n  }\n\n  return {\n    host,\n    port,\n    domain,\n    subdomain,\n    secure,\n    scheme,\n    pathString,\n    namespace\n  };\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringify } from '@firebase/util';\n\nimport { DataSnapshot as ExpDataSnapshot } from '../../api/Reference_impl';\nimport { Path } from '../util/Path';\n\nimport { EventRegistration } from './EventRegistration';\n\n/**\n * Encapsulates the data needed to raise an event\n * @interface\n */\nexport interface Event {\n  getPath(): Path;\n\n  getEventType(): string;\n\n  getEventRunner(): () => void;\n\n  toString(): string;\n}\n\n/**\n * One of the following strings: \"value\", \"child_added\", \"child_changed\",\n * \"child_removed\", or \"child_moved.\"\n */\nexport type EventType =\n  | 'value'\n  | 'child_added'\n  | 'child_changed'\n  | 'child_moved'\n  | 'child_removed';\n\n/**\n * Encapsulates the data needed to raise an event\n */\nexport class DataEvent implements Event {\n  /**\n   * @param eventType - One of: value, child_added, child_changed, child_moved, child_removed\n   * @param eventRegistration - The function to call to with the event data. User provided\n   * @param snapshot - The data backing the event\n   * @param prevName - Optional, the name of the previous child for child_* events.\n   */\n  constructor(\n    public eventType: EventType,\n    public eventRegistration: EventRegistration,\n    public snapshot: ExpDataSnapshot,\n    public prevName?: string | null\n  ) {}\n  getPath(): Path {\n    const ref = this.snapshot.ref;\n    if (this.eventType === 'value') {\n      return ref._path;\n    } else {\n      return ref.parent._path;\n    }\n  }\n  getEventType(): string {\n    return this.eventType;\n  }\n  getEventRunner(): () => void {\n    return this.eventRegistration.getEventRunner(this);\n  }\n  toString(): string {\n    return (\n      this.getPath().toString() +\n      ':' +\n      this.eventType +\n      ':' +\n      stringify(this.snapshot.exportVal())\n    );\n  }\n}\n\nexport class CancelEvent implements Event {\n  constructor(\n    public eventRegistration: EventRegistration,\n    public error: Error,\n    public path: Path\n  ) {}\n  getPath(): Path {\n    return this.path;\n  }\n  getEventType(): string {\n    return 'cancel';\n  }\n  getEventRunner(): () => void {\n    return this.eventRegistration.getEventRunner(this);\n  }\n  toString(): string {\n    return this.path.toString() + ':cancel';\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { DataSnapshot } from '../../api/Reference_impl';\nimport { Repo } from '../Repo';\nimport { Path } from '../util/Path';\n\nimport { Change } from './Change';\nimport { CancelEvent, Event } from './Event';\nimport { QueryParams } from './QueryParams';\n\n/**\n * A user callback. Callbacks issues from the Legacy SDK maintain references\n * to the original user-issued callbacks, which allows equality\n * comparison by reference even though this callbacks are wrapped before\n * they can be passed to the firebase@exp SDK.\n *\n * @internal\n */\nexport interface UserCallback {\n  (dataSnapshot: DataSnapshot, previousChildName?: string | null): unknown;\n  userCallback?: unknown;\n  context?: object | null;\n}\n\n/**\n * A wrapper class that converts events from the database@exp SDK to the legacy\n * Database SDK. Events are not converted directly as event registration relies\n * on reference comparison of the original user callback (see `matches()`) and\n * relies on equality of the legacy SDK's `context` object.\n */\nexport class CallbackContext {\n  constructor(\n    private readonly snapshotCallback: UserCallback,\n    private readonly cancelCallback?: (error: Error) => unknown\n  ) {}\n\n  onValue(\n    expDataSnapshot: DataSnapshot,\n    previousChildName?: string | null\n  ): void {\n    this.snapshotCallback.call(null, expDataSnapshot, previousChildName);\n  }\n\n  onCancel(error: Error): void {\n    assert(\n      this.hasCancelCallback,\n      'Raising a cancel event on a listener with no cancel callback'\n    );\n    return this.cancelCallback.call(null, error);\n  }\n\n  get hasCancelCallback(): boolean {\n    return !!this.cancelCallback;\n  }\n\n  matches(other: CallbackContext): boolean {\n    return (\n      this.snapshotCallback === other.snapshotCallback ||\n      (this.snapshotCallback.userCallback !== undefined &&\n        this.snapshotCallback.userCallback ===\n          other.snapshotCallback.userCallback &&\n        this.snapshotCallback.context === other.snapshotCallback.context)\n    );\n  }\n}\n\nexport interface QueryContext {\n  readonly _queryIdentifier: string;\n  readonly _queryObject: object;\n  readonly _repo: Repo;\n  readonly _path: Path;\n  readonly _queryParams: QueryParams;\n}\n\n/**\n * An EventRegistration is basically an event type ('value', 'child_added', etc.) and a callback\n * to be notified of that type of event.\n *\n * That said, it can also contain a cancel callback to be notified if the event is canceled.  And\n * currently, this code is organized around the idea that you would register multiple child_ callbacks\n * together, as a single EventRegistration.  Though currently we don't do that.\n */\nexport interface EventRegistration {\n  /**\n   * True if this container has a callback to trigger for this event type\n   */\n  respondsTo(eventType: string): boolean;\n\n  createEvent(change: Change, query: QueryContext): Event;\n\n  /**\n   * Given event data, return a function to trigger the user's callback\n   */\n  getEventRunner(eventData: Event): () => void;\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null;\n\n  matches(other: EventRegistration): boolean;\n\n  /**\n   * False basically means this is a \"dummy\" callback container being used as a sentinel\n   * to remove all callback containers of a particular type.  (e.g. if the user does\n   * ref.off('value') without specifying a specific callback).\n   *\n   * (TODO: Rework this, since it's hacky)\n   *\n   */\n  hasAnyCallback(): boolean;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, getModularInstance, Deferred } from '@firebase/util';\n\nimport {\n  Repo,\n  repoAddEventCallbackForQuery,\n  repoGetValue,\n  repoRemoveEventCallbackForQuery,\n  repoServerTime,\n  repoSetWithPriority,\n  repoUpdate\n} from '../core/Repo';\nimport { ChildrenNode } from '../core/snap/ChildrenNode';\nimport { Index } from '../core/snap/indexes/Index';\nimport { KEY_INDEX } from '../core/snap/indexes/KeyIndex';\nimport { PathIndex } from '../core/snap/indexes/PathIndex';\nimport { PRIORITY_INDEX } from '../core/snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../core/snap/indexes/ValueIndex';\nimport { Node } from '../core/snap/Node';\nimport { syncPointSetReferenceConstructor } from '../core/SyncPoint';\nimport { syncTreeSetReferenceConstructor } from '../core/SyncTree';\nimport { parseRepoInfo } from '../core/util/libs/parser';\nimport { nextPushId } from '../core/util/NextPushId';\nimport {\n  Path,\n  pathEquals,\n  pathGetBack,\n  pathGetFront,\n  pathChild,\n  pathParent,\n  pathToUrlEncodedString,\n  pathIsEmpty\n} from '../core/util/Path';\nimport {\n  fatal,\n  MAX_NAME,\n  MIN_NAME,\n  ObjectToUniqueKey\n} from '../core/util/util';\nimport {\n  isValidPriority,\n  validateFirebaseDataArg,\n  validateFirebaseMergeDataArg,\n  validateKey,\n  validatePathString,\n  validatePriority,\n  validateRootPathString,\n  validateUrl,\n  validateWritablePath\n} from '../core/util/validation';\nimport { Change } from '../core/view/Change';\nimport { CancelEvent, DataEvent, EventType } from '../core/view/Event';\nimport {\n  CallbackContext,\n  EventRegistration,\n  QueryContext,\n  UserCallback\n} from '../core/view/EventRegistration';\nimport {\n  QueryParams,\n  queryParamsEndAt,\n  queryParamsEndBefore,\n  queryParamsGetQueryObject,\n  queryParamsLimitToFirst,\n  queryParamsLimitToLast,\n  queryParamsOrderBy,\n  queryParamsStartAfter,\n  queryParamsStartAt\n} from '../core/view/QueryParams';\n\nimport { Database } from './Database';\nimport { OnDisconnect } from './OnDisconnect';\nimport {\n  ListenOptions,\n  Query as Query,\n  DatabaseReference,\n  Unsubscribe,\n  ThenableReference\n} from './Reference';\n\n/**\n * @internal\n */\nexport class QueryImpl implements Query, QueryContext {\n  /**\n   * @hideconstructor\n   */\n  constructor(\n    readonly _repo: Repo,\n    readonly _path: Path,\n    readonly _queryParams: QueryParams,\n    readonly _orderByCalled: boolean\n  ) {}\n\n  get key(): string | null {\n    if (pathIsEmpty(this._path)) {\n      return null;\n    } else {\n      return pathGetBack(this._path);\n    }\n  }\n\n  get ref(): DatabaseReference {\n    return new ReferenceImpl(this._repo, this._path);\n  }\n\n  get _queryIdentifier(): string {\n    const obj = queryParamsGetQueryObject(this._queryParams);\n    const id = ObjectToUniqueKey(obj);\n    return id === '{}' ? 'default' : id;\n  }\n\n  /**\n   * An object representation of the query parameters used by this Query.\n   */\n  get _queryObject(): object {\n    return queryParamsGetQueryObject(this._queryParams);\n  }\n\n  isEqual(other: QueryImpl | null): boolean {\n    other = getModularInstance(other);\n    if (!(other instanceof QueryImpl)) {\n      return false;\n    }\n\n    const sameRepo = this._repo === other._repo;\n    const samePath = pathEquals(this._path, other._path);\n    const sameQueryIdentifier =\n      this._queryIdentifier === other._queryIdentifier;\n\n    return sameRepo && samePath && sameQueryIdentifier;\n  }\n\n  toJSON(): string {\n    return this.toString();\n  }\n\n  toString(): string {\n    return this._repo.toString() + pathToUrlEncodedString(this._path);\n  }\n}\n\n/**\n * Validates that no other order by call has been made\n */\nfunction validateNoPreviousOrderByCall(query: QueryImpl, fnName: string) {\n  if (query._orderByCalled === true) {\n    throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\n  }\n}\n\n/**\n * Validates start/end values for queries.\n */\nfunction validateQueryEndpoints(params: QueryParams) {\n  let startNode = null;\n  let endNode = null;\n  if (params.hasStart()) {\n    startNode = params.getIndexStartValue();\n  }\n  if (params.hasEnd()) {\n    endNode = params.getIndexEndValue();\n  }\n\n  if (params.getIndex() === KEY_INDEX) {\n    const tooManyArgsError =\n      'Query: When ordering by key, you may only pass one argument to ' +\n      'startAt(), endAt(), or equalTo().';\n    const wrongArgTypeError =\n      'Query: When ordering by key, the argument passed to startAt(), startAfter(), ' +\n      'endAt(), endBefore(), or equalTo() must be a string.';\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      if (startName !== MIN_NAME) {\n        throw new Error(tooManyArgsError);\n      } else if (typeof startNode !== 'string') {\n        throw new Error(wrongArgTypeError);\n      }\n    }\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      if (endName !== MAX_NAME) {\n        throw new Error(tooManyArgsError);\n      } else if (typeof endNode !== 'string') {\n        throw new Error(wrongArgTypeError);\n      }\n    }\n  } else if (params.getIndex() === PRIORITY_INDEX) {\n    if (\n      (startNode != null && !isValidPriority(startNode)) ||\n      (endNode != null && !isValidPriority(endNode))\n    ) {\n      throw new Error(\n        'Query: When ordering by priority, the first argument passed to startAt(), ' +\n          'startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value ' +\n          '(null, a number, or a string).'\n      );\n    }\n  } else {\n    assert(\n      params.getIndex() instanceof PathIndex ||\n        params.getIndex() === VALUE_INDEX,\n      'unknown index type.'\n    );\n    if (\n      (startNode != null && typeof startNode === 'object') ||\n      (endNode != null && typeof endNode === 'object')\n    ) {\n      throw new Error(\n        'Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or ' +\n          'equalTo() cannot be an object.'\n      );\n    }\n  }\n}\n\n/**\n * Validates that limit* has been called with the correct combination of parameters\n */\nfunction validateLimit(params: QueryParams) {\n  if (\n    params.hasStart() &&\n    params.hasEnd() &&\n    params.hasLimit() &&\n    !params.hasAnchoredLimit()\n  ) {\n    throw new Error(\n      \"Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use \" +\n        'limitToFirst() or limitToLast() instead.'\n    );\n  }\n}\n/**\n * @internal\n */\nexport class ReferenceImpl extends QueryImpl implements DatabaseReference {\n  /** @hideconstructor */\n  constructor(repo: Repo, path: Path) {\n    super(repo, path, new QueryParams(), false);\n  }\n\n  get parent(): ReferenceImpl | null {\n    const parentPath = pathParent(this._path);\n    return parentPath === null\n      ? null\n      : new ReferenceImpl(this._repo, parentPath);\n  }\n\n  get root(): ReferenceImpl {\n    let ref: ReferenceImpl = this;\n    while (ref.parent !== null) {\n      ref = ref.parent;\n    }\n    return ref;\n  }\n}\n\n/**\n * A `DataSnapshot` contains data from a Database location.\n *\n * Any time you read data from the Database, you receive the data as a\n * `DataSnapshot`. A `DataSnapshot` is passed to the event callbacks you attach\n * with `on()` or `once()`. You can extract the contents of the snapshot as a\n * JavaScript object by calling the `val()` method. Alternatively, you can\n * traverse into the snapshot by calling `child()` to return child snapshots\n * (which you could then call `val()` on).\n *\n * A `DataSnapshot` is an efficiently generated, immutable copy of the data at\n * a Database location. It cannot be modified and will never change (to modify\n * data, you always call the `set()` method on a `Reference` directly).\n */\nexport class DataSnapshot {\n  /**\n   * @param _node - A SnapshotNode to wrap.\n   * @param ref - The location this snapshot came from.\n   * @param _index - The iteration order for this snapshot\n   * @hideconstructor\n   */\n  constructor(\n    readonly _node: Node,\n    /**\n     * The location of this DataSnapshot.\n     */\n    readonly ref: DatabaseReference,\n    readonly _index: Index\n  ) {}\n\n  /**\n   * Gets the priority value of the data in this `DataSnapshot`.\n   *\n   * Applications need not use priority but can order collections by\n   * ordinary properties (see\n   * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data |Sorting and filtering data}\n   * ).\n   */\n  get priority(): string | number | null {\n    // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\n    return this._node.getPriority().val() as string | number | null;\n  }\n\n  /**\n   * The key (last part of the path) of the location of this `DataSnapshot`.\n   *\n   * The last token in a Database location is considered its key. For example,\n   * \"ada\" is the key for the /users/ada/ node. Accessing the key on any\n   * `DataSnapshot` will return the key for the location that generated it.\n   * However, accessing the key on the root URL of a Database will return\n   * `null`.\n   */\n  get key(): string | null {\n    return this.ref.key;\n  }\n\n  /** Returns the number of child properties of this `DataSnapshot`. */\n  get size(): number {\n    return this._node.numChildren();\n  }\n\n  /**\n   * Gets another `DataSnapshot` for the location at the specified relative path.\n   *\n   * Passing a relative path to the `child()` method of a DataSnapshot returns\n   * another `DataSnapshot` for the location at the specified relative path. The\n   * relative path can either be a simple child name (for example, \"ada\") or a\n   * deeper, slash-separated path (for example, \"ada/name/first\"). If the child\n   * location has no data, an empty `DataSnapshot` (that is, a `DataSnapshot`\n   * whose value is `null`) is returned.\n   *\n   * @param path - A relative path to the location of child data.\n   */\n  child(path: string): DataSnapshot {\n    const childPath = new Path(path);\n    const childRef = child(this.ref, path);\n    return new DataSnapshot(\n      this._node.getChild(childPath),\n      childRef,\n      PRIORITY_INDEX\n    );\n  }\n  /**\n   * Returns true if this `DataSnapshot` contains any data. It is slightly more\n   * efficient than using `snapshot.val() !== null`.\n   */\n  exists(): boolean {\n    return !this._node.isEmpty();\n  }\n\n  /**\n   * Exports the entire contents of the DataSnapshot as a JavaScript object.\n   *\n   * The `exportVal()` method is similar to `val()`, except priority information\n   * is included (if available), making it suitable for backing up your data.\n   *\n   * @returns The DataSnapshot's contents as a JavaScript value (Object,\n   *   Array, string, number, boolean, or `null`).\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  exportVal(): any {\n    return this._node.val(true);\n  }\n\n  /**\n   * Enumerates the top-level children in the `DataSnapshot`.\n   *\n   * Because of the way JavaScript objects work, the ordering of data in the\n   * JavaScript object returned by `val()` is not guaranteed to match the\n   * ordering on the server nor the ordering of `onChildAdded()` events. That is\n   * where `forEach()` comes in handy. It guarantees the children of a\n   * `DataSnapshot` will be iterated in their query order.\n   *\n   * If no explicit `orderBy*()` method is used, results are returned\n   * ordered by key (unless priorities are used, in which case, results are\n   * returned by priority).\n   *\n   * @param action - A function that will be called for each child DataSnapshot.\n   * The callback can return true to cancel further enumeration.\n   * @returns true if enumeration was canceled due to your callback returning\n   * true.\n   */\n  forEach(action: (child: DataSnapshot) => boolean | void): boolean {\n    if (this._node.isLeafNode()) {\n      return false;\n    }\n\n    const childrenNode = this._node as ChildrenNode;\n    // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\n    return !!childrenNode.forEachChild(this._index, (key, node) => {\n      return action(\n        new DataSnapshot(node, child(this.ref, key), PRIORITY_INDEX)\n      );\n    });\n  }\n\n  /**\n   * Returns true if the specified child path has (non-null) data.\n   *\n   * @param path - A relative path to the location of a potential child.\n   * @returns `true` if data exists at the specified child path; else\n   *  `false`.\n   */\n  hasChild(path: string): boolean {\n    const childPath = new Path(path);\n    return !this._node.getChild(childPath).isEmpty();\n  }\n\n  /**\n   * Returns whether or not the `DataSnapshot` has any non-`null` child\n   * properties.\n   *\n   * You can use `hasChildren()` to determine if a `DataSnapshot` has any\n   * children. If it does, you can enumerate them using `forEach()`. If it\n   * doesn't, then either this snapshot contains a primitive value (which can be\n   * retrieved with `val()`) or it is empty (in which case, `val()` will return\n   * `null`).\n   *\n   * @returns true if this snapshot has any children; else false.\n   */\n  hasChildren(): boolean {\n    if (this._node.isLeafNode()) {\n      return false;\n    } else {\n      return !this._node.isEmpty();\n    }\n  }\n\n  /**\n   * Returns a JSON-serializable representation of this object.\n   */\n  toJSON(): object | null {\n    return this.exportVal();\n  }\n\n  /**\n   * Extracts a JavaScript value from a `DataSnapshot`.\n   *\n   * Depending on the data in a `DataSnapshot`, the `val()` method may return a\n   * scalar type (string, number, or boolean), an array, or an object. It may\n   * also return null, indicating that the `DataSnapshot` is empty (contains no\n   * data).\n   *\n   * @returns The DataSnapshot's contents as a JavaScript value (Object,\n   *   Array, string, number, boolean, or `null`).\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  val(): any {\n    return this._node.val();\n  }\n}\n\n/**\n *\n * Returns a `Reference` representing the location in the Database\n * corresponding to the provided path. If no path is provided, the `Reference`\n * will point to the root of the Database.\n *\n * @param db - The database instance to obtain a reference for.\n * @param path - Optional path representing the location the returned\n *   `Reference` will point. If not provided, the returned `Reference` will\n *   point to the root of the Database.\n * @returns If a path is provided, a `Reference`\n *   pointing to the provided path. Otherwise, a `Reference` pointing to the\n *   root of the Database.\n */\nexport function ref(db: Database, path?: string): DatabaseReference {\n  db = getModularInstance(db);\n  db._checkNotDeleted('ref');\n  return path !== undefined ? child(db._root, path) : db._root;\n}\n\n/**\n * Returns a `Reference` representing the location in the Database\n * corresponding to the provided Firebase URL.\n *\n * An exception is thrown if the URL is not a valid Firebase Database URL or it\n * has a different domain than the current `Database` instance.\n *\n * Note that all query parameters (`orderBy`, `limitToLast`, etc.) are ignored\n * and are not applied to the returned `Reference`.\n *\n * @param db - The database instance to obtain a reference for.\n * @param url - The Firebase URL at which the returned `Reference` will\n *   point.\n * @returns A `Reference` pointing to the provided\n *   Firebase URL.\n */\nexport function refFromURL(db: Database, url: string): DatabaseReference {\n  db = getModularInstance(db);\n  db._checkNotDeleted('refFromURL');\n  const parsedURL = parseRepoInfo(url, db._repo.repoInfo_.nodeAdmin);\n  validateUrl('refFromURL', parsedURL);\n\n  const repoInfo = parsedURL.repoInfo;\n  if (\n    !db._repo.repoInfo_.isCustomHost() &&\n    repoInfo.host !== db._repo.repoInfo_.host\n  ) {\n    fatal(\n      'refFromURL' +\n        ': Host name does not match the current database: ' +\n        '(found ' +\n        repoInfo.host +\n        ' but expected ' +\n        db._repo.repoInfo_.host +\n        ')'\n    );\n  }\n\n  return ref(db, parsedURL.path.toString());\n}\n/**\n * Gets a `Reference` for the location at the specified relative path.\n *\n * The relative path can either be a simple child name (for example, \"ada\") or\n * a deeper slash-separated path (for example, \"ada/name/first\").\n *\n * @param parent - The parent location.\n * @param path - A relative path from this location to the desired child\n *   location.\n * @returns The specified child location.\n */\nexport function child(\n  parent: DatabaseReference,\n  path: string\n): DatabaseReference {\n  parent = getModularInstance(parent);\n  if (pathGetFront(parent._path) === null) {\n    validateRootPathString('child', 'path', path, false);\n  } else {\n    validatePathString('child', 'path', path, false);\n  }\n  return new ReferenceImpl(parent._repo, pathChild(parent._path, path));\n}\n\n/**\n * Returns an `OnDisconnect` object - see\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n * for more information on how to use it.\n *\n * @param ref - The reference to add OnDisconnect triggers for.\n */\nexport function onDisconnect(ref: DatabaseReference): OnDisconnect {\n  ref = getModularInstance(ref) as ReferenceImpl;\n  return new OnDisconnect(ref._repo, ref._path);\n}\n\nexport interface ThenableReferenceImpl\n  extends ReferenceImpl,\n    Pick<Promise<ReferenceImpl>, 'then' | 'catch'> {}\n\n/**\n * Generates a new child location using a unique key and returns its\n * `Reference`.\n *\n * This is the most common pattern for adding data to a collection of items.\n *\n * If you provide a value to `push()`, the value is written to the\n * generated location. If you don't pass a value, nothing is written to the\n * database and the child remains empty (but you can use the `Reference`\n * elsewhere).\n *\n * The unique keys generated by `push()` are ordered by the current time, so the\n * resulting list of items is chronologically sorted. The keys are also\n * designed to be unguessable (they contain 72 random bits of entropy).\n *\n * See {@link https://firebase.google.com/docs/database/web/lists-of-data#append_to_a_list_of_data | Append to a list of data}.\n * See {@link https://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html | The 2^120 Ways to Ensure Unique Identifiers}.\n *\n * @param parent - The parent location.\n * @param value - Optional value to be written at the generated location.\n * @returns Combined `Promise` and `Reference`; resolves when write is complete,\n * but can be used immediately as the `Reference` to the child location.\n */\nexport function push(\n  parent: DatabaseReference,\n  value?: unknown\n): ThenableReference {\n  parent = getModularInstance(parent);\n  validateWritablePath('push', parent._path);\n  validateFirebaseDataArg('push', value, parent._path, true);\n  const now = repoServerTime(parent._repo);\n  const name = nextPushId(now);\n\n  // push() returns a ThennableReference whose promise is fulfilled with a\n  // regular Reference. We use child() to create handles to two different\n  // references. The first is turned into a ThennableReference below by adding\n  // then() and catch() methods and is used as the return value of push(). The\n  // second remains a regular Reference and is used as the fulfilled value of\n  // the first ThennableReference.\n  const thennablePushRef: Partial<ThenableReferenceImpl> = child(\n    parent,\n    name\n  ) as ReferenceImpl;\n  const pushRef = child(parent, name) as ReferenceImpl;\n\n  let promise: Promise<ReferenceImpl>;\n  if (value != null) {\n    promise = set(pushRef, value).then(() => pushRef);\n  } else {\n    promise = Promise.resolve(pushRef);\n  }\n\n  thennablePushRef.then = promise.then.bind(promise);\n  thennablePushRef.catch = promise.then.bind(promise, undefined);\n  return thennablePushRef as ThenableReferenceImpl;\n}\n\n/**\n * Removes the data at this Database location.\n *\n * Any data at child locations will also be deleted.\n *\n * The effect of the remove will be visible immediately and the corresponding\n * event 'value' will be triggered. Synchronization of the remove to the\n * Firebase servers will also be started, and the returned Promise will resolve\n * when complete. If provided, the onComplete callback will be called\n * asynchronously after synchronization has finished.\n *\n * @param ref - The location to remove.\n * @returns Resolves when remove on server is complete.\n */\nexport function remove(ref: DatabaseReference): Promise<void> {\n  validateWritablePath('remove', ref._path);\n  return set(ref, null);\n}\n\n/**\n * Writes data to this Database location.\n *\n * This will overwrite any data at this location and all child locations.\n *\n * The effect of the write will be visible immediately, and the corresponding\n * events (\"value\", \"child_added\", etc.) will be triggered. Synchronization of\n * the data to the Firebase servers will also be started, and the returned\n * Promise will resolve when complete. If provided, the `onComplete` callback\n * will be called asynchronously after synchronization has finished.\n *\n * Passing `null` for the new value is equivalent to calling `remove()`; namely,\n * all data at this location and all child locations will be deleted.\n *\n * `set()` will remove any priority stored at this location, so if priority is\n * meant to be preserved, you need to use `setWithPriority()` instead.\n *\n * Note that modifying data with `set()` will cancel any pending transactions\n * at that location, so extreme care should be taken if mixing `set()` and\n * `transaction()` to modify the same data.\n *\n * A single `set()` will generate a single \"value\" event at the location where\n * the `set()` was performed.\n *\n * @param ref - The location to write to.\n * @param value - The value to be written (string, number, boolean, object,\n *   array, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function set(ref: DatabaseReference, value: unknown): Promise<void> {\n  ref = getModularInstance(ref);\n  validateWritablePath('set', ref._path);\n  validateFirebaseDataArg('set', value, ref._path, false);\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    ref._path,\n    value,\n    /*priority=*/ null,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Sets a priority for the data at this Database location.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\n * ).\n *\n * @param ref - The location to write to.\n * @param priority - The priority to be written (string, number, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function setPriority(\n  ref: DatabaseReference,\n  priority: string | number | null\n): Promise<void> {\n  ref = getModularInstance(ref);\n  validateWritablePath('setPriority', ref._path);\n  validatePriority('setPriority', priority, false);\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    pathChild(ref._path, '.priority'),\n    priority,\n    null,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Writes data the Database location. Like `set()` but also specifies the\n * priority for that data.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\n * ).\n *\n * @param ref - The location to write to.\n * @param value - The value to be written (string, number, boolean, object,\n *   array, or null).\n * @param priority - The priority to be written (string, number, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function setWithPriority(\n  ref: DatabaseReference,\n  value: unknown,\n  priority: string | number | null\n): Promise<void> {\n  validateWritablePath('setWithPriority', ref._path);\n  validateFirebaseDataArg('setWithPriority', value, ref._path, false);\n  validatePriority('setWithPriority', priority, false);\n  if (ref.key === '.length' || ref.key === '.keys') {\n    throw 'setWithPriority failed: ' + ref.key + ' is a read-only object.';\n  }\n\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    ref._path,\n    value,\n    priority,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Writes multiple values to the Database at once.\n *\n * The `values` argument contains multiple property-value pairs that will be\n * written to the Database together. Each child property can either be a simple\n * property (for example, \"name\") or a relative path (for example,\n * \"name/first\") from the current location to the data to update.\n *\n * As opposed to the `set()` method, `update()` can be use to selectively update\n * only the referenced properties at the current location (instead of replacing\n * all the child properties at the current location).\n *\n * The effect of the write will be visible immediately, and the corresponding\n * events ('value', 'child_added', etc.) will be triggered. Synchronization of\n * the data to the Firebase servers will also be started, and the returned\n * Promise will resolve when complete. If provided, the `onComplete` callback\n * will be called asynchronously after synchronization has finished.\n *\n * A single `update()` will generate a single \"value\" event at the location\n * where the `update()` was performed, regardless of how many children were\n * modified.\n *\n * Note that modifying data with `update()` will cancel any pending\n * transactions at that location, so extreme care should be taken if mixing\n * `update()` and `transaction()` to modify the same data.\n *\n * Passing `null` to `update()` will remove the data at this location.\n *\n * See\n * {@link https://firebase.googleblog.com/2015/09/introducing-multi-location-updates-and_86.html | Introducing multi-location updates and more}.\n *\n * @param ref - The location to write to.\n * @param values - Object containing multiple values.\n * @returns Resolves when update on server is complete.\n */\nexport function update(ref: DatabaseReference, values: object): Promise<void> {\n  validateFirebaseMergeDataArg('update', values, ref._path, false);\n  const deferred = new Deferred<void>();\n  repoUpdate(\n    ref._repo,\n    ref._path,\n    values as Record<string, unknown>,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Gets the most up-to-date result for this query.\n *\n * @param query - The query to run.\n * @returns A `Promise` which resolves to the resulting DataSnapshot if a value is\n * available, or rejects if the client is unable to return a value (e.g., if the\n * server is unreachable and there is nothing cached).\n */\nexport function get(query: Query): Promise<DataSnapshot> {\n  query = getModularInstance(query) as QueryImpl;\n  const callbackContext = new CallbackContext(() => {});\n  const container = new ValueEventRegistration(callbackContext);\n  return repoGetValue(query._repo, query, container).then(node => {\n    return new DataSnapshot(\n      node,\n      new ReferenceImpl(query._repo, query._path),\n      query._queryParams.getIndex()\n    );\n  });\n}\n/**\n * Represents registration for 'value' events.\n */\nexport class ValueEventRegistration implements EventRegistration {\n  constructor(private callbackContext: CallbackContext) {}\n\n  respondsTo(eventType: string): boolean {\n    return eventType === 'value';\n  }\n\n  createEvent(change: Change, query: QueryContext): DataEvent {\n    const index = query._queryParams.getIndex();\n    return new DataEvent(\n      'value',\n      this,\n      new DataSnapshot(\n        change.snapshotNode,\n        new ReferenceImpl(query._repo, query._path),\n        index\n      )\n    );\n  }\n\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    if (eventData.getEventType() === 'cancel') {\n      return () =>\n        this.callbackContext.onCancel((eventData as CancelEvent).error);\n    } else {\n      return () =>\n        this.callbackContext.onValue((eventData as DataEvent).snapshot, null);\n    }\n  }\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.callbackContext.hasCancelCallback) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  matches(other: EventRegistration): boolean {\n    if (!(other instanceof ValueEventRegistration)) {\n      return false;\n    } else if (!other.callbackContext || !this.callbackContext) {\n      // If no callback specified, we consider it to match any callback.\n      return true;\n    } else {\n      return other.callbackContext.matches(this.callbackContext);\n    }\n  }\n\n  hasAnyCallback(): boolean {\n    return this.callbackContext !== null;\n  }\n}\n\n/**\n * Represents the registration of a child_x event.\n */\nexport class ChildEventRegistration implements EventRegistration {\n  constructor(\n    private eventType: string,\n    private callbackContext: CallbackContext | null\n  ) {}\n\n  respondsTo(eventType: string): boolean {\n    let eventToCheck =\n      eventType === 'children_added' ? 'child_added' : eventType;\n    eventToCheck =\n      eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\n    return this.eventType === eventToCheck;\n  }\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.callbackContext.hasCancelCallback) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  createEvent(change: Change, query: QueryContext): DataEvent {\n    assert(change.childName != null, 'Child events should have a childName.');\n    const childRef = child(\n      new ReferenceImpl(query._repo, query._path),\n      change.childName\n    );\n    const index = query._queryParams.getIndex();\n    return new DataEvent(\n      change.type as EventType,\n      this,\n      new DataSnapshot(change.snapshotNode, childRef, index),\n      change.prevName\n    );\n  }\n\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    if (eventData.getEventType() === 'cancel') {\n      return () =>\n        this.callbackContext.onCancel((eventData as CancelEvent).error);\n    } else {\n      return () =>\n        this.callbackContext.onValue(\n          (eventData as DataEvent).snapshot,\n          (eventData as DataEvent).prevName\n        );\n    }\n  }\n\n  matches(other: EventRegistration): boolean {\n    if (other instanceof ChildEventRegistration) {\n      return (\n        this.eventType === other.eventType &&\n        (!this.callbackContext ||\n          !other.callbackContext ||\n          this.callbackContext.matches(other.callbackContext))\n      );\n    }\n\n    return false;\n  }\n\n  hasAnyCallback(): boolean {\n    return !!this.callbackContext;\n  }\n}\n\nfunction addEventListener(\n  query: Query,\n  eventType: EventType,\n  callback: UserCallback,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n) {\n  let cancelCallback: ((error: Error) => unknown) | undefined;\n  if (typeof cancelCallbackOrListenOptions === 'object') {\n    cancelCallback = undefined;\n    options = cancelCallbackOrListenOptions;\n  }\n  if (typeof cancelCallbackOrListenOptions === 'function') {\n    cancelCallback = cancelCallbackOrListenOptions;\n  }\n\n  if (options && options.onlyOnce) {\n    const userCallback = callback;\n    const onceCallback: UserCallback = (dataSnapshot, previousChildName) => {\n      repoRemoveEventCallbackForQuery(query._repo, query, container);\n      userCallback(dataSnapshot, previousChildName);\n    };\n    onceCallback.userCallback = callback.userCallback;\n    onceCallback.context = callback.context;\n    callback = onceCallback;\n  }\n\n  const callbackContext = new CallbackContext(\n    callback,\n    cancelCallback || undefined\n  );\n  const container =\n    eventType === 'value'\n      ? new ValueEventRegistration(callbackContext)\n      : new ChildEventRegistration(eventType, callbackContext);\n  repoAddEventCallbackForQuery(query._repo, query, container);\n  return () => repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'value',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName?: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_added',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_changed',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_moved',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_removed',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\nexport { EventType };\n\n/**\n * Detaches a callback previously attached with the corresponding `on*()` (`onValue`, `onChildAdded`) listener.\n * Note: This is not the recommended way to remove a listener. Instead, please use the returned callback function from\n * the respective `on*` callbacks.\n *\n * Detach a callback previously attached with `on*()`. Calling `off()` on a parent listener\n * will not automatically remove listeners registered on child nodes, `off()`\n * must also be called on any child listeners to remove the callback.\n *\n * If a callback is not specified, all callbacks for the specified eventType\n * will be removed. Similarly, if no eventType is specified, all callbacks\n * for the `Reference` will be removed.\n *\n * Individual listeners can also be removed by invoking their unsubscribe\n * callbacks.\n *\n * @param query - The query that the listener was registered with.\n * @param eventType - One of the following strings: \"value\", \"child_added\",\n * \"child_changed\", \"child_removed\", or \"child_moved.\" If omitted, all callbacks\n * for the `Reference` will be removed.\n * @param callback - The callback function that was passed to `on()` or\n * `undefined` to remove all callbacks.\n */\nexport function off(\n  query: Query,\n  eventType?: EventType,\n  callback?: (\n    snapshot: DataSnapshot,\n    previousChildName?: string | null\n  ) => unknown\n): void {\n  let container: EventRegistration | null = null;\n  const expCallback = callback ? new CallbackContext(callback) : null;\n  if (eventType === 'value') {\n    container = new ValueEventRegistration(expCallback);\n  } else if (eventType) {\n    container = new ChildEventRegistration(eventType, expCallback);\n  }\n  repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\n\n/** Describes the different query constraints available in this SDK. */\nexport type QueryConstraintType =\n  | 'endAt'\n  | 'endBefore'\n  | 'startAt'\n  | 'startAfter'\n  | 'limitToFirst'\n  | 'limitToLast'\n  | 'orderByChild'\n  | 'orderByKey'\n  | 'orderByPriority'\n  | 'orderByValue'\n  | 'equalTo';\n\n/**\n * A `QueryConstraint` is used to narrow the set of documents returned by a\n * Database query. `QueryConstraint`s are created by invoking {@link endAt},\n * {@link endBefore}, {@link startAt}, {@link startAfter}, {@link\n * limitToFirst}, {@link limitToLast}, {@link orderByChild},\n * {@link orderByChild}, {@link orderByKey} , {@link orderByPriority} ,\n * {@link orderByValue}  or {@link equalTo} and\n * can then be passed to {@link query} to create a new query instance that\n * also contains this `QueryConstraint`.\n */\nexport abstract class QueryConstraint {\n  /** The type of this query constraints */\n  abstract readonly type: QueryConstraintType;\n\n  /**\n   * Takes the provided `Query` and returns a copy of the `Query` with this\n   * `QueryConstraint` applied.\n   */\n  abstract _apply<T>(query: QueryImpl): QueryImpl;\n}\n\nclass QueryEndAtConstraint extends QueryConstraint {\n  readonly type: 'endAt';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('endAt', this._value, query._path, true);\n    const newParams = queryParamsEndAt(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'endAt: Starting point was already set (by another call to endAt, ' +\n          'endBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified ending point.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The ending point is inclusive, so children with exactly the specified value\n * will be included in the query. The optional key argument can be used to\n * further limit the range of the query. If it is specified, then children that\n * have exactly the specified value must also have a key name less than or equal\n * to the specified key.\n *\n * You can read more about `endAt()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to end at. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to end at, among the children with the previously\n * specified priority. This argument is only allowed if ordering by child,\n * value, or priority.\n */\nexport function endAt(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('endAt', 'key', key, true);\n  return new QueryEndAtConstraint(value, key);\n}\n\nclass QueryEndBeforeConstraint extends QueryConstraint {\n  readonly type: 'endBefore';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('endBefore', this._value, query._path, false);\n    const newParams = queryParamsEndBefore(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'endBefore: Starting point was already set (by another call to endAt, ' +\n          'endBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified ending point (exclusive).\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The ending point is exclusive. If only a value is provided, children\n * with a value less than the specified value will be included in the query.\n * If a key is specified, then children must have a value less than or equal\n * to the specified value and a key name less than the specified key.\n *\n * @param value - The value to end before. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to end before, among the children with the\n * previously specified priority. This argument is only allowed if ordering by\n * child, value, or priority.\n */\nexport function endBefore(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('endBefore', 'key', key, true);\n  return new QueryEndBeforeConstraint(value, key);\n}\n\nclass QueryStartAtConstraint extends QueryConstraint {\n  readonly type: 'startAt';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('startAt', this._value, query._path, true);\n    const newParams = queryParamsStartAt(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'startAt: Starting point was already set (by another call to startAt, ' +\n          'startBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified starting point.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The starting point is inclusive, so children with exactly the specified value\n * will be included in the query. The optional key argument can be used to\n * further limit the range of the query. If it is specified, then children that\n * have exactly the specified value must also have a key name greater than or\n * equal to the specified key.\n *\n * You can read more about `startAt()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to start at. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start at. This argument is only allowed if\n * ordering by child, value, or priority.\n */\nexport function startAt(\n  value: number | string | boolean | null = null,\n  key?: string\n): QueryConstraint {\n  validateKey('startAt', 'key', key, true);\n  return new QueryStartAtConstraint(value, key);\n}\n\nclass QueryStartAfterConstraint extends QueryConstraint {\n  readonly type: 'startAfter';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('startAfter', this._value, query._path, false);\n    const newParams = queryParamsStartAfter(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'startAfter: Starting point was already set (by another call to startAt, ' +\n          'startAfter, or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified starting point (exclusive).\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The starting point is exclusive. If only a value is provided, children\n * with a value greater than the specified value will be included in the query.\n * If a key is specified, then children must have a value greater than or equal\n * to the specified value and a a key name greater than the specified key.\n *\n * @param value - The value to start after. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start after. This argument is only allowed if\n * ordering by child, value, or priority.\n */\nexport function startAfter(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('startAfter', 'key', key, true);\n  return new QueryStartAfterConstraint(value, key);\n}\n\nclass QueryLimitToFirstConstraint extends QueryConstraint {\n  readonly type: 'limitToFirst';\n\n  constructor(private readonly _limit: number) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    if (query._queryParams.hasLimit()) {\n      throw new Error(\n        'limitToFirst: Limit was already set (by another call to limitToFirst ' +\n          'or limitToLast).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      queryParamsLimitToFirst(query._queryParams, this._limit),\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that if limited to the first specific number\n * of children.\n *\n * The `limitToFirst()` method is used to set a maximum number of children to be\n * synced for a given callback. If we set a limit of 100, we will initially only\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\n * stored in our Database, a `child_added` event will fire for each message.\n * However, if we have over 100 messages, we will only receive a `child_added`\n * event for the first 100 ordered messages. As items change, we will receive\n * `child_removed` events for each item that drops out of the active list so\n * that the total number stays at 100.\n *\n * You can read more about `limitToFirst()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param limit - The maximum number of nodes to include in this query.\n */\nexport function limitToFirst(limit: number): QueryConstraint {\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n    throw new Error('limitToFirst: First argument must be a positive integer.');\n  }\n  return new QueryLimitToFirstConstraint(limit);\n}\n\nclass QueryLimitToLastConstraint extends QueryConstraint {\n  readonly type: 'limitToLast';\n\n  constructor(private readonly _limit: number) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    if (query._queryParams.hasLimit()) {\n      throw new Error(\n        'limitToLast: Limit was already set (by another call to limitToFirst ' +\n          'or limitToLast).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      queryParamsLimitToLast(query._queryParams, this._limit),\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that is limited to return only the last\n * specified number of children.\n *\n * The `limitToLast()` method is used to set a maximum number of children to be\n * synced for a given callback. If we set a limit of 100, we will initially only\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\n * stored in our Database, a `child_added` event will fire for each message.\n * However, if we have over 100 messages, we will only receive a `child_added`\n * event for the last 100 ordered messages. As items change, we will receive\n * `child_removed` events for each item that drops out of the active list so\n * that the total number stays at 100.\n *\n * You can read more about `limitToLast()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param limit - The maximum number of nodes to include in this query.\n */\nexport function limitToLast(limit: number): QueryConstraint {\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n    throw new Error('limitToLast: First argument must be a positive integer.');\n  }\n\n  return new QueryLimitToLastConstraint(limit);\n}\n\nclass QueryOrderByChildConstraint extends QueryConstraint {\n  readonly type: 'orderByChild';\n\n  constructor(private readonly _path: string) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByChild');\n    const parsedPath = new Path(this._path);\n    if (pathIsEmpty(parsedPath)) {\n      throw new Error(\n        'orderByChild: cannot pass in empty path. Use orderByValue() instead.'\n      );\n    }\n    const index = new PathIndex(parsedPath);\n    const newParams = queryParamsOrderBy(query._queryParams, index);\n    validateQueryEndpoints(newParams);\n\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by the specified child key.\n *\n * Queries can only order by one key at a time. Calling `orderByChild()`\n * multiple times on the same query is an error.\n *\n * Firebase queries allow you to order your data by any child key on the fly.\n * However, if you know in advance what your indexes will be, you can define\n * them via the .indexOn rule in your Security Rules for better performance. See\n * the{@link https://firebase.google.com/docs/database/security/indexing-data}\n * rule for more information.\n *\n * You can read more about `orderByChild()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n *\n * @param path - The path to order by.\n */\nexport function orderByChild(path: string): QueryConstraint {\n  if (path === '$key') {\n    throw new Error(\n      'orderByChild: \"$key\" is invalid.  Use orderByKey() instead.'\n    );\n  } else if (path === '$priority') {\n    throw new Error(\n      'orderByChild: \"$priority\" is invalid.  Use orderByPriority() instead.'\n    );\n  } else if (path === '$value') {\n    throw new Error(\n      'orderByChild: \"$value\" is invalid.  Use orderByValue() instead.'\n    );\n  }\n  validatePathString('orderByChild', 'path', path, false);\n  return new QueryOrderByChildConstraint(path);\n}\n\nclass QueryOrderByKeyConstraint extends QueryConstraint {\n  readonly type: 'orderByKey';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByKey');\n    const newParams = queryParamsOrderBy(query._queryParams, KEY_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by the key.\n *\n * Sorts the results of a query by their (ascending) key values.\n *\n * You can read more about `orderByKey()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n */\nexport function orderByKey(): QueryConstraint {\n  return new QueryOrderByKeyConstraint();\n}\n\nclass QueryOrderByPriorityConstraint extends QueryConstraint {\n  readonly type: 'orderByPriority';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByPriority');\n    const newParams = queryParamsOrderBy(query._queryParams, PRIORITY_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by priority.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}\n * for alternatives to priority.\n */\nexport function orderByPriority(): QueryConstraint {\n  return new QueryOrderByPriorityConstraint();\n}\n\nclass QueryOrderByValueConstraint extends QueryConstraint {\n  readonly type: 'orderByValue';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByValue');\n    const newParams = queryParamsOrderBy(query._queryParams, VALUE_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by value.\n *\n * If the children of a query are all scalar values (string, number, or\n * boolean), you can order the results by their (ascending) values.\n *\n * You can read more about `orderByValue()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n */\nexport function orderByValue(): QueryConstraint {\n  return new QueryOrderByValueConstraint();\n}\n\nclass QueryEqualToValueConstraint extends QueryConstraint {\n  readonly type: 'equalTo';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('equalTo', this._value, query._path, false);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'equalTo: Starting point was already set (by another call to startAt/startAfter or ' +\n          'equalTo).'\n      );\n    }\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'equalTo: Ending point was already set (by another call to endAt/endBefore or ' +\n          'equalTo).'\n      );\n    }\n    return new QueryEndAtConstraint(this._value, this._key)._apply(\n      new QueryStartAtConstraint(this._value, this._key)._apply(query)\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` that includes children that match the specified\n * value.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The optional key argument can be used to further limit the range of the\n * query. If it is specified, then children that have exactly the specified\n * value must also have exactly the specified key as their key name. This can be\n * used to filter result sets with many matches for the same value.\n *\n * You can read more about `equalTo()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to match for. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start at, among the children with the\n * previously specified priority. This argument is only allowed if ordering by\n * child, value, or priority.\n */\nexport function equalTo(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('equalTo', 'key', key, true);\n  return new QueryEqualToValueConstraint(value, key);\n}\n\n/**\n * Creates a new immutable instance of `Query` that is extended to also include\n * additional query constraints.\n *\n * @param query - The Query instance to use as a base for the new constraints.\n * @param queryConstraints - The list of `QueryConstraint`s to apply.\n * @throws if any of the provided query constraints cannot be combined with the\n * existing or new constraints.\n */\nexport function query(\n  query: Query,\n  ...queryConstraints: QueryConstraint[]\n): Query {\n  let queryImpl = getModularInstance(query) as QueryImpl;\n  for (const constraint of queryConstraints) {\n    queryImpl = constraint._apply(queryImpl);\n  }\n  return queryImpl;\n}\n\n/**\n * Define reference constructor in various modules\n *\n * We are doing this here to avoid several circular\n * dependency issues\n */\nsyncPointSetReferenceConstructor(ReferenceImpl);\nsyncTreeSetReferenceConstructor(ReferenceImpl);\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from '@firebase/util';\n\nimport {\n  Repo,\n  repoOnDisconnectCancel,\n  repoOnDisconnectSet,\n  repoOnDisconnectSetWithPriority,\n  repoOnDisconnectUpdate\n} from '../core/Repo';\nimport { Path } from '../core/util/Path';\nimport {\n  validateFirebaseDataArg,\n  validateFirebaseMergeDataArg,\n  validatePriority,\n  validateWritablePath\n} from '../core/util/validation';\n\n/**\n * The `onDisconnect` class allows you to write or clear data when your client\n * disconnects from the Database server. These updates occur whether your\n * client disconnects cleanly or not, so you can rely on them to clean up data\n * even if a connection is dropped or a client crashes.\n *\n * The `onDisconnect` class is most commonly used to manage presence in\n * applications where it is useful to detect how many clients are connected and\n * when other clients disconnect. See\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n * for more information.\n *\n * To avoid problems when a connection is dropped before the requests can be\n * transferred to the Database server, these functions should be called before\n * writing any data.\n *\n * Note that `onDisconnect` operations are only triggered once. If you want an\n * operation to occur each time a disconnect occurs, you'll need to re-establish\n * the `onDisconnect` operations each time you reconnect.\n */\nexport class OnDisconnect {\n  /** @hideconstructor */\n  constructor(private _repo: Repo, private _path: Path) {}\n\n  /**\n   * Cancels all previously queued `onDisconnect()` set or update events for this\n   * location and all children.\n   *\n   * If a write has been queued for this location via a `set()` or `update()` at a\n   * parent location, the write at this location will be canceled, though writes\n   * to sibling locations will still occur.\n   *\n   * @returns Resolves when synchronization to the server is complete.\n   */\n  cancel(): Promise<void> {\n    const deferred = new Deferred<void>();\n    repoOnDisconnectCancel(\n      this._repo,\n      this._path,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Ensures the data at this location is deleted when the client is disconnected\n   * (due to closing the browser, navigating to a new page, or network issues).\n   *\n   * @returns Resolves when synchronization to the server is complete.\n   */\n  remove(): Promise<void> {\n    validateWritablePath('OnDisconnect.remove', this._path);\n    const deferred = new Deferred<void>();\n    repoOnDisconnectSet(\n      this._repo,\n      this._path,\n      null,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Ensures the data at this location is set to the specified value when the\n   * client is disconnected (due to closing the browser, navigating to a new page,\n   * or network issues).\n   *\n   * `set()` is especially useful for implementing \"presence\" systems, where a\n   * value should be changed or cleared when a user disconnects so that they\n   * appear \"offline\" to other users. See\n   * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n   * for more information.\n   *\n   * Note that `onDisconnect` operations are only triggered once. If you want an\n   * operation to occur each time a disconnect occurs, you'll need to re-establish\n   * the `onDisconnect` operations each time.\n   *\n   * @param value - The value to be written to this location on disconnect (can\n   * be an object, array, string, number, boolean, or null).\n   * @returns Resolves when synchronization to the Database is complete.\n   */\n  set(value: unknown): Promise<void> {\n    validateWritablePath('OnDisconnect.set', this._path);\n    validateFirebaseDataArg('OnDisconnect.set', value, this._path, false);\n    const deferred = new Deferred<void>();\n    repoOnDisconnectSet(\n      this._repo,\n      this._path,\n      value,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Ensures the data at this location is set to the specified value and priority\n   * when the client is disconnected (due to closing the browser, navigating to a\n   * new page, or network issues).\n   *\n   * @param value - The value to be written to this location on disconnect (can\n   * be an object, array, string, number, boolean, or null).\n   * @param priority - The priority to be written (string, number, or null).\n   * @returns Resolves when synchronization to the Database is complete.\n   */\n  setWithPriority(\n    value: unknown,\n    priority: number | string | null\n  ): Promise<void> {\n    validateWritablePath('OnDisconnect.setWithPriority', this._path);\n    validateFirebaseDataArg(\n      'OnDisconnect.setWithPriority',\n      value,\n      this._path,\n      false\n    );\n    validatePriority('OnDisconnect.setWithPriority', priority, false);\n\n    const deferred = new Deferred<void>();\n    repoOnDisconnectSetWithPriority(\n      this._repo,\n      this._path,\n      value,\n      priority,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Writes multiple values at this location when the client is disconnected (due\n   * to closing the browser, navigating to a new page, or network issues).\n   *\n   * The `values` argument contains multiple property-value pairs that will be\n   * written to the Database together. Each child property can either be a simple\n   * property (for example, \"name\") or a relative path (for example, \"name/first\")\n   * from the current location to the data to update.\n   *\n   * As opposed to the `set()` method, `update()` can be use to selectively update\n   * only the referenced properties at the current location (instead of replacing\n   * all the child properties at the current location).\n   *\n   * @param values - Object containing multiple values.\n   * @returns Resolves when synchronization to the Database is complete.\n   */\n  update(values: object): Promise<void> {\n    validateWritablePath('OnDisconnect.update', this._path);\n    validateFirebaseMergeDataArg(\n      'OnDisconnect.update',\n      values,\n      this._path,\n      false\n    );\n    const deferred = new Deferred<void>();\n    repoOnDisconnectUpdate(\n      this._repo,\n      this._path,\n      values as Record<string, unknown>,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport {\n  tryParseInt,\n  MAX_NAME,\n  MIN_NAME,\n  INTEGER_32_MIN,\n  INTEGER_32_MAX\n} from '../util/util';\n\n// Modeled after base64 web-safe chars, but ordered by ASCII.\nconst PUSH_CHARS =\n  '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\n\nconst MIN_PUSH_CHAR = '-';\n\nconst MAX_PUSH_CHAR = 'z';\n\nconst MAX_KEY_LEN = 786;\n\n/**\n * Fancy ID generator that creates 20-character string identifiers with the\n * following properties:\n *\n * 1. They're based on timestamp so that they sort *after* any existing ids.\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\n *    collide with other clients' IDs.\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\n *    that will sort properly).\n * 4. They're monotonically increasing. Even if you generate more than one in\n *    the same timestamp, the latter ones will sort after the former ones. We do\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\n *    in the case of a timestamp collision).\n */\nexport const nextPushId = (function () {\n  // Timestamp of last push, used to prevent local collisions if you push twice\n  // in one ms.\n  let lastPushTime = 0;\n\n  // We generate 72-bits of randomness which get turned into 12 characters and\n  // appended to the timestamp to prevent collisions with other clients. We\n  // store the last characters we generated because in the event of a collision,\n  // we'll use those same characters except \"incremented\" by one.\n  const lastRandChars: number[] = [];\n\n  return function (now: number) {\n    const duplicateTime = now === lastPushTime;\n    lastPushTime = now;\n\n    let i;\n    const timeStampChars = new Array(8);\n    for (i = 7; i >= 0; i--) {\n      timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\n      // NOTE: Can't use << here because javascript will convert to int and lose\n      // the upper bits.\n      now = Math.floor(now / 64);\n    }\n    assert(now === 0, 'Cannot push at time == 0');\n\n    let id = timeStampChars.join('');\n\n    if (!duplicateTime) {\n      for (i = 0; i < 12; i++) {\n        lastRandChars[i] = Math.floor(Math.random() * 64);\n      }\n    } else {\n      // If the timestamp hasn't changed since last push, use the same random\n      // number, except incremented by 1.\n      for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\n        lastRandChars[i] = 0;\n      }\n      lastRandChars[i]++;\n    }\n    for (i = 0; i < 12; i++) {\n      id += PUSH_CHARS.charAt(lastRandChars[i]);\n    }\n    assert(id.length === 20, 'nextPushId: Length should be 20.');\n\n    return id;\n  };\n})();\n\nexport const successor = function (key: string) {\n  if (key === '' + INTEGER_32_MAX) {\n    // See https://firebase.google.com/docs/database/web/lists-of-data#data-order\n    return MIN_PUSH_CHAR;\n  }\n  const keyAsInt: number = tryParseInt(key);\n  if (keyAsInt != null) {\n    return '' + (keyAsInt + 1);\n  }\n  const next = new Array(key.length);\n\n  for (let i = 0; i < next.length; i++) {\n    next[i] = key.charAt(i);\n  }\n\n  if (next.length < MAX_KEY_LEN) {\n    next.push(MIN_PUSH_CHAR);\n    return next.join('');\n  }\n\n  let i = next.length - 1;\n\n  while (i >= 0 && next[i] === MAX_PUSH_CHAR) {\n    i--;\n  }\n\n  // `successor` was called on the largest possible key, so return the\n  // MAX_NAME, which sorts larger than all keys.\n  if (i === -1) {\n    return MAX_NAME;\n  }\n\n  const source = next[i];\n  const sourcePlusOne = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(source) + 1);\n  next[i] = sourcePlusOne;\n\n  return next.slice(0, i + 1).join('');\n};\n\n// `key` is assumed to be non-empty.\nexport const predecessor = function (key: string) {\n  if (key === '' + INTEGER_32_MIN) {\n    return MIN_NAME;\n  }\n  const keyAsInt: number = tryParseInt(key);\n  if (keyAsInt != null) {\n    return '' + (keyAsInt - 1);\n  }\n  const next = new Array(key.length);\n  for (let i = 0; i < next.length; i++) {\n    next[i] = key.charAt(i);\n  }\n  // If `key` ends in `MIN_PUSH_CHAR`, the largest key lexicographically\n  // smaller than `key`, is `key[0:key.length - 1]`. The next key smaller\n  // than that, `predecessor(predecessor(key))`, is\n  //\n  // `key[0:key.length - 2] + (key[key.length - 1] - 1) + \\\n  //   { MAX_PUSH_CHAR repeated MAX_KEY_LEN - (key.length - 1) times }\n  //\n  // analogous to increment/decrement for base-10 integers.\n  //\n  // This works because lexigographic comparison works character-by-character,\n  // using length as a tie-breaker if one key is a prefix of the other.\n  if (next[next.length - 1] === MIN_PUSH_CHAR) {\n    if (next.length === 1) {\n      // See https://firebase.google.com/docs/database/web/lists-of-data#orderbykey\n      return '' + INTEGER_32_MAX;\n    }\n    delete next[next.length - 1];\n    return next.join('');\n  }\n  // Replace the last character with it's immediate predecessor, and\n  // fill the suffix of the key with MAX_PUSH_CHAR. This is the\n  // lexicographically largest possible key smaller than `key`.\n  next[next.length - 1] = PUSH_CHARS.charAt(\n    PUSH_CHARS.indexOf(next[next.length - 1]) - 1\n  );\n  return next.join('') + MAX_PUSH_CHAR.repeat(MAX_KEY_LEN - next.length);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  _FirebaseService,\n  _getProvider,\n  FirebaseApp,\n  getApp\n} from '@firebase/app';\nimport { AppCheckInternalComponentName } from '@firebase/app-check-interop-types';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\nimport {\n  getModularInstance,\n  createMockUserToken,\n  EmulatorMockTokenOptions,\n  getDefaultEmulatorHostnameAndPort\n} from '@firebase/util';\n\nimport { AppCheckTokenProvider } from '../core/AppCheckTokenProvider';\nimport {\n  AuthTokenProvider,\n  EmulatorTokenProvider,\n  FirebaseAuthTokenProvider\n} from '../core/AuthTokenProvider';\nimport { Repo, repoInterrupt, repoResume, repoStart } from '../core/Repo';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { parseRepoInfo } from '../core/util/libs/parser';\nimport { newEmptyPath, pathIsEmpty } from '../core/util/Path';\nimport {\n  warn,\n  fatal,\n  log,\n  enableLogging as enableLoggingImpl\n} from '../core/util/util';\nimport { validateUrl } from '../core/util/validation';\nimport { BrowserPollConnection } from '../realtime/BrowserPollConnection';\nimport { TransportManager } from '../realtime/TransportManager';\nimport { WebSocketConnection } from '../realtime/WebSocketConnection';\n\nimport { ReferenceImpl } from './Reference_impl';\n\nexport { EmulatorMockTokenOptions } from '@firebase/util';\n/**\n * This variable is also defined in the firebase Node.js Admin SDK. Before\n * modifying this definition, consult the definition in:\n *\n * https://github.com/firebase/firebase-admin-node\n *\n * and make sure the two are consistent.\n */\nconst FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\n\n/**\n * Creates and caches `Repo` instances.\n */\nconst repos: {\n  [appName: string]: {\n    [dbUrl: string]: Repo;\n  };\n} = {};\n\n/**\n * If true, any new `Repo` will be created to use `ReadonlyRestClient` (for testing purposes).\n */\nlet useRestClient = false;\n\n/**\n * Update an existing `Repo` in place to point to a new host/port.\n */\nfunction repoManagerApplyEmulatorSettings(\n  repo: Repo,\n  host: string,\n  port: number,\n  tokenProvider?: AuthTokenProvider\n): void {\n  repo.repoInfo_ = new RepoInfo(\n    `${host}:${port}`,\n    /* secure= */ false,\n    repo.repoInfo_.namespace,\n    repo.repoInfo_.webSocketOnly,\n    repo.repoInfo_.nodeAdmin,\n    repo.repoInfo_.persistenceKey,\n    repo.repoInfo_.includeNamespaceInQueryParams\n  );\n\n  if (tokenProvider) {\n    repo.authTokenProvider_ = tokenProvider;\n  }\n}\n\n/**\n * This function should only ever be called to CREATE a new database instance.\n * @internal\n */\nexport function repoManagerDatabaseFromApp(\n  app: FirebaseApp,\n  authProvider: Provider<FirebaseAuthInternalName>,\n  appCheckProvider?: Provider<AppCheckInternalComponentName>,\n  url?: string,\n  nodeAdmin?: boolean\n): Database {\n  let dbUrl: string | undefined = url || app.options.databaseURL;\n  if (dbUrl === undefined) {\n    if (!app.options.projectId) {\n      fatal(\n        \"Can't determine Firebase Database URL. Be sure to include \" +\n          ' a Project ID when calling firebase.initializeApp().'\n      );\n    }\n\n    log('Using default host for project ', app.options.projectId);\n    dbUrl = `${app.options.projectId}-default-rtdb.firebaseio.com`;\n  }\n\n  let parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n  let repoInfo = parsedUrl.repoInfo;\n\n  let isEmulator: boolean;\n\n  let dbEmulatorHost: string | undefined = undefined;\n  if (typeof process !== 'undefined' && process.env) {\n    dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\n  }\n\n  if (dbEmulatorHost) {\n    isEmulator = true;\n    dbUrl = `http://${dbEmulatorHost}?ns=${repoInfo.namespace}`;\n    parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n    repoInfo = parsedUrl.repoInfo;\n  } else {\n    isEmulator = !parsedUrl.repoInfo.secure;\n  }\n\n  const authTokenProvider =\n    nodeAdmin && isEmulator\n      ? new EmulatorTokenProvider(EmulatorTokenProvider.OWNER)\n      : new FirebaseAuthTokenProvider(app.name, app.options, authProvider);\n\n  validateUrl('Invalid Firebase Database URL', parsedUrl);\n  if (!pathIsEmpty(parsedUrl.path)) {\n    fatal(\n      'Database URL must point to the root of a Firebase Database ' +\n        '(not including a child path).'\n    );\n  }\n\n  const repo = repoManagerCreateRepo(\n    repoInfo,\n    app,\n    authTokenProvider,\n    new AppCheckTokenProvider(app.name, appCheckProvider)\n  );\n  return new Database(repo, app);\n}\n\n/**\n * Remove the repo and make sure it is disconnected.\n *\n */\nfunction repoManagerDeleteRepo(repo: Repo, appName: string): void {\n  const appRepos = repos[appName];\n  // This should never happen...\n  if (!appRepos || appRepos[repo.key] !== repo) {\n    fatal(`Database ${appName}(${repo.repoInfo_}) has already been deleted.`);\n  }\n  repoInterrupt(repo);\n  delete appRepos[repo.key];\n}\n\n/**\n * Ensures a repo doesn't already exist and then creates one using the\n * provided app.\n *\n * @param repoInfo - The metadata about the Repo\n * @returns The Repo object for the specified server / repoName.\n */\nfunction repoManagerCreateRepo(\n  repoInfo: RepoInfo,\n  app: FirebaseApp,\n  authTokenProvider: AuthTokenProvider,\n  appCheckProvider: AppCheckTokenProvider\n): Repo {\n  let appRepos = repos[app.name];\n\n  if (!appRepos) {\n    appRepos = {};\n    repos[app.name] = appRepos;\n  }\n\n  let repo = appRepos[repoInfo.toURLString()];\n  if (repo) {\n    fatal(\n      'Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.'\n    );\n  }\n  repo = new Repo(repoInfo, useRestClient, authTokenProvider, appCheckProvider);\n  appRepos[repoInfo.toURLString()] = repo;\n\n  return repo;\n}\n\n/**\n * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\n */\nexport function repoManagerForceRestClient(forceRestClient: boolean): void {\n  useRestClient = forceRestClient;\n}\n\n/**\n * Class representing a Firebase Realtime Database.\n */\nexport class Database implements _FirebaseService {\n  /** Represents a `Database` instance. */\n  readonly 'type' = 'database';\n\n  /** Track if the instance has been used (root or repo accessed) */\n  _instanceStarted: boolean = false;\n\n  /** Backing state for root_ */\n  private _rootInternal?: ReferenceImpl;\n\n  /** @hideconstructor */\n  constructor(\n    public _repoInternal: Repo,\n    /** The {@link @firebase/app#FirebaseApp} associated with this Realtime Database instance. */\n    readonly app: FirebaseApp\n  ) {}\n\n  get _repo(): Repo {\n    if (!this._instanceStarted) {\n      repoStart(\n        this._repoInternal,\n        this.app.options.appId,\n        this.app.options['databaseAuthVariableOverride']\n      );\n      this._instanceStarted = true;\n    }\n    return this._repoInternal;\n  }\n\n  get _root(): ReferenceImpl {\n    if (!this._rootInternal) {\n      this._rootInternal = new ReferenceImpl(this._repo, newEmptyPath());\n    }\n    return this._rootInternal;\n  }\n\n  _delete(): Promise<void> {\n    if (this._rootInternal !== null) {\n      repoManagerDeleteRepo(this._repo, this.app.name);\n      this._repoInternal = null;\n      this._rootInternal = null;\n    }\n    return Promise.resolve();\n  }\n\n  _checkNotDeleted(apiName: string) {\n    if (this._rootInternal === null) {\n      fatal('Cannot call ' + apiName + ' on a deleted database.');\n    }\n  }\n}\n\nfunction checkTransportInit() {\n  if (TransportManager.IS_TRANSPORT_INITIALIZED) {\n    warn(\n      'Transport has already been initialized. Please call this function before calling ref or setting up a listener'\n    );\n  }\n}\n\n/**\n * Force the use of websockets instead of longPolling.\n */\nexport function forceWebSockets() {\n  checkTransportInit();\n  BrowserPollConnection.forceDisallow();\n}\n\n/**\n * Force the use of longPolling instead of websockets. This will be ignored if websocket protocol is used in databaseURL.\n */\nexport function forceLongPolling() {\n  checkTransportInit();\n  WebSocketConnection.forceDisallow();\n  BrowserPollConnection.forceAllow();\n}\n\n/**\n * Returns the instance of the Realtime Database SDK that is associated\n * with the provided {@link @firebase/app#FirebaseApp}. Initializes a new instance with\n * with default settings if no instance exists or if the existing instance uses\n * a custom database URL.\n *\n * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned Realtime\n * Database instance is associated with.\n * @param url - The URL of the Realtime Database instance to connect to. If not\n * provided, the SDK connects to the default instance of the Firebase App.\n * @returns The `Database` instance of the provided app.\n */\nexport function getDatabase(\n  app: FirebaseApp = getApp(),\n  url?: string\n): Database {\n  const db = _getProvider(app, 'database').getImmediate({\n    identifier: url\n  }) as Database;\n  const emulator = getDefaultEmulatorHostnameAndPort('database');\n  if (emulator) {\n    connectDatabaseEmulator(db, ...emulator);\n  }\n  return db;\n}\n\n/**\n * Modify the provided instance to communicate with the Realtime Database\n * emulator.\n *\n * <p>Note: This method must be called before performing any other operation.\n *\n * @param db - The instance to modify.\n * @param host - The emulator host (ex: localhost)\n * @param port - The emulator port (ex: 8080)\n * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\n */\nexport function connectDatabaseEmulator(\n  db: Database,\n  host: string,\n  port: number,\n  options: {\n    mockUserToken?: EmulatorMockTokenOptions | string;\n  } = {}\n): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('useEmulator');\n  if (db._instanceStarted) {\n    fatal(\n      'Cannot call useEmulator() after instance has already been initialized.'\n    );\n  }\n\n  const repo = db._repoInternal;\n  let tokenProvider: EmulatorTokenProvider | undefined = undefined;\n  if (repo.repoInfo_.nodeAdmin) {\n    if (options.mockUserToken) {\n      fatal(\n        'mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the \"firebase\" package instead of \"firebase-admin\".'\n      );\n    }\n    tokenProvider = new EmulatorTokenProvider(EmulatorTokenProvider.OWNER);\n  } else if (options.mockUserToken) {\n    const token =\n      typeof options.mockUserToken === 'string'\n        ? options.mockUserToken\n        : createMockUserToken(options.mockUserToken, db.app.options.projectId);\n    tokenProvider = new EmulatorTokenProvider(token);\n  }\n\n  // Modify the repo to apply emulator settings\n  repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider);\n}\n\n/**\n * Disconnects from the server (all Database operations will be completed\n * offline).\n *\n * The client automatically maintains a persistent connection to the Database\n * server, which will remain active indefinitely and reconnect when\n * disconnected. However, the `goOffline()` and `goOnline()` methods may be used\n * to control the client connection in cases where a persistent connection is\n * undesirable.\n *\n * While offline, the client will no longer receive data updates from the\n * Database. However, all Database operations performed locally will continue to\n * immediately fire events, allowing your application to continue behaving\n * normally. Additionally, each operation performed locally will automatically\n * be queued and retried upon reconnection to the Database server.\n *\n * To reconnect to the Database and begin receiving remote events, see\n * `goOnline()`.\n *\n * @param db - The instance to disconnect.\n */\nexport function goOffline(db: Database): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('goOffline');\n  repoInterrupt(db._repo);\n}\n\n/**\n * Reconnects to the server and synchronizes the offline Database state\n * with the server state.\n *\n * This method should be used after disabling the active connection with\n * `goOffline()`. Once reconnected, the client will transmit the proper data\n * and fire the appropriate events so that your client \"catches up\"\n * automatically.\n *\n * @param db - The instance to reconnect.\n */\nexport function goOnline(db: Database): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('goOnline');\n  repoResume(db._repo);\n}\n\n/**\n * Logs debugging information to the console.\n *\n * @param enabled - Enables logging if `true`, disables logging if `false`.\n * @param persistent - Remembers the logging state between page refreshes if\n * `true`.\n */\nexport function enableLogging(enabled: boolean, persistent?: boolean);\n\n/**\n * Logs debugging information to the console.\n *\n * @param logger - A custom logger function to control how things get logged.\n */\nexport function enableLogging(logger: (message: string) => unknown);\n\nexport function enableLogging(\n  logger: boolean | ((message: string) => unknown),\n  persistent?: boolean\n): void {\n  enableLoggingImpl(logger, persistent);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  _registerComponent,\n  registerVersion,\n  SDK_VERSION\n} from '@firebase/app';\nimport { Component, ComponentType } from '@firebase/component';\n\nimport { name, version } from '../package.json';\nimport { setSDKVersion } from '../src/core/version';\n\nimport { repoManagerDatabaseFromApp } from './api/Database';\n\nexport function registerDatabase(variant?: string): void {\n  setSDKVersion(SDK_VERSION);\n  _registerComponent(\n    new Component(\n      'database',\n      (container, { instanceIdentifier: url }) => {\n        const app = container.getProvider('app').getImmediate()!;\n        const authProvider = container.getProvider('auth-internal');\n        const appCheckProvider = container.getProvider('app-check-internal');\n        return repoManagerDatabaseFromApp(\n          app,\n          authProvider,\n          appCheckProvider,\n          url\n        );\n      },\n      ComponentType.PUBLIC\n    ).setMultipleInstances(true)\n  );\n  registerVersion(name, version, variant);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst SERVER_TIMESTAMP = {\n  '.sv': 'timestamp'\n};\n\n/**\n * Returns a placeholder value for auto-populating the current timestamp (time\n * since the Unix epoch, in milliseconds) as determined by the Firebase\n * servers.\n */\nexport function serverTimestamp(): object {\n  return SERVER_TIMESTAMP;\n}\n\n/**\n * Returns a placeholder value that can be used to atomically increment the\n * current database value by the provided delta.\n *\n * @param delta - the amount to modify the current value atomically.\n * @returns A placeholder value for modifying data atomically server-side.\n */\nexport function increment(delta: number): object {\n  return {\n    '.sv': {\n      'increment': delta\n    }\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getModularInstance, Deferred } from '@firebase/util';\n\nimport { repoStartTransaction } from '../core/Repo';\nimport { PRIORITY_INDEX } from '../core/snap/indexes/PriorityIndex';\nimport { Node } from '../core/snap/Node';\nimport { validateWritablePath } from '../core/util/validation';\n\nimport { DatabaseReference } from './Reference';\nimport { DataSnapshot, onValue, ReferenceImpl } from './Reference_impl';\n\n/** An options object to configure transactions. */\nexport interface TransactionOptions {\n  /**\n   * By default, events are raised each time the transaction update function\n   * runs. So if it is run multiple times, you may see intermediate states. You\n   * can set this to false to suppress these intermediate states and instead\n   * wait until the transaction has completed before events are raised.\n   */\n  readonly applyLocally?: boolean;\n}\n\n/**\n * A type for the resolve value of {@link runTransaction}.\n */\nexport class TransactionResult {\n  /** @hideconstructor */\n  constructor(\n    /** Whether the transaction was successfully committed. */\n    readonly committed: boolean,\n    /** The resulting data snapshot. */\n    readonly snapshot: DataSnapshot\n  ) {}\n\n  /** Returns a JSON-serializable representation of this object. */\n  toJSON(): object {\n    return { committed: this.committed, snapshot: this.snapshot.toJSON() };\n  }\n}\n\n/**\n * Atomically modifies the data at this location.\n *\n * Atomically modify the data at this location. Unlike a normal `set()`, which\n * just overwrites the data regardless of its previous value, `runTransaction()` is\n * used to modify the existing value to a new value, ensuring there are no\n * conflicts with other clients writing to the same location at the same time.\n *\n * To accomplish this, you pass `runTransaction()` an update function which is\n * used to transform the current value into a new value. If another client\n * writes to the location before your new value is successfully written, your\n * update function will be called again with the new current value, and the\n * write will be retried. This will happen repeatedly until your write succeeds\n * without conflict or you abort the transaction by not returning a value from\n * your update function.\n *\n * Note: Modifying data with `set()` will cancel any pending transactions at\n * that location, so extreme care should be taken if mixing `set()` and\n * `runTransaction()` to update the same data.\n *\n * Note: When using transactions with Security and Firebase Rules in place, be\n * aware that a client needs `.read` access in addition to `.write` access in\n * order to perform a transaction. This is because the client-side nature of\n * transactions requires the client to read the data in order to transactionally\n * update it.\n *\n * @param ref - The location to atomically modify.\n * @param transactionUpdate - A developer-supplied function which will be passed\n * the current data stored at this location (as a JavaScript object). The\n * function should return the new value it would like written (as a JavaScript\n * object). If `undefined` is returned (i.e. you return with no arguments) the\n * transaction will be aborted and the data at this location will not be\n * modified.\n * @param options - An options object to configure transactions.\n * @returns A `Promise` that can optionally be used instead of the `onComplete`\n * callback to handle success and failure.\n */\nexport function runTransaction(\n  ref: DatabaseReference,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  transactionUpdate: (currentData: any) => unknown,\n  options?: TransactionOptions\n): Promise<TransactionResult> {\n  ref = getModularInstance(ref);\n\n  validateWritablePath('Reference.transaction', ref._path);\n\n  if (ref.key === '.length' || ref.key === '.keys') {\n    throw (\n      'Reference.transaction failed: ' + ref.key + ' is a read-only object.'\n    );\n  }\n\n  const applyLocally = options?.applyLocally ?? true;\n  const deferred = new Deferred<TransactionResult>();\n\n  const promiseComplete = (\n    error: Error | null,\n    committed: boolean,\n    node: Node | null\n  ) => {\n    let dataSnapshot: DataSnapshot | null = null;\n    if (error) {\n      deferred.reject(error);\n    } else {\n      dataSnapshot = new DataSnapshot(\n        node,\n        new ReferenceImpl(ref._repo, ref._path),\n        PRIORITY_INDEX\n      );\n      deferred.resolve(new TransactionResult(committed, dataSnapshot));\n    }\n  };\n\n  // Add a watch to make sure we get server updates.\n  const unwatcher = onValue(ref, () => {});\n\n  repoStartTransaction(\n    ref._repo,\n    ref._path,\n    transactionUpdate,\n    promiseComplete,\n    unwatcher,\n    applyLocally\n  );\n\n  return deferred.promise;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PersistentConnection } from '../core/PersistentConnection';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { Connection } from '../realtime/Connection';\n\nimport { repoManagerForceRestClient } from './Database';\n\nexport const DataConnection = PersistentConnection;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(PersistentConnection.prototype as any).simpleListen = function (\n  pathString: string,\n  onComplete: (a: unknown) => void\n) {\n  this.sendRequest('q', { p: pathString }, onComplete);\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(PersistentConnection.prototype as any).echo = function (\n  data: unknown,\n  onEcho: (a: unknown) => void\n) {\n  this.sendRequest('echo', { d: data }, onEcho);\n};\n\n// RealTimeConnection properties that we use in tests.\nexport const RealTimeConnection = Connection;\n\n/**\n * @internal\n */\nexport const hijackHash = function (newHash: () => string) {\n  const oldPut = PersistentConnection.prototype.put;\n  PersistentConnection.prototype.put = function (\n    pathString,\n    data,\n    onComplete,\n    hash\n  ) {\n    if (hash !== undefined) {\n      hash = newHash();\n    }\n    oldPut.call(this, pathString, data, onComplete, hash);\n  };\n  return function () {\n    PersistentConnection.prototype.put = oldPut;\n  };\n};\n\nexport const ConnectionTarget = RepoInfo;\n\n/**\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\n * @internal\n */\nexport const forceRestClient = function (forceRestClient: boolean) {\n  repoManagerForceRestClient(forceRestClient);\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const PROTOCOL_VERSION = '5';\n\nexport const VERSION_PARAM = 'v';\n\nexport const TRANSPORT_SESSION_PARAM = 's';\n\nexport const REFERER_PARAM = 'r';\n\nexport const FORGE_REF = 'f';\n\n// Matches console.firebase.google.com, firebase-console-*.corp.google.com and\n// firebase.corp.google.com\nexport const FORGE_DOMAIN_RE =\n  /(console\\.firebase|firebase-console-\\w+\\.corp|firebase\\.corp)\\.google\\.com/;\n\nexport const LAST_SESSION_PARAM = 'ls';\n\nexport const APPLICATION_ID_PARAM = 'p';\n\nexport const APP_CHECK_TOKEN_PARAM = 'ac';\n\nexport const WEBSOCKET = 'websocket';\n\nexport const LONG_POLLING = 'long_polling';\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\n\nimport { Index } from './indexes/Index';\n\n/**\n * Node is an interface defining the common functionality for nodes in\n * a DataSnapshot.\n *\n * @interface\n */\nexport interface Node {\n  /**\n   * Whether this node is a leaf node.\n   * @returns Whether this is a leaf node.\n   */\n  isLeafNode(): boolean;\n\n  /**\n   * Gets the priority of the node.\n   * @returns The priority of the node.\n   */\n  getPriority(): Node;\n\n  /**\n   * Returns a duplicate node with the new priority.\n   * @param newPriorityNode - New priority to set for the node.\n   * @returns Node with new priority.\n   */\n  updatePriority(newPriorityNode: Node): Node;\n\n  /**\n   * Returns the specified immediate child, or null if it doesn't exist.\n   * @param childName - The name of the child to retrieve.\n   * @returns The retrieved child, or an empty node.\n   */\n  getImmediateChild(childName: string): Node;\n\n  /**\n   * Returns a child by path, or null if it doesn't exist.\n   * @param path - The path of the child to retrieve.\n   * @returns The retrieved child or an empty node.\n   */\n  getChild(path: Path): Node;\n\n  /**\n   * Returns the name of the child immediately prior to the specified childNode, or null.\n   * @param childName - The name of the child to find the predecessor of.\n   * @param childNode - The node to find the predecessor of.\n   * @param index - The index to use to determine the predecessor\n   * @returns The name of the predecessor child, or null if childNode is the first child.\n   */\n  getPredecessorChildName(\n    childName: string,\n    childNode: Node,\n    index: Index\n  ): string | null;\n\n  /**\n   * Returns a duplicate node, with the specified immediate child updated.\n   * Any value in the node will be removed.\n   * @param childName - The name of the child to update.\n   * @param newChildNode - The new child node\n   * @returns The updated node.\n   */\n  updateImmediateChild(childName: string, newChildNode: Node): Node;\n\n  /**\n   * Returns a duplicate node, with the specified child updated.  Any value will\n   * be removed.\n   * @param path - The path of the child to update.\n   * @param newChildNode - The new child node, which may be an empty node\n   * @returns The updated node.\n   */\n  updateChild(path: Path, newChildNode: Node): Node;\n\n  /**\n   * True if the immediate child specified exists\n   */\n  hasChild(childName: string): boolean;\n\n  /**\n   * @returns True if this node has no value or children.\n   */\n  isEmpty(): boolean;\n\n  /**\n   * @returns The number of children of this node.\n   */\n  numChildren(): number;\n\n  /**\n   * Calls action for each child.\n   * @param action - Action to be called for\n   * each child.  It's passed the child name and the child node.\n   * @returns The first truthy value return by action, or the last falsey one\n   */\n  forEachChild(index: Index, action: (a: string, b: Node) => void): unknown;\n\n  /**\n   * @param exportFormat - True for export format (also wire protocol format).\n   * @returns Value of this node as JSON.\n   */\n  val(exportFormat?: boolean): unknown;\n\n  /**\n   * @returns hash representing the node contents.\n   */\n  hash(): string;\n\n  /**\n   * @param other - Another node\n   * @returns -1 for less than, 0 for equal, 1 for greater than other\n   */\n  compareTo(other: Node): number;\n\n  /**\n   * @returns Whether or not this snapshot equals other\n   */\n  equals(other: Node): boolean;\n\n  /**\n   * @returns This node, with the specified index now available\n   */\n  withIndex(indexDefinition: Index): Node;\n\n  isIndexed(indexDefinition: Index): boolean;\n}\n\nexport class NamedNode {\n  constructor(public name: string, public node: Node) {}\n\n  static Wrap(name: string, node: Node) {\n    return new NamedNode(name, node);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { deepCopy, contains } from '@firebase/util';\n\n/**\n * Tracks a collection of stats.\n */\nexport class StatsCollection {\n  private counters_: { [k: string]: number } = {};\n\n  incrementCounter(name: string, amount: number = 1) {\n    if (!contains(this.counters_, name)) {\n      this.counters_[name] = 0;\n    }\n\n    this.counters_[name] += amount;\n  }\n\n  get() {\n    return deepCopy(this.counters_);\n  }\n}\n","import { initializeApp } from \"firebase/app\";\nimport { getDatabase } from \"firebase/database\";\nconst firebaseConfig = {\n  apiKey: \"ieYlf4z8g3ppt9bjbi5rFadrZL8VLwAJNzM8KvtD\",\n  databaseURL: \"https://apx-mod-6-67f2e-default-rtdb.firebaseio.com/\",\n  authDomain: \"apx-mod-6-67f2e.firebaseapp.com\",\n  // projectId: \"apx-mod-6-67f2e\",\n  // The value of `databaseURL` depends on the location of the database\n  // storageBucket: \"PROJECT_ID.appspot.com\",\n  // messagingSenderId: \"SENDER_ID\",\n  // appId: \"APP_ID\",\n  // For Firebase JavaScript SDK v7.20.0 and later, `measurementId` is an optional field\n  // measurementId: \"G-MEASUREMENT_ID\",\n};\nconst app = initializeApp(firebaseConfig);\nconst rtdb = getDatabase(app);\nexport { rtdb };\n","export function toArray(objectOrArray) {\n  objectOrArray = objectOrArray || [];\n  return Array.isArray(objectOrArray) ? objectOrArray : [objectOrArray];\n}\n\nexport function log(msg) {\n  return `[Vaadin.Router] ${msg}`;\n}\n\nexport function logValue(value) {\n  if (typeof value !== 'object') {\n    return String(value);\n  }\n\n  const stringType = Object.prototype.toString.call(value).match(/ (.*)\\]$/)[1];\n  if (stringType === 'Object' || stringType === 'Array') {\n    return `${stringType} ${JSON.stringify(value)}`;\n  } else {\n    return stringType;\n  }\n}\n\nconst MODULE = 'module';\nconst NOMODULE = 'nomodule';\nconst bundleKeys = [MODULE, NOMODULE];\n\nfunction ensureBundle(src) {\n  if (!src.match(/.+\\.[m]?js$/)) {\n    throw new Error(\n      log(`Unsupported type for bundle \"${src}\": .js or .mjs expected.`)\n    );\n  }\n}\n\nexport function ensureRoute(route) {\n  if (!route || !isString(route.path)) {\n    throw new Error(\n      log(`Expected route config to be an object with a \"path\" string property, or an array of such objects`)\n    );\n  }\n\n  const bundle = route.bundle;\n\n  const stringKeys = ['component', 'redirect', 'bundle'];\n  if (\n    !isFunction(route.action) &&\n    !Array.isArray(route.children) &&\n    !isFunction(route.children) &&\n    !isObject(bundle) &&\n    !stringKeys.some(key => isString(route[key]))\n  ) {\n    throw new Error(\n      log(\n        `Expected route config \"${route.path}\" to include either \"${stringKeys.join('\", \"')}\" ` +\n        `or \"action\" function but none found.`\n      )\n    );\n  }\n\n  if (bundle) {\n    if (isString(bundle)) {\n      ensureBundle(bundle);\n    } else if (!bundleKeys.some(key => key in bundle)) {\n      throw new Error(\n        log('Expected route bundle to include either \"' + NOMODULE + '\" or \"' + MODULE + '\" keys, or both')\n      );\n    } else {\n      bundleKeys.forEach(key => key in bundle && ensureBundle(bundle[key]));\n    }\n  }\n\n  if (route.redirect) {\n    ['bundle', 'component'].forEach(overriddenProp => {\n      if (overriddenProp in route) {\n        console.warn(\n          log(\n            `Route config \"${route.path}\" has both \"redirect\" and \"${overriddenProp}\" properties, ` +\n            `and \"redirect\" will always override the latter. Did you mean to only use \"${overriddenProp}\"?`\n          )\n        );\n      }\n    });\n  }\n}\n\nexport function ensureRoutes(routes) {\n  toArray(routes).forEach(route => ensureRoute(route));\n}\n\nfunction loadScript(src, key) {\n  let script = document.head.querySelector('script[src=\"' + src + '\"][async]');\n  if (!script) {\n    script = document.createElement('script');\n    script.setAttribute('src', src);\n    if (key === MODULE) {\n      script.setAttribute('type', MODULE);\n    } else if (key === NOMODULE) {\n      script.setAttribute(NOMODULE, '');\n    }\n    script.async = true;\n  }\n  return new Promise((resolve, reject) => {\n    script.onreadystatechange = script.onload = e => {\n      script.__dynamicImportLoaded = true;\n      resolve(e);\n    };\n    script.onerror = e => {\n      if (script.parentNode) {\n        script.parentNode.removeChild(script);\n      }\n      reject(e);\n    };\n    if (script.parentNode === null) {\n      document.head.appendChild(script);\n    } else if (script.__dynamicImportLoaded) {\n      resolve();\n    }\n  });\n}\n\nexport function loadBundle(bundle) {\n  if (isString(bundle)) {\n    return loadScript(bundle);\n  } else {\n    return Promise.race(\n      bundleKeys\n        .filter(key => key in bundle)\n        .map(key => loadScript(bundle[key], key))\n    );\n  }\n}\n\nexport function fireRouterEvent(type, detail) {\n  return !window.dispatchEvent(new CustomEvent(\n    `vaadin-router-${type}`,\n    {cancelable: type === 'go', detail}\n  ));\n}\n\nexport function isObject(o) {\n  // guard against null passing the typeof check\n  return typeof o === 'object' && !!o;\n}\n\nexport function isFunction(f) {\n  return typeof f === 'function';\n}\n\nexport function isString(s) {\n  return typeof s === 'string';\n}\n\nexport function getNotFoundError(context) {\n  const error = new Error(log(`Page not found (${context.pathname})`));\n  error.context = context;\n  error.code = 404;\n  return error;\n}\n\nexport const notFoundResult = new (class NotFoundResult {})();\n","import {fireRouterEvent} from '../utils.js';\n\n/* istanbul ignore next: coverage is calculated in Chrome, this code is for IE */\nfunction getAnchorOrigin(anchor) {\n  // IE11: on HTTP and HTTPS the default port is not included into\n  // window.location.origin, so won't include it here either.\n  const port = anchor.port;\n  const protocol = anchor.protocol;\n  const defaultHttp = protocol === 'http:' && port === '80';\n  const defaultHttps = protocol === 'https:' && port === '443';\n  const host = (defaultHttp || defaultHttps)\n    ? anchor.hostname // does not include the port number (e.g. www.example.org)\n    : anchor.host; // does include the port number (e.g. www.example.org:80)\n  return `${protocol}//${host}`;\n}\n\n// The list of checks is not complete:\n//  - SVG support is missing\n//  - the 'rel' attribute is not considered\nfunction vaadinRouterGlobalClickHandler(event) {\n  // ignore the click if the default action is prevented\n  if (event.defaultPrevented) {\n    return;\n  }\n\n  // ignore the click if not with the primary mouse button\n  if (event.button !== 0) {\n    return;\n  }\n\n  // ignore the click if a modifier key is pressed\n  if (event.shiftKey || event.ctrlKey || event.altKey || event.metaKey) {\n    return;\n  }\n\n  // find the <a> element that the click is at (or within)\n  let anchor = event.target;\n  const path = event.composedPath\n    ? event.composedPath()\n    : (event.path || []);\n\n  // FIXME(web-padawan): `Symbol.iterator` used by webcomponentsjs is broken for arrays\n  // example to check: `for...of` loop here throws the \"Not yet implemented\" error\n  for (let i = 0; i < path.length; i++) {\n    const target = path[i];\n    if (target.nodeName && target.nodeName.toLowerCase() === 'a') {\n      anchor = target;\n      break;\n    }\n  }\n\n  while (anchor && anchor.nodeName.toLowerCase() !== 'a') {\n    anchor = anchor.parentNode;\n  }\n\n  // ignore the click if not at an <a> element\n  if (!anchor || anchor.nodeName.toLowerCase() !== 'a') {\n    return;\n  }\n\n  // ignore the click if the <a> element has a non-default target\n  if (anchor.target && anchor.target.toLowerCase() !== '_self') {\n    return;\n  }\n\n  // ignore the click if the <a> element has the 'download' attribute\n  if (anchor.hasAttribute('download')) {\n    return;\n  }\n\n  // ignore the click if the <a> element has the 'router-ignore' attribute\n  if (anchor.hasAttribute('router-ignore')) {\n    return;\n  }\n\n  // ignore the click if the target URL is a fragment on the current page\n  if (anchor.pathname === window.location.pathname && anchor.hash !== '') {\n    return;\n  }\n\n  // ignore the click if the target is external to the app\n  // In IE11 HTMLAnchorElement does not have the `origin` property\n  const origin = anchor.origin || getAnchorOrigin(anchor);\n  if (origin !== window.location.origin) {\n    return;\n  }\n\n  // if none of the above, convert the click into a navigation event\n  const {pathname, search, hash} = anchor;\n  if (fireRouterEvent('go', {pathname, search, hash})) {\n    event.preventDefault();\n    // for a click event, the scroll is reset to the top position.\n    if (event && event.type === 'click') {\n      window.scrollTo(0, 0);\n    }\n  }\n}\n\n/**\n * A navigation trigger for Vaadin Router that translated clicks on `<a>` links\n * into Vaadin Router navigation events.\n *\n * Only regular clicks on in-app links are translated (primary mouse button, no\n * modifier keys, the target href is within the app's URL space).\n *\n * @memberOf Router.NavigationTrigger\n * @type {NavigationTrigger}\n */\nconst CLICK = {\n  activate() {\n    window.document.addEventListener('click', vaadinRouterGlobalClickHandler);\n  },\n\n  inactivate() {\n    window.document.removeEventListener('click', vaadinRouterGlobalClickHandler);\n  }\n};\n\nexport default CLICK;\n","import {fireRouterEvent, isFunction} from '../utils.js';\n\n// PopStateEvent constructor shim\nconst isIE = /Trident/.test(navigator.userAgent);\n\n/* istanbul ignore next: coverage is calculated in Chrome, this code is for IE */\nif (isIE && !isFunction(window.PopStateEvent)) {\n  window.PopStateEvent = function(inType, params) {\n    params = params || {};\n    var e = document.createEvent('Event');\n    e.initEvent(inType, Boolean(params.bubbles), Boolean(params.cancelable));\n    e.state = params.state || null;\n    return e;\n  };\n  window.PopStateEvent.prototype = window.Event.prototype;\n}\n\nfunction vaadinRouterGlobalPopstateHandler(event) {\n  if (event.state === 'vaadin-router-ignore') {\n    return;\n  }\n  const {pathname, search, hash} = window.location;\n  fireRouterEvent('go', {pathname, search, hash});\n}\n\n/**\n * A navigation trigger for Vaadin Router that translates popstate events into\n * Vaadin Router navigation events.\n *\n * @memberOf Router.NavigationTrigger\n * @type {NavigationTrigger}\n */\nconst POPSTATE = {\n  activate() {\n    window.addEventListener('popstate', vaadinRouterGlobalPopstateHandler);\n  },\n\n  inactivate() {\n    window.removeEventListener('popstate', vaadinRouterGlobalPopstateHandler);\n  }\n};\n\nexport default POPSTATE;\n","/**\n * Expose `pathToRegexp`.\n */\nmodule.exports = pathToRegexp\nmodule.exports.parse = parse\nmodule.exports.compile = compile\nmodule.exports.tokensToFunction = tokensToFunction\nmodule.exports.tokensToRegExp = tokensToRegExp\n\n/**\n * Default configs.\n */\nvar DEFAULT_DELIMITER = '/'\nvar DEFAULT_DELIMITERS = './'\n\n/**\n * The main path matching regexp utility.\n *\n * @type {RegExp}\n */\nvar PATH_REGEXP = new RegExp([\n  // Match escaped characters that would otherwise appear in future matches.\n  // This allows the user to escape special characters that won't transform.\n  '(\\\\\\\\.)',\n  // Match Express-style parameters and un-named parameters with a prefix\n  // and optional suffixes. Matches appear as:\n  //\n  // \":test(\\\\d+)?\" => [\"test\", \"\\d+\", undefined, \"?\"]\n  // \"(\\\\d+)\"  => [undefined, undefined, \"\\d+\", undefined]\n  '(?:\\\\:(\\\\w+)(?:\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))?|\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))([+*?])?'\n].join('|'), 'g')\n\n/**\n * Parse a string for the raw tokens.\n *\n * @param  {string}  str\n * @param  {Object=} options\n * @return {!Array}\n */\nfunction parse (str, options) {\n  var tokens = []\n  var key = 0\n  var index = 0\n  var path = ''\n  var defaultDelimiter = (options && options.delimiter) || DEFAULT_DELIMITER\n  var delimiters = (options && options.delimiters) || DEFAULT_DELIMITERS\n  var pathEscaped = false\n  var res\n\n  while ((res = PATH_REGEXP.exec(str)) !== null) {\n    var m = res[0]\n    var escaped = res[1]\n    var offset = res.index\n    path += str.slice(index, offset)\n    index = offset + m.length\n\n    // Ignore already escaped sequences.\n    if (escaped) {\n      path += escaped[1]\n      pathEscaped = true\n      continue\n    }\n\n    var prev = ''\n    var next = str[index]\n    var name = res[2]\n    var capture = res[3]\n    var group = res[4]\n    var modifier = res[5]\n\n    if (!pathEscaped && path.length) {\n      var k = path.length - 1\n\n      if (delimiters.indexOf(path[k]) > -1) {\n        prev = path[k]\n        path = path.slice(0, k)\n      }\n    }\n\n    // Push the current path onto the tokens.\n    if (path) {\n      tokens.push(path)\n      path = ''\n      pathEscaped = false\n    }\n\n    var partial = prev !== '' && next !== undefined && next !== prev\n    var repeat = modifier === '+' || modifier === '*'\n    var optional = modifier === '?' || modifier === '*'\n    var delimiter = prev || defaultDelimiter\n    var pattern = capture || group\n\n    tokens.push({\n      name: name || key++,\n      prefix: prev,\n      delimiter: delimiter,\n      optional: optional,\n      repeat: repeat,\n      partial: partial,\n      pattern: pattern ? escapeGroup(pattern) : '[^' + escapeString(delimiter) + ']+?'\n    })\n  }\n\n  // Push any remaining characters.\n  if (path || index < str.length) {\n    tokens.push(path + str.substr(index))\n  }\n\n  return tokens\n}\n\n/**\n * Compile a string to a template function for the path.\n *\n * @param  {string}             str\n * @param  {Object=}            options\n * @return {!function(Object=, Object=)}\n */\nfunction compile (str, options) {\n  return tokensToFunction(parse(str, options))\n}\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nfunction tokensToFunction (tokens) {\n  // Compile all the tokens into regexps.\n  var matches = new Array(tokens.length)\n\n  // Compile all the patterns before compilation.\n  for (var i = 0; i < tokens.length; i++) {\n    if (typeof tokens[i] === 'object') {\n      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$')\n    }\n  }\n\n  return function (data, options) {\n    var path = ''\n    var encode = (options && options.encode) || encodeURIComponent\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i]\n\n      if (typeof token === 'string') {\n        path += token\n        continue\n      }\n\n      var value = data ? data[token.name] : undefined\n      var segment\n\n      if (Array.isArray(value)) {\n        if (!token.repeat) {\n          throw new TypeError('Expected \"' + token.name + '\" to not repeat, but got array')\n        }\n\n        if (value.length === 0) {\n          if (token.optional) continue\n\n          throw new TypeError('Expected \"' + token.name + '\" to not be empty')\n        }\n\n        for (var j = 0; j < value.length; j++) {\n          segment = encode(value[j], token)\n\n          if (!matches[i].test(segment)) {\n            throw new TypeError('Expected all \"' + token.name + '\" to match \"' + token.pattern + '\"')\n          }\n\n          path += (j === 0 ? token.prefix : token.delimiter) + segment\n        }\n\n        continue\n      }\n\n      if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {\n        segment = encode(String(value), token)\n\n        if (!matches[i].test(segment)) {\n          throw new TypeError('Expected \"' + token.name + '\" to match \"' + token.pattern + '\", but got \"' + segment + '\"')\n        }\n\n        path += token.prefix + segment\n        continue\n      }\n\n      if (token.optional) {\n        // Prepend partial segment prefixes.\n        if (token.partial) path += token.prefix\n\n        continue\n      }\n\n      throw new TypeError('Expected \"' + token.name + '\" to be ' + (token.repeat ? 'an array' : 'a string'))\n    }\n\n    return path\n  }\n}\n\n/**\n * Escape a regular expression string.\n *\n * @param  {string} str\n * @return {string}\n */\nfunction escapeString (str) {\n  return str.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, '\\\\$1')\n}\n\n/**\n * Escape the capturing group by escaping special characters and meaning.\n *\n * @param  {string} group\n * @return {string}\n */\nfunction escapeGroup (group) {\n  return group.replace(/([=!:$/()])/g, '\\\\$1')\n}\n\n/**\n * Get the flags for a regexp from the options.\n *\n * @param  {Object} options\n * @return {string}\n */\nfunction flags (options) {\n  return options && options.sensitive ? '' : 'i'\n}\n\n/**\n * Pull out keys from a regexp.\n *\n * @param  {!RegExp} path\n * @param  {Array=}  keys\n * @return {!RegExp}\n */\nfunction regexpToRegexp (path, keys) {\n  if (!keys) return path\n\n  // Use a negative lookahead to match only capturing groups.\n  var groups = path.source.match(/\\((?!\\?)/g)\n\n  if (groups) {\n    for (var i = 0; i < groups.length; i++) {\n      keys.push({\n        name: i,\n        prefix: null,\n        delimiter: null,\n        optional: false,\n        repeat: false,\n        partial: false,\n        pattern: null\n      })\n    }\n  }\n\n  return path\n}\n\n/**\n * Transform an array into a regexp.\n *\n * @param  {!Array}  path\n * @param  {Array=}  keys\n * @param  {Object=} options\n * @return {!RegExp}\n */\nfunction arrayToRegexp (path, keys, options) {\n  var parts = []\n\n  for (var i = 0; i < path.length; i++) {\n    parts.push(pathToRegexp(path[i], keys, options).source)\n  }\n\n  return new RegExp('(?:' + parts.join('|') + ')', flags(options))\n}\n\n/**\n * Create a path regexp from string input.\n *\n * @param  {string}  path\n * @param  {Array=}  keys\n * @param  {Object=} options\n * @return {!RegExp}\n */\nfunction stringToRegexp (path, keys, options) {\n  return tokensToRegExp(parse(path, options), keys, options)\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n *\n * @param  {!Array}  tokens\n * @param  {Array=}  keys\n * @param  {Object=} options\n * @return {!RegExp}\n */\nfunction tokensToRegExp (tokens, keys, options) {\n  options = options || {}\n\n  var strict = options.strict\n  var start = options.start !== false\n  var end = options.end !== false\n  var delimiter = escapeString(options.delimiter || DEFAULT_DELIMITER)\n  var delimiters = options.delimiters || DEFAULT_DELIMITERS\n  var endsWith = [].concat(options.endsWith || []).map(escapeString).concat('$').join('|')\n  var route = start ? '^' : ''\n  var isEndDelimited = tokens.length === 0\n\n  // Iterate over the tokens and create our regexp string.\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i]\n\n    if (typeof token === 'string') {\n      route += escapeString(token)\n      isEndDelimited = i === tokens.length - 1 && delimiters.indexOf(token[token.length - 1]) > -1\n    } else {\n      var capture = token.repeat\n        ? '(?:' + token.pattern + ')(?:' + escapeString(token.delimiter) + '(?:' + token.pattern + '))*'\n        : token.pattern\n\n      if (keys) keys.push(token)\n\n      if (token.optional) {\n        if (token.partial) {\n          route += escapeString(token.prefix) + '(' + capture + ')?'\n        } else {\n          route += '(?:' + escapeString(token.prefix) + '(' + capture + '))?'\n        }\n      } else {\n        route += escapeString(token.prefix) + '(' + capture + ')'\n      }\n    }\n  }\n\n  if (end) {\n    if (!strict) route += '(?:' + delimiter + ')?'\n\n    route += endsWith === '$' ? '$' : '(?=' + endsWith + ')'\n  } else {\n    if (!strict) route += '(?:' + delimiter + '(?=' + endsWith + '))?'\n    if (!isEndDelimited) route += '(?=' + delimiter + '|' + endsWith + ')'\n  }\n\n  return new RegExp(route, flags(options))\n}\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n *\n * @param  {(string|RegExp|Array)} path\n * @param  {Array=}                keys\n * @param  {Object=}               options\n * @return {!RegExp}\n */\nfunction pathToRegexp (path, keys, options) {\n  if (path instanceof RegExp) {\n    return regexpToRegexp(path, keys)\n  }\n\n  if (Array.isArray(path)) {\n    return arrayToRegexp(/** @type {!Array} */ (path), keys, options)\n  }\n\n  return stringToRegexp(/** @type {string} */ (path), keys, options)\n}\n","/**\n * Universal Router (https://www.kriasoft.com/universal-router/)\n *\n * Copyright (c) 2015-present Kriasoft.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nimport pathToRegexp from './path-to-regexp.js';\n\nconst {hasOwnProperty} = Object.prototype;\nconst cache = new Map();\n// see https://github.com/pillarjs/path-to-regexp/issues/148\ncache.set('|false', {\n  keys: [],\n  pattern: /(?:)/\n});\n\nfunction decodeParam(val) {\n  try {\n    return decodeURIComponent(val);\n  } catch (err) {\n    return val;\n  }\n}\n\nfunction matchPath(routepath, path, exact, parentKeys, parentParams) {\n  exact = !!exact;\n  const cacheKey = `${routepath}|${exact}`;\n  let regexp = cache.get(cacheKey);\n\n  if (!regexp) {\n    const keys = [];\n    regexp = {\n      keys,\n      pattern: pathToRegexp(routepath, keys, {\n        end: exact,\n        strict: routepath === ''\n      }),\n    };\n    cache.set(cacheKey, regexp);\n  }\n\n  const m = regexp.pattern.exec(path);\n  if (!m) {\n    return null;\n  }\n\n  const params = Object.assign({}, parentParams);\n\n  for (let i = 1; i < m.length; i++) {\n    const key = regexp.keys[i - 1];\n    const prop = key.name;\n    const value = m[i];\n    if (value !== undefined || !hasOwnProperty.call(params, prop)) {\n      if (key.repeat) {\n        params[prop] = value ? value.split(key.delimiter).map(decodeParam) : [];\n      } else {\n        params[prop] = value ? decodeParam(value) : value;\n      }\n    }\n  }\n\n  return {\n    path: m[0],\n    keys: (parentKeys || []).concat(regexp.keys),\n    params,\n  };\n}\n\nexport default matchPath;\n","/**\n * Universal Router (https://www.kriasoft.com/universal-router/)\n *\n * Copyright (c) 2015-present Kriasoft.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nimport matchPath from './matchPath.js';\n\n/**\n * Traverses the routes tree and matches its nodes to the given pathname from\n * the root down to the leaves. Each match consumes a part of the pathname and\n * the matching process continues for as long as there is a matching child\n * route for the remaining part of the pathname.\n *\n * The returned value is a lazily evaluated iterator.\n *\n * The leading \"/\" in a route path matters only for the root of the routes\n * tree (or if all parent routes are \"\"). In all other cases a leading \"/\" in\n * a child route path has no significance.\n *\n * The trailing \"/\" in a _route path_ matters only for the leaves of the\n * routes tree. A leaf route with a trailing \"/\" matches only a pathname that\n * also has a trailing \"/\".\n *\n * The trailing \"/\" in a route path does not affect matching of child routes\n * in any way.\n *\n * The trailing \"/\" in a _pathname_ generally does not matter (except for\n * the case of leaf nodes described above).\n *\n * The \"\" and \"/\" routes have special treatment:\n *  1. as a single route\n *     the \"\" and \"/\" routes match only the \"\" and \"/\" pathnames respectively\n *  2. as a parent in the routes tree\n *     the \"\" route matches any pathname without consuming any part of it\n *     the \"/\" route matches any absolute pathname consuming its leading \"/\"\n *  3. as a leaf in the routes tree\n *     the \"\" and \"/\" routes match only if the entire pathname is consumed by\n *         the parent routes chain. In this case \"\" and \"/\" are equivalent.\n *  4. several directly nested \"\" or \"/\" routes\n *     - directly nested \"\" or \"/\" routes are 'squashed' (i.e. nesting two\n *       \"/\" routes does not require a double \"/\" in the pathname to match)\n *     - if there are only \"\" in the parent routes chain, no part of the\n *       pathname is consumed, and the leading \"/\" in the child routes' paths\n *       remains significant\n *\n * Side effect:\n *   - the routes tree { path: '' } matches only the '' pathname\n *   - the routes tree { path: '', children: [ { path: '' } ] } matches any\n *     pathname (for the tree root)\n *\n * Prefix matching can be enabled also by `children: true`.\n */\nfunction matchRoute(route, pathname, ignoreLeadingSlash, parentKeys, parentParams) {\n  let match;\n  let childMatches;\n  let childIndex = 0;\n  let routepath = route.path || '';\n  if (routepath.charAt(0) === '/') {\n    if (ignoreLeadingSlash) {\n      routepath = routepath.substr(1);\n    }\n    ignoreLeadingSlash = true;\n  }\n\n  return {\n    next(routeToSkip) {\n      if (route === routeToSkip) {\n        return {done: true};\n      }\n\n      const children = route.__children = route.__children || route.children;\n\n      if (!match) {\n        match = matchPath(routepath, pathname, !children, parentKeys, parentParams);\n\n        if (match) {\n          return {\n            done: false,\n            value: {\n              route,\n              keys: match.keys,\n              params: match.params,\n              path: match.path\n            },\n          };\n        }\n      }\n\n      if (match && children) {\n        while (childIndex < children.length) {\n          if (!childMatches) {\n            const childRoute = children[childIndex];\n            childRoute.parent = route;\n\n            let matchedLength = match.path.length;\n            if (matchedLength > 0 && pathname.charAt(matchedLength) === '/') {\n              matchedLength += 1;\n            }\n\n            childMatches = matchRoute(\n              childRoute,\n              pathname.substr(matchedLength),\n              ignoreLeadingSlash,\n              match.keys,\n              match.params\n            );\n          }\n\n          const childMatch = childMatches.next(routeToSkip);\n          if (!childMatch.done) {\n            return {\n              done: false,\n              value: childMatch.value,\n            };\n          }\n\n          childMatches = null;\n          childIndex++;\n        }\n      }\n\n      return {done: true};\n    },\n  };\n}\n\nexport default matchRoute;\n","/**\n * Universal Router (https://www.kriasoft.com/universal-router/)\n *\n * Copyright (c) 2015-present Kriasoft.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nimport {isFunction} from '../utils.js';\n\nfunction resolveRoute(context) {\n  if (isFunction(context.route.action)) {\n    return context.route.action(context);\n  }\n  return undefined;\n}\n\nexport default resolveRoute;\n","/**\n * Universal Router (https://www.kriasoft.com/universal-router/)\n *\n * Copyright (c) 2015-present Kriasoft.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nimport pathToRegexp from './path-to-regexp.js';\nimport matchRoute from './matchRoute.js';\nimport resolveRoute from './resolveRoute.js';\nimport {toArray, ensureRoutes, isString, getNotFoundError, notFoundResult} from '../utils.js';\n\nfunction isChildRoute(parentRoute, childRoute) {\n  let route = childRoute;\n  while (route) {\n    route = route.parent;\n    if (route === parentRoute) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction generateErrorMessage(currentContext) {\n  let errorMessage = `Path '${currentContext.pathname}' is not properly resolved due to an error.`;\n  const routePath = (currentContext.route || {}).path;\n  if (routePath) {\n    errorMessage += ` Resolution had failed on route: '${routePath}'`;\n  }\n  return errorMessage;\n}\n\nfunction updateChainForRoute(context, match) {\n  const {route, path} = match;\n\n  if (route && !route.__synthetic) {\n    const item = {path, route};\n    if (!context.chain) {\n      context.chain = [];\n    } else {\n      // Discard old items\n      if (route.parent) {\n        let i = context.chain.length;\n        while (i-- && context.chain[i].route && context.chain[i].route !== route.parent) {\n          context.chain.pop();\n        }\n      }\n    }\n    context.chain.push(item);\n  }\n}\n\n/**\n */\nclass Resolver {\n  constructor(routes, options = {}) {\n    if (Object(routes) !== routes) {\n      throw new TypeError('Invalid routes');\n    }\n\n    this.baseUrl = options.baseUrl || '';\n    this.errorHandler = options.errorHandler;\n    this.resolveRoute = options.resolveRoute || resolveRoute;\n    this.context = Object.assign({resolver: this}, options.context);\n    this.root = Array.isArray(routes) ? {path: '', __children: routes, parent: null, __synthetic: true} : routes;\n    this.root.parent = null;\n  }\n\n  /**\n   * Returns the current list of routes (as a shallow copy). Adding / removing\n   * routes to / from the returned array does not affect the routing config,\n   * but modifying the route objects does.\n   *\n   * @return {!Array<!Router.Route>}\n   */\n  getRoutes() {\n    return [...this.root.__children];\n  }\n\n  /**\n   * Sets the routing config (replacing the existing one).\n   *\n   * @param {!Array<!Router.Route>|!Router.Route} routes a single route or an array of those\n   *    (the array is shallow copied)\n   */\n  setRoutes(routes) {\n    ensureRoutes(routes);\n    const newRoutes = [...toArray(routes)];\n    this.root.__children = newRoutes;\n  }\n\n  /**\n   * Appends one or several routes to the routing config and returns the\n   * effective routing config after the operation.\n   *\n   * @param {!Array<!Router.Route>|!Router.Route} routes a single route or an array of those\n   *    (the array is shallow copied)\n   * @return {!Array<!Router.Route>}\n   * @protected\n   */\n  addRoutes(routes) {\n    ensureRoutes(routes);\n    this.root.__children.push(...toArray(routes));\n    return this.getRoutes();\n  }\n\n  /**\n   * Removes all existing routes from the routing config.\n   */\n  removeRoutes() {\n    this.setRoutes([]);\n  }\n\n  /**\n   * Asynchronously resolves the given pathname, i.e. finds all routes matching\n   * the pathname and tries resolving them one after another in the order they\n   * are listed in the routes config until the first non-null result.\n   *\n   * Returns a promise that is fulfilled with the return value of an object that consists of the first\n   * route handler result that returns something other than `null` or `undefined` and context used to get this result.\n   *\n   * If no route handlers return a non-null result, or if no route matches the\n   * given pathname the returned promise is rejected with a 'page not found'\n   * `Error`.\n   *\n   * @param {!string|!{pathname: !string}} pathnameOrContext the pathname to\n   *    resolve or a context object with a `pathname` property and other\n   *    properties to pass to the route resolver functions.\n   * @return {!Promise<any>}\n   */\n  resolve(pathnameOrContext) {\n    const context = Object.assign(\n      {},\n      this.context,\n      isString(pathnameOrContext) ? {pathname: pathnameOrContext} : pathnameOrContext\n    );\n    const match = matchRoute(\n      this.root,\n      this.__normalizePathname(context.pathname),\n      this.baseUrl\n    );\n    const resolve = this.resolveRoute;\n    let matches = null;\n    let nextMatches = null;\n    let currentContext = context;\n\n    function next(resume, parent = matches.value.route, prevResult) {\n      const routeToSkip = prevResult === null && matches.value.route;\n      matches = nextMatches || match.next(routeToSkip);\n      nextMatches = null;\n\n      if (!resume) {\n        if (matches.done || !isChildRoute(parent, matches.value.route)) {\n          nextMatches = matches;\n          return Promise.resolve(notFoundResult);\n        }\n      }\n\n      if (matches.done) {\n        return Promise.reject(getNotFoundError(context));\n      }\n\n      currentContext = Object.assign(\n        currentContext\n          ? {chain: (currentContext.chain ? currentContext.chain.slice(0) : [])}\n          : {},\n        context,\n        matches.value\n      );\n      updateChainForRoute(currentContext, matches.value);\n\n      return Promise.resolve(resolve(currentContext)).then(resolution => {\n        if (resolution !== null && resolution !== undefined && resolution !== notFoundResult) {\n          currentContext.result = resolution.result || resolution;\n          return currentContext;\n        }\n        return next(resume, parent, resolution);\n      });\n    }\n\n    context.next = next;\n\n    return Promise.resolve()\n      .then(() => next(true, this.root))\n      .catch((error) => {\n        const errorMessage = generateErrorMessage(currentContext);\n        if (!error) {\n          error = new Error(errorMessage);\n        } else {\n          console.warn(errorMessage);\n        }\n        error.context = error.context || currentContext;\n        // DOMException has its own code which is read-only\n        if (!(error instanceof DOMException)) {\n          error.code = error.code || 500;\n        }\n        if (this.errorHandler) {\n          currentContext.result = this.errorHandler(error);\n          return currentContext;\n        }\n        throw error;\n      });\n  }\n\n  /**\n   * URL constructor polyfill hook. Creates and returns an URL instance.\n   */\n  static __createUrl(url, base) {\n    return new URL(url, base);\n  }\n\n  /**\n   * If the baseUrl property is set, transforms the baseUrl and returns the full\n   * actual `base` string for using in the `new URL(path, base);` and for\n   * prepernding the paths with. The returned base ends with a trailing slash.\n   *\n   * Otherwise, returns empty string.\n   */\n  get __effectiveBaseUrl() {\n    return this.baseUrl\n      ? this.constructor.__createUrl(\n        this.baseUrl,\n        document.baseURI || document.URL\n      ).href.replace(/[^\\/]*$/, '')\n      : '';\n  }\n\n  /**\n   * If the baseUrl is set, matches the pathname with the router’s baseUrl,\n   * and returns the local pathname with the baseUrl stripped out.\n   *\n   * If the pathname does not match the baseUrl, returns undefined.\n   *\n   * If the `baseUrl` is not set, returns the unmodified pathname argument.\n   */\n  __normalizePathname(pathname) {\n    if (!this.baseUrl) {\n      // No base URL, no need to transform the pathname.\n      return pathname;\n    }\n\n    const base = this.__effectiveBaseUrl;\n    const normalizedUrl = this.constructor.__createUrl(pathname, base).href;\n    if (normalizedUrl.slice(0, base.length) === base) {\n      return normalizedUrl.slice(base.length);\n    }\n  }\n}\n\nResolver.pathToRegexp = pathToRegexp;\n\nexport default Resolver;\n","/**\n * Universal Router (https://www.kriasoft.com/universal-router/)\n *\n * Copyright (c) 2015-present Kriasoft.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nimport Resolver from './resolver.js';\nimport {isString} from '../utils.js';\n\nconst {pathToRegexp} = Resolver;\nconst cache = new Map();\n\nfunction cacheRoutes(routesByName, route, routes) {\n  const name = route.name || route.component;\n  if (name) {\n    if (routesByName.has(name)) {\n      routesByName.get(name).push(route);\n    } else {\n      routesByName.set(name, [route]);\n    }\n  }\n\n  if (Array.isArray(routes)) {\n    for (let i = 0; i < routes.length; i++) {\n      const childRoute = routes[i];\n      childRoute.parent = route;\n      cacheRoutes(routesByName, childRoute, childRoute.__children || childRoute.children);\n    }\n  }\n}\n\nfunction getRouteByName(routesByName, routeName) {\n  const routes = routesByName.get(routeName);\n  if (routes && routes.length > 1) {\n    throw new Error(\n      `Duplicate route with name \"${routeName}\".`\n      + ` Try seting unique 'name' route properties.`\n    );\n  }\n  return routes && routes[0];\n}\n\nfunction getRoutePath(route) {\n  let path = route.path;\n  path = Array.isArray(path) ? path[0] : path;\n  return path !== undefined ? path : '';\n}\n\nfunction generateUrls(router, options = {}) {\n  if (!(router instanceof Resolver)) {\n    throw new TypeError('An instance of Resolver is expected');\n  }\n\n  const routesByName = new Map();\n\n  return (routeName, params) => {\n    let route = getRouteByName(routesByName, routeName);\n    if (!route) {\n      routesByName.clear(); // clear cache\n      cacheRoutes(routesByName, router.root, router.root.__children);\n\n      route = getRouteByName(routesByName, routeName);\n      if (!route) {\n        throw new Error(`Route \"${routeName}\" not found`);\n      }\n    }\n\n    let regexp = cache.get(route.fullPath);\n    if (!regexp) {\n      let fullPath = getRoutePath(route);\n      let rt = route.parent;\n      while (rt) {\n        const path = getRoutePath(rt);\n        if (path) {\n          fullPath = path.replace(/\\/$/, '') + '/' + fullPath.replace(/^\\//, '');\n        }\n        rt = rt.parent;\n      }\n      const tokens = pathToRegexp.parse(fullPath);\n      const toPath = pathToRegexp.tokensToFunction(tokens);\n      const keys = Object.create(null);\n      for (let i = 0; i < tokens.length; i++) {\n        if (!isString(tokens[i])) {\n          keys[tokens[i].name] = true;\n        }\n      }\n      regexp = {toPath, keys};\n      cache.set(fullPath, regexp);\n      route.fullPath = fullPath;\n    }\n\n    let url = regexp.toPath(params, options) || '/';\n\n    if (options.stringifyQueryParams && params) {\n      const queryParams = {};\n      const keys = Object.keys(params);\n      for (let i = 0; i < keys.length; i++) {\n        const key = keys[i];\n        if (!regexp.keys[key]) {\n          queryParams[key] = params[key];\n        }\n      }\n      const query = options.stringifyQueryParams(queryParams);\n      if (query) {\n        url += query.charAt(0) === '?' ? query : `?${query}`;\n      }\n    }\n\n    return url;\n  };\n}\n\nexport default generateUrls;\n","/**\n * @typedef NavigationTrigger\n * @type {object}\n * @property {function()} activate\n * @property {function()} inactivate\n */\n\n/** @type {Array<NavigationTrigger>} */\nlet triggers = [];\n\nexport default function setNavigationTriggers(newTriggers) {\n  triggers.forEach(trigger => trigger.inactivate());\n\n  newTriggers.forEach(trigger => trigger.activate());\n\n  triggers = newTriggers;\n}\n","const willAnimate = elem => {\n  const name = getComputedStyle(elem).getPropertyValue('animation-name');\n  return name && name !== 'none';\n};\n\nconst waitForAnimation = (elem, cb) => {\n  const listener = () => {\n    elem.removeEventListener('animationend', listener);\n    cb();\n  };\n  elem.addEventListener('animationend', listener);\n};\n\nfunction animate(elem, className) {\n  elem.classList.add(className);\n\n  return new Promise(resolve => {\n    if (willAnimate(elem)) {\n      const rect = elem.getBoundingClientRect();\n      const size = `height: ${rect.bottom - rect.top}px; width: ${rect.right - rect.left}px`;\n      elem.setAttribute('style', `position: absolute; ${size}`);\n      waitForAnimation(elem, () => {\n        elem.classList.remove(className);\n        elem.removeAttribute('style');\n        resolve();\n      });\n    } else {\n      elem.classList.remove(className);\n      resolve();\n    }\n  });\n}\n\nexport default animate;\n","import Resolver from './resolver/resolver.js';\nimport generateUrls from './resolver/generateUrls.js';\nimport setNavigationTriggers from './triggers/setNavigationTriggers.js';\nimport animate from './transitions/animate.js';\nimport {\n  ensureRoute,\n  fireRouterEvent,\n  loadBundle,\n  log,\n  logValue,\n  toArray,\n  isFunction,\n  isString,\n  isObject,\n  getNotFoundError,\n  notFoundResult\n} from './utils.js';\n\nconst MAX_REDIRECT_COUNT = 256;\n\nfunction isResultNotEmpty(result) {\n  return result !== null && result !== undefined;\n}\n\nfunction copyContextWithoutNext(context) {\n  const copy = Object.assign({}, context);\n  delete copy.next;\n  return copy;\n}\n\nfunction createLocation({pathname = '', search = '', hash = '', chain = [], params = {}, redirectFrom, resolver}, route) {\n  const routes = chain.map(item => item.route);\n  return {\n    baseUrl: resolver && resolver.baseUrl || '',\n    pathname,\n    search,\n    hash,\n    routes,\n    route: route || routes.length && routes[routes.length - 1] || null,\n    params,\n    redirectFrom,\n    getUrl: (userParams = {}) => getPathnameForRouter(\n      Router.pathToRegexp.compile(\n        getMatchedPath(routes)\n      )(Object.assign({}, params, userParams)),\n      resolver\n    )\n  };\n}\n\nfunction createRedirect(context, pathname) {\n  const params = Object.assign({}, context.params);\n  return {\n    redirect: {\n      pathname,\n      from: context.pathname,\n      params\n    }\n  };\n}\n\nfunction renderElement(context, element) {\n  element.location = createLocation(context);\n  const index = context.chain.map(item => item.route).indexOf(context.route);\n  context.chain[index].element = element;\n  return element;\n}\n\nfunction runCallbackIfPossible(callback, args, thisArg) {\n  if (isFunction(callback)) {\n    return callback.apply(thisArg, args);\n  }\n}\n\nfunction amend(amendmentFunction, args, element) {\n  return amendmentResult => {\n    if (amendmentResult && (amendmentResult.cancel || amendmentResult.redirect)) {\n      return amendmentResult;\n    }\n\n    if (element) {\n      return runCallbackIfPossible(element[amendmentFunction], args, element);\n    }\n  };\n}\n\nfunction processNewChildren(newChildren, route) {\n  if (!Array.isArray(newChildren) && !isObject(newChildren)) {\n    throw new Error(\n      log(\n        `Incorrect \"children\" value for the route ${route.path}: expected array or object, but got ${newChildren}`\n      )\n    );\n  }\n\n  route.__children = [];\n  const childRoutes = toArray(newChildren);\n  for (let i = 0; i < childRoutes.length; i++) {\n    ensureRoute(childRoutes[i]);\n    route.__children.push(childRoutes[i]);\n  }\n}\n\nfunction removeDomNodes(nodes) {\n  if (nodes && nodes.length) {\n    const parent = nodes[0].parentNode;\n    for (let i = 0; i < nodes.length; i++) {\n      parent.removeChild(nodes[i]);\n    }\n  }\n}\n\nfunction getPathnameForRouter(pathname, router) {\n  const base = router.__effectiveBaseUrl;\n  return base\n    ? router.constructor.__createUrl(pathname.replace(/^\\//, ''), base).pathname\n    : pathname;\n}\n\nfunction getMatchedPath(chain) {\n  return chain.map(item => item.path).reduce((a, b) => {\n    if (b.length) {\n      return a.replace(/\\/$/, '') + '/' + b.replace(/^\\//, '');\n    }\n    return a;\n  }, '');\n}\n\n/**\n * A simple client-side router for single-page applications. It uses\n * express-style middleware and has a first-class support for Web Components and\n * lazy-loading. Works great in Polymer and non-Polymer apps.\n *\n * Use `new Router(outlet, options)` to create a new Router instance.\n *\n * * The `outlet` parameter is a reference to the DOM node to render\n *   the content into.\n *\n * * The `options` parameter is an optional object with options. The following\n *   keys are supported:\n *   * `baseUrl` — the initial value for [\n *     the `baseUrl` property\n *   ](#/classes/Router#property-baseUrl)\n *\n * The Router instance is automatically subscribed to navigation events\n * on `window`.\n *\n * See [Live Examples](#/classes/Router/demos/demo/index.html) for the detailed usage demo and code snippets.\n *\n * See also detailed API docs for the following methods, for the advanced usage:\n *\n * * [setOutlet](#/classes/Router#method-setOutlet) – should be used to configure the outlet.\n * * [setTriggers](#/classes/Router#method-setTriggers) – should be used to configure the navigation events.\n * * [setRoutes](#/classes/Router#method-setRoutes) – should be used to configure the routes.\n *\n * Only `setRoutes` has to be called manually, others are automatically invoked when creating a new instance.\n *\n * @extends Resolver\n * @demo demo/index.html\n * @summary JavaScript class that renders different DOM content depending on\n *    a given path. It can re-render when triggered or automatically on\n *    'popstate' and / or 'click' events.\n */\nexport class Router extends Resolver {\n\n  /**\n   * Creates a new Router instance with a given outlet, and\n   * automatically subscribes it to navigation events on the `window`.\n   * Using a constructor argument or a setter for outlet is equivalent:\n   *\n   * ```\n   * const router = new Router();\n   * router.setOutlet(outlet);\n   * ```\n   * @param {?Node=} outlet\n   * @param {?RouterOptions=} options\n   */\n  constructor(outlet, options) {\n    const baseElement = document.head.querySelector('base');\n    const baseHref = baseElement && baseElement.getAttribute('href');\n    super([], Object.assign({\n      // Default options\n      baseUrl: baseHref && Resolver.__createUrl(baseHref, document.URL).pathname.replace(/[^\\/]*$/, '')\n    }, options));\n\n    this.resolveRoute = context => this.__resolveRoute(context);\n\n    const triggers = Router.NavigationTrigger;\n    Router.setTriggers.apply(Router, Object.keys(triggers).map(key => triggers[key]));\n\n    /**\n     * The base URL for all routes in the router instance. By default,\n     * if the base element exists in the `<head>`, vaadin-router\n     * takes the `<base href>` attribute value, resolves against current `document.URL`\n     * and gets the `pathname` from the result.\n     *\n     * @public\n     * @type {string}\n     */\n    this.baseUrl;\n\n    /**\n     * A promise that is settled after the current render cycle completes. If\n     * there is no render cycle in progress the promise is immediately settled\n     * with the last render cycle result.\n     *\n     * @public\n     * @type {!Promise<!RouterLocation>}\n     */\n    this.ready;\n    this.ready = Promise.resolve(outlet);\n\n    /**\n     * Contains read-only information about the current router location:\n     * pathname, active routes, parameters. See the\n     * [Location type declaration](#/classes/RouterLocation)\n     * for more details.\n     *\n     * @public\n     * @type {!RouterLocation}\n     */\n    this.location;\n    this.location = createLocation({resolver: this});\n\n    this.__lastStartedRenderId = 0;\n    this.__navigationEventHandler = this.__onNavigationEvent.bind(this);\n    this.setOutlet(outlet);\n    this.subscribe();\n    // Using WeakMap instead of WeakSet because WeakSet is not supported by IE11\n    this.__createdByRouter = new WeakMap();\n    this.__addedByRouter = new WeakMap();\n  }\n\n  __resolveRoute(context) {\n    const route = context.route;\n\n    let callbacks = Promise.resolve();\n\n    if (isFunction(route.children)) {\n      callbacks = callbacks\n        .then(() => route.children(copyContextWithoutNext(context)))\n        .then(children => {\n          // The route.children() callback might have re-written the\n          // route.children property instead of returning a value\n          if (!isResultNotEmpty(children) && !isFunction(route.children)) {\n            children = route.children;\n          }\n          processNewChildren(children, route);\n        });\n    }\n\n    const commands = {\n      redirect: path => createRedirect(context, path),\n      component: (component) => {\n        const element = document.createElement(component);\n        this.__createdByRouter.set(element, true);\n        return element;\n      }\n    };\n\n    return callbacks\n      .then(() => {\n        if (this.__isLatestRender(context)) {\n          return runCallbackIfPossible(route.action, [context, commands], route);\n        }\n      })\n      .then(result => {\n        if (isResultNotEmpty(result)) {\n          // Actions like `() => import('my-view.js')` are not expected to\n          // end the resolution, despite the result is not empty. Checking\n          // the result with a whitelist of values that end the resolution.\n          if (result instanceof HTMLElement ||\n              result.redirect ||\n              result === notFoundResult) {\n            return result;\n          }\n        }\n\n        if (isString(route.redirect)) {\n          return commands.redirect(route.redirect);\n        }\n\n        if (route.bundle) {\n          return loadBundle(route.bundle)\n            .then(() => {}, () => {\n              throw new Error(log(`Bundle not found: ${route.bundle}. Check if the file name is correct`));\n            });\n        }\n      })\n      .then(result => {\n        if (isResultNotEmpty(result)) {\n          return result;\n        }\n        if (isString(route.component)) {\n          return commands.component(route.component);\n        }\n      });\n  }\n\n  /**\n   * Sets the router outlet (the DOM node where the content for the current\n   * route is inserted). Any content pre-existing in the router outlet is\n   * removed at the end of each render pass.\n   *\n   * NOTE: this method is automatically invoked first time when creating a new Router instance.\n   *\n   * @param {?Node} outlet the DOM node where the content for the current route\n   *     is inserted.\n   */\n  setOutlet(outlet) {\n    if (outlet) {\n      this.__ensureOutlet(outlet);\n    }\n    this.__outlet = outlet;\n  }\n\n  /**\n   * Returns the current router outlet. The initial value is `undefined`.\n   *\n   * @return {?Node} the current router outlet (or `undefined`)\n   */\n  getOutlet() {\n    return this.__outlet;\n  }\n\n  /**\n   * Sets the routing config (replacing the existing one) and triggers a\n   * navigation event so that the router outlet is refreshed according to the\n   * current `window.location` and the new routing config.\n   *\n   * Each route object may have the following properties, listed here in the processing order:\n   * * `path` – the route path (relative to the parent route if any) in the\n   * [express.js syntax](https://expressjs.com/en/guide/routing.html#route-paths\").\n   *\n   * * `children` – an array of nested routes or a function that provides this\n   * array at the render time. The function can be synchronous or asynchronous:\n   * in the latter case the render is delayed until the returned promise is\n   * resolved. The `children` function is executed every time when this route is\n   * being rendered. This allows for dynamic route structures (e.g. backend-defined),\n   * but it might have a performance impact as well. In order to avoid calling\n   * the function on subsequent renders, you can override the `children` property\n   * of the route object and save the calculated array there\n   * (via `context.route.children = [ route1, route2, ...];`).\n   * Parent routes are fully resolved before resolving the children. Children\n   * 'path' values are relative to the parent ones.\n   *\n   * * `action` – the action that is executed before the route is resolved.\n   * The value for this property should be a function, accepting `context`\n   * and `commands` parameters described below. If present, this function is\n   * always invoked first, disregarding of the other properties' presence.\n   * The action can return a result directly or within a `Promise`, which\n   * resolves to the result. If the action result is an `HTMLElement` instance,\n   * a `commands.component(name)` result, a `commands.redirect(path)` result,\n   * or a `context.next()` result, the current route resolution is finished,\n   * and other route config properties are ignored.\n   * See also **Route Actions** section in [Live Examples](#/classes/Router/demos/demo/index.html).\n   *\n   * * `redirect` – other route's path to redirect to. Passes all route parameters to the redirect target.\n   * The target route should also be defined.\n   * See also **Redirects** section in [Live Examples](#/classes/Router/demos/demo/index.html).\n   *\n   * * `bundle` – string containing the path to `.js` or `.mjs` bundle to load before resolving the route,\n   * or the object with \"module\" and \"nomodule\" keys referring to different bundles.\n   * Each bundle is only loaded once. If \"module\" and \"nomodule\" are set, only one bundle is loaded,\n   * depending on whether the browser supports ES modules or not.\n   * The property is ignored when either an `action` returns the result or `redirect` property is present.\n   * Any error, e.g. 404 while loading bundle will cause route resolution to throw.\n   * See also **Code Splitting** section in [Live Examples](#/classes/Router/demos/demo/index.html).\n   *\n   * * `component` – the tag name of the Web Component to resolve the route to.\n   * The property is ignored when either an `action` returns the result or `redirect` property is present.\n   * If route contains the `component` property (or an action that return a component)\n   * and its child route also contains the `component` property, child route's component\n   * will be rendered as a light dom child of a parent component.\n   *\n   * * `name` – the string name of the route to use in the\n   * [`router.urlForName(name, params)`](#/classes/Router#method-urlForName)\n   * navigation helper method.\n   *\n   * For any route function (`action`, `children`) defined, the corresponding `route` object is available inside the callback\n   * through the `this` reference. If you need to access it, make sure you define the callback as a non-arrow function\n   * because arrow functions do not have their own `this` reference.\n   *\n   * `context` object that is passed to `action` function holds the following properties:\n   * * `context.pathname` – string with the pathname being resolved\n   *\n   * * `context.search` – search query string\n   *\n   * * `context.hash` – hash string\n   *\n   * * `context.params` – object with route parameters\n   *\n   * * `context.route` – object that holds the route that is currently being rendered.\n   *\n   * * `context.next()` – function for asynchronously getting the next route\n   * contents from the resolution chain (if any)\n   *\n   * `commands` object that is passed to `action` function has\n   * the following methods:\n   *\n   * * `commands.redirect(path)` – function that creates a redirect data\n   * for the path specified.\n   *\n   * * `commands.component(component)` – function that creates a new HTMLElement\n   * with current context. Note: the component created by this function is reused if visiting the same path twice in row.\n   *\n   *\n   * @param {!Array<!Route>|!Route} routes a single route or an array of those\n   * @param {?boolean} skipRender configure the router but skip rendering the\n   *     route corresponding to the current `window.location` values\n   *\n   * @return {!Promise<!Node>}\n   */\n  setRoutes(routes, skipRender = false) {\n    this.__previousContext = undefined;\n    this.__urlForName = undefined;\n    super.setRoutes(routes);\n    if (!skipRender) {\n      this.__onNavigationEvent();\n    }\n    return this.ready;\n  }\n\n  /**\n   * Asynchronously resolves the given pathname and renders the resolved route\n   * component into the router outlet. If no router outlet is set at the time of\n   * calling this method, or at the time when the route resolution is completed,\n   * a `TypeError` is thrown.\n   *\n   * Returns a promise that is fulfilled with the router outlet DOM Node after\n   * the route component is created and inserted into the router outlet, or\n   * rejected if no route matches the given path.\n   *\n   * If another render pass is started before the previous one is completed, the\n   * result of the previous render pass is ignored.\n   *\n   * @param {!string|!{pathname: !string, search: ?string, hash: ?string}} pathnameOrContext\n   *    the pathname to render or a context object with a `pathname` property,\n   *    optional `search` and `hash` properties, and other properties\n   *    to pass to the resolver.\n   * @param {boolean=} shouldUpdateHistory\n   *    update browser history with the rendered location\n   * @return {!Promise<!Node>}\n   */\n  render(pathnameOrContext, shouldUpdateHistory) {\n    const renderId = ++this.__lastStartedRenderId;\n    const context = Object.assign(\n      {\n        search: '',\n        hash: ''\n      },\n      isString(pathnameOrContext)\n        ? {pathname: pathnameOrContext}\n        : pathnameOrContext,\n      {\n        __renderId: renderId\n      }\n    );\n\n    // Find the first route that resolves to a non-empty result\n    this.ready = this.resolve(context)\n\n      // Process the result of this.resolve() and handle all special commands:\n      // (redirect / prevent / component). If the result is a 'component',\n      // then go deeper and build the entire chain of nested components matching\n      // the pathname. Also call all 'on before' callbacks along the way.\n      .then(context => this.__fullyResolveChain(context))\n\n      .then(context => {\n        if (this.__isLatestRender(context)) {\n          const previousContext = this.__previousContext;\n\n          // Check if the render was prevented and make an early return in that case\n          if (context === previousContext) {\n            // Replace the history with the previous context\n            // to make sure the URL stays the same.\n            this.__updateBrowserHistory(previousContext, true);\n            return this.location;\n          }\n\n          this.location = createLocation(context);\n\n          if (shouldUpdateHistory) {\n            // Replace only if first render redirects, so that we don’t leave\n            // the redirecting record in the history\n            this.__updateBrowserHistory(context, renderId === 1);\n          }\n\n          fireRouterEvent('location-changed', {router: this, location: this.location});\n\n          // Skip detaching/re-attaching there are no render changes\n          if (context.__skipAttach) {\n            this.__copyUnchangedElements(context, previousContext);\n            this.__previousContext = context;\n            return this.location;\n          }\n\n          this.__addAppearingContent(context, previousContext);\n          const animationDone = this.__animateIfNeeded(context);\n\n          this.__runOnAfterEnterCallbacks(context);\n          this.__runOnAfterLeaveCallbacks(context, previousContext);\n\n          return animationDone.then(() => {\n            if (this.__isLatestRender(context)) {\n              // If there is another render pass started after this one,\n              // the 'disappearing content' would be removed when the other\n              // render pass calls `this.__addAppearingContent()`\n              this.__removeDisappearingContent();\n\n              this.__previousContext = context;\n              return this.location;\n            }\n          });\n        }\n      })\n      .catch(error => {\n        if (renderId === this.__lastStartedRenderId) {\n          if (shouldUpdateHistory) {\n            this.__updateBrowserHistory(context);\n          }\n          removeDomNodes(this.__outlet && this.__outlet.children);\n          this.location = createLocation(Object.assign(context, {resolver: this}));\n          fireRouterEvent('error', Object.assign({router: this, error}, context));\n          throw error;\n        }\n      });\n    return this.ready;\n  }\n\n  // `topOfTheChainContextBeforeRedirects` is a context coming from Resolver.resolve().\n  // It would contain a 'redirect' route or the first 'component' route that\n  // matched the pathname. There might be more child 'component' routes to be\n  // resolved and added into the chain. This method would find and add them.\n  // `contextBeforeRedirects` is the context containing such a child component\n  // route. It's only necessary when this method is called recursively (otherwise\n  // it's the same as the 'top of the chain' context).\n  //\n  // Apart from building the chain of child components, this method would also\n  // handle 'redirect' routes, call 'onBefore' callbacks and handle 'prevent'\n  // and 'redirect' callback results.\n  __fullyResolveChain(topOfTheChainContextBeforeRedirects,\n    contextBeforeRedirects = topOfTheChainContextBeforeRedirects) {\n    return this.__findComponentContextAfterAllRedirects(contextBeforeRedirects)\n      // `contextAfterRedirects` is always a context with an `HTMLElement` result\n      // In other cases the promise gets rejected and .then() is not called\n      .then(contextAfterRedirects => {\n        const redirectsHappened = contextAfterRedirects !== contextBeforeRedirects;\n        const topOfTheChainContextAfterRedirects =\n          redirectsHappened ? contextAfterRedirects : topOfTheChainContextBeforeRedirects;\n\n        const matchedPath = getPathnameForRouter(\n          getMatchedPath(contextAfterRedirects.chain),\n          contextAfterRedirects.resolver\n        );\n        const isFound = (matchedPath === contextAfterRedirects.pathname);\n\n        // Recursive method to try matching more child and sibling routes\n        const findNextContextIfAny = (context, parent = context.route, prevResult) => {\n          return context.next(undefined, parent, prevResult).then(nextContext => {\n            if (nextContext === null || nextContext === notFoundResult) {\n              // Next context is not found in children, ...\n              if (isFound) {\n                // ...but original context is already fully matching - use it\n                return context;\n              } else if (parent.parent !== null) {\n                // ...and there is no full match yet - step up to check siblings\n                return findNextContextIfAny(context, parent.parent, nextContext);\n              } else {\n                return nextContext;\n              }\n            }\n\n            return nextContext;\n          });\n        };\n\n        return findNextContextIfAny(contextAfterRedirects).then(nextContext => {\n          if (nextContext === null || nextContext === notFoundResult) {\n            throw getNotFoundError(topOfTheChainContextAfterRedirects);\n          }\n\n          return nextContext\n          && nextContext !== notFoundResult\n          && nextContext !== contextAfterRedirects\n            ? this.__fullyResolveChain(topOfTheChainContextAfterRedirects, nextContext)\n            : this.__amendWithOnBeforeCallbacks(contextAfterRedirects);\n        });\n      });\n  }\n\n  __findComponentContextAfterAllRedirects(context) {\n    const result = context.result;\n    if (result instanceof HTMLElement) {\n      renderElement(context, result);\n      return Promise.resolve(context);\n    } else if (result.redirect) {\n      return this.__redirect(result.redirect, context.__redirectCount, context.__renderId)\n        .then(context => this.__findComponentContextAfterAllRedirects(context));\n    } else if (result instanceof Error) {\n      return Promise.reject(result);\n    } else {\n      return Promise.reject(\n        new Error(\n          log(\n            `Invalid route resolution result for path \"${context.pathname}\". ` +\n            `Expected redirect object or HTML element, but got: \"${logValue(result)}\". ` +\n            `Double check the action return value for the route.`\n          )\n        ));\n    }\n  }\n\n  __amendWithOnBeforeCallbacks(contextWithFullChain) {\n    return this.__runOnBeforeCallbacks(contextWithFullChain).then(amendedContext => {\n      if (amendedContext === this.__previousContext || amendedContext === contextWithFullChain) {\n        return amendedContext;\n      }\n      return this.__fullyResolveChain(amendedContext);\n    });\n  }\n\n  __runOnBeforeCallbacks(newContext) {\n    const previousContext = this.__previousContext || {};\n    const previousChain = previousContext.chain || [];\n    const newChain = newContext.chain;\n\n    let callbacks = Promise.resolve();\n    const prevent = () => ({cancel: true});\n    const redirect = (pathname) => createRedirect(newContext, pathname);\n\n    newContext.__divergedChainIndex = 0;\n    newContext.__skipAttach = false;\n    if (previousChain.length) {\n      for (let i = 0; i < Math.min(previousChain.length, newChain.length); i = ++newContext.__divergedChainIndex) {\n        if (previousChain[i].route !== newChain[i].route\n          || previousChain[i].path !== newChain[i].path && previousChain[i].element !== newChain[i].element\n          || !this.__isReusableElement(previousChain[i].element, newChain[i].element)) {\n          break;\n        }\n      }\n\n      // Skip re-attaching and notifications if element and chain do not change\n      newContext.__skipAttach =\n        // Same route chain\n        newChain.length === previousChain.length && newContext.__divergedChainIndex == newChain.length &&\n        // Same element\n        this.__isReusableElement(newContext.result, previousContext.result);\n\n      if (newContext.__skipAttach) {\n        // execute onBeforeLeave for changed segment element when skipping attach\n        for (let i = newChain.length - 1; i >= 0; i--) {\n          callbacks = this.__runOnBeforeLeaveCallbacks(callbacks, newContext, {prevent}, previousChain[i]);\n        }\n        // execute onBeforeEnter for changed segment element when skipping attach\n        for (let i = 0; i < newChain.length; i++) {\n          callbacks = this.__runOnBeforeEnterCallbacks(callbacks, newContext, {prevent, redirect}, newChain[i]);\n          previousChain[i].element.location = createLocation(newContext, previousChain[i].route);\n        }\n\n      } else {\n        // execute onBeforeLeave when NOT skipping attach\n        for (let i = previousChain.length - 1; i >= newContext.__divergedChainIndex; i--) {\n          callbacks = this.__runOnBeforeLeaveCallbacks(callbacks, newContext, {prevent}, previousChain[i]);\n        }\n      }\n    }\n    // execute onBeforeEnter when NOT skipping attach\n    if (!newContext.__skipAttach) {\n      for (let i = 0; i < newChain.length; i++) {\n        if (i < newContext.__divergedChainIndex) {\n          if (i < previousChain.length && previousChain[i].element) {\n            previousChain[i].element.location = createLocation(newContext, previousChain[i].route);\n          }\n        } else {\n          callbacks = this.__runOnBeforeEnterCallbacks(callbacks, newContext, {prevent, redirect}, newChain[i]);\n          if (newChain[i].element) {\n            newChain[i].element.location = createLocation(newContext, newChain[i].route);\n          }\n        }\n      }\n    }\n    return callbacks.then(amendmentResult => {\n      if (amendmentResult) {\n        if (amendmentResult.cancel) {\n          this.__previousContext.__renderId = newContext.__renderId;\n          return this.__previousContext;\n        }\n        if (amendmentResult.redirect) {\n          return this.__redirect(amendmentResult.redirect, newContext.__redirectCount, newContext.__renderId);\n        }\n      }\n      return newContext;\n    });\n  }\n\n  __runOnBeforeLeaveCallbacks(callbacks, newContext, commands, chainElement) {\n    const location = createLocation(newContext);\n    return callbacks.then(result => {\n      if (this.__isLatestRender(newContext)) {\n        const afterLeaveFunction = amend('onBeforeLeave', [location, commands, this], chainElement.element);\n        return afterLeaveFunction(result);\n      }\n    }).then(result => {\n      if (!(result || {}).redirect) {\n        return result;\n      }\n    });\n  }\n\n  __runOnBeforeEnterCallbacks(callbacks, newContext, commands, chainElement) {\n    const location = createLocation(newContext, chainElement.route);\n    return callbacks.then(result => {\n      if (this.__isLatestRender(newContext)) {\n        const beforeEnterFunction = amend('onBeforeEnter', [location, commands, this], chainElement.element);\n        return beforeEnterFunction(result);\n      }\n    });\n  }\n\n  __isReusableElement(element, otherElement) {\n    if (element && otherElement) {\n      return this.__createdByRouter.get(element) && this.__createdByRouter.get(otherElement)\n        ? element.localName === otherElement.localName\n        : element === otherElement;\n    }\n    return false;\n  }\n\n  __isLatestRender(context) {\n    return context.__renderId === this.__lastStartedRenderId;\n  }\n\n  __redirect(redirectData, counter, renderId) {\n    if (counter > MAX_REDIRECT_COUNT) {\n      throw new Error(log(`Too many redirects when rendering ${redirectData.from}`));\n    }\n\n    return this.resolve({\n      pathname: this.urlForPath(\n        redirectData.pathname,\n        redirectData.params\n      ),\n      redirectFrom: redirectData.from,\n      __redirectCount: (counter || 0) + 1,\n      __renderId: renderId\n    });\n  }\n\n  __ensureOutlet(outlet = this.__outlet) {\n    if (!(outlet instanceof Node)) {\n      throw new TypeError(log(`Expected router outlet to be a valid DOM Node (but got ${outlet})`));\n    }\n  }\n\n  __updateBrowserHistory({pathname, search = '', hash = ''}, replace) {\n    if (window.location.pathname !== pathname\n        || window.location.search !== search\n        || window.location.hash !== hash\n    ) {\n      const changeState = replace ? 'replaceState' : 'pushState';\n      window.history[changeState](null, document.title, pathname + search + hash);\n      window.dispatchEvent(new PopStateEvent('popstate', {state: 'vaadin-router-ignore'}));\n    }\n  }\n\n  __copyUnchangedElements(context, previousContext) {\n    // Find the deepest common parent between the last and the new component\n    // chains. Update references for the unchanged elements in the new chain\n    let deepestCommonParent = this.__outlet;\n    for (let i = 0; i < context.__divergedChainIndex; i++) {\n      const unchangedElement = previousContext && previousContext.chain[i].element;\n      if (unchangedElement) {\n        if (unchangedElement.parentNode === deepestCommonParent) {\n          context.chain[i].element = unchangedElement;\n          deepestCommonParent = unchangedElement;\n        } else {\n          break;\n        }\n      }\n    }\n    return deepestCommonParent;\n  }\n\n  __addAppearingContent(context, previousContext) {\n    this.__ensureOutlet();\n\n    // If the previous 'entering' animation has not completed yet,\n    // stop it and remove that content from the DOM before adding new one.\n    this.__removeAppearingContent();\n\n    // Copy reusable elements from the previousContext to current\n    const deepestCommonParent = this.__copyUnchangedElements(context, previousContext);\n\n    // Keep two lists of DOM elements:\n    //  - those that should be removed once the transition animation is over\n    //  - and those that should remain\n    this.__appearingContent = [];\n    this.__disappearingContent = Array\n      .from(deepestCommonParent.children)\n      .filter(\n        // Only remove layout content that was added by router\n        e => this.__addedByRouter.get(e) &&\n        // Do not remove the result element to avoid flickering\n        e !== context.result);\n\n    // Add new elements (starting after the deepest common parent) to the DOM.\n    // That way only the components that are actually different between the two\n    // locations are added to the DOM (and those that are common remain in the\n    // DOM without first removing and then adding them again).\n    let parentElement = deepestCommonParent;\n    for (let i = context.__divergedChainIndex; i < context.chain.length; i++) {\n      const elementToAdd = context.chain[i].element;\n      if (elementToAdd) {\n        parentElement.appendChild(elementToAdd);\n        this.__addedByRouter.set(elementToAdd, true);\n        if (parentElement === deepestCommonParent) {\n          this.__appearingContent.push(elementToAdd);\n        }\n        parentElement = elementToAdd;\n      }\n    }\n  }\n\n  __removeDisappearingContent() {\n    if (this.__disappearingContent) {\n      removeDomNodes(this.__disappearingContent);\n    }\n    this.__disappearingContent = null;\n    this.__appearingContent = null;\n  }\n\n  __removeAppearingContent() {\n    if (this.__disappearingContent && this.__appearingContent) {\n      removeDomNodes(this.__appearingContent);\n      this.__disappearingContent = null;\n      this.__appearingContent = null;\n    }\n  }\n\n  __runOnAfterLeaveCallbacks(currentContext, targetContext) {\n    if (!targetContext) {\n      return;\n    }\n\n    // REVERSE iteration: from Z to A\n    for (let i = targetContext.chain.length - 1; i >= currentContext.__divergedChainIndex; i--) {\n      if (!this.__isLatestRender(currentContext)) {\n        break;\n      }\n      const currentComponent = targetContext.chain[i].element;\n      if (!currentComponent) {\n        continue;\n      }\n      try {\n        const location = createLocation(currentContext);\n        runCallbackIfPossible(\n          currentComponent.onAfterLeave,\n          [location, {}, targetContext.resolver],\n          currentComponent);\n      } finally {\n        if (this.__disappearingContent.indexOf(currentComponent) > -1) {\n          removeDomNodes(currentComponent.children);\n        }\n      }\n    }\n  }\n\n  __runOnAfterEnterCallbacks(currentContext) {\n    // forward iteration: from A to Z\n    for (let i = currentContext.__divergedChainIndex; i < currentContext.chain.length; i++) {\n      if (!this.__isLatestRender(currentContext)) {\n        break;\n      }\n      const currentComponent = currentContext.chain[i].element || {};\n      const location = createLocation(currentContext, currentContext.chain[i].route);\n      runCallbackIfPossible(\n        currentComponent.onAfterEnter,\n        [location, {}, currentContext.resolver],\n        currentComponent);\n    }\n  }\n\n  __animateIfNeeded(context) {\n    const from = (this.__disappearingContent || [])[0];\n    const to = (this.__appearingContent || [])[0];\n    const promises = [];\n\n    const chain = context.chain;\n    let config;\n    for (let i = chain.length; i > 0; i--) {\n      if (chain[i - 1].route.animate) {\n        config = chain[i - 1].route.animate;\n        break;\n      }\n    }\n\n    if (from && to && config) {\n      const leave = isObject(config) && config.leave || 'leaving';\n      const enter = isObject(config) && config.enter || 'entering';\n      promises.push(animate(from, leave));\n      promises.push(animate(to, enter));\n    }\n\n    return Promise.all(promises).then(() => context);\n  }\n\n  /**\n   * Subscribes this instance to navigation events on the `window`.\n   *\n   * NOTE: beware of resource leaks. For as long as a router instance is\n   * subscribed to navigation events, it won't be garbage collected.\n   */\n  subscribe() {\n    window.addEventListener('vaadin-router-go', this.__navigationEventHandler);\n  }\n\n  /**\n   * Removes the subscription to navigation events created in the `subscribe()`\n   * method.\n   */\n  unsubscribe() {\n    window.removeEventListener('vaadin-router-go', this.__navigationEventHandler);\n  }\n\n  __onNavigationEvent(event) {\n    const {pathname, search, hash} = event ? event.detail : window.location;\n    if (isString(this.__normalizePathname(pathname))) {\n      if (event && event.preventDefault) {\n        event.preventDefault();\n      }\n      this.render({pathname, search, hash}, true);\n    }\n  }\n\n  /**\n   * Configures what triggers Router navigation events:\n   *  - `POPSTATE`: popstate events on the current `window`\n   *  - `CLICK`: click events on `<a>` links leading to the current page\n   *\n   * This method is invoked with the pre-configured values when creating a new Router instance.\n   * By default, both `POPSTATE` and `CLICK` are enabled. This setup is expected to cover most of the use cases.\n   *\n   * See the `router-config.js` for the default navigation triggers config. Based on it, you can\n   * create the own one and only import the triggers you need, instead of pulling in all the code,\n   * e.g. if you want to handle `click` differently.\n   *\n   * See also **Navigation Triggers** section in [Live Examples](#/classes/Router/demos/demo/index.html).\n   *\n   * @param {...NavigationTrigger} triggers\n   */\n  static setTriggers(...triggers) {\n    setNavigationTriggers(triggers);\n  }\n\n  /**\n   * Generates a URL for the route with the given name, optionally performing\n   * substitution of parameters.\n   *\n   * The route is searched in all the Router instances subscribed to\n   * navigation events.\n   *\n   * **Note:** For child route names, only array children are considered.\n   * It is not possible to generate URLs using a name for routes set with\n   * a children function.\n   *\n   * @function urlForName\n   * @param {!string} name the route name or the route’s `component` name.\n   * @param {Params=} params Optional object with route path parameters.\n   * Named parameters are passed by name (`params[name] = value`), unnamed\n   * parameters are passed by index (`params[index] = value`).\n   *\n   * @return {string}\n   */\n  urlForName(name, params) {\n    if (!this.__urlForName) {\n      this.__urlForName = generateUrls(this);\n    }\n    return getPathnameForRouter(\n      this.__urlForName(name, params),\n      this\n    );\n  }\n\n  /**\n   * Generates a URL for the given route path, optionally performing\n   * substitution of parameters.\n   *\n   * @param {!string} path string route path declared in [express.js syntax](https://expressjs.com/en/guide/routing.html#route-paths\").\n   * @param {Params=} params Optional object with route path parameters.\n   * Named parameters are passed by name (`params[name] = value`), unnamed\n   * parameters are passed by index (`params[index] = value`).\n   *\n   * @return {string}\n   */\n  urlForPath(path, params) {\n    return getPathnameForRouter(\n      Router.pathToRegexp.compile(path)(params),\n      this\n    );\n  }\n\n  /**\n   * Triggers navigation to a new path. Returns a boolean without waiting until\n   * the navigation is complete. Returns `true` if at least one `Router`\n   * has handled the navigation (was subscribed and had `baseUrl` matching\n   * the `path` argument), otherwise returns `false`.\n   *\n   * @param {!string|!{pathname: !string, search: (string|undefined), hash: (string|undefined)}} path\n   *   a new in-app path string, or an URL-like object with `pathname`\n   *   string property, and optional `search` and `hash` string properties.\n   * @return {boolean}\n   */\n  static go(path) {\n    const {pathname, search, hash} = isString(path)\n      ? this.__createUrl(path, 'http://a') // some base to omit origin\n      : path;\n    return fireRouterEvent('go', {pathname, search, hash});\n  }\n}\n","const DEV_MODE_CODE_REGEXP =\n  /\\/\\*\\*\\s+vaadin-dev-mode:start([\\s\\S]*)vaadin-dev-mode:end\\s+\\*\\*\\//i;\n\nconst FlowClients = window.Vaadin && window.Vaadin.Flow && window.Vaadin.Flow.clients;\n\nfunction isMinified() {\n  function test() {\n    /** vaadin-dev-mode:start\n    return false;\n    vaadin-dev-mode:end **/\n    return true;\n  }\n  return uncommentAndRun(test);\n}\n\nfunction isDevelopmentMode() {\n  try {\n    if (isForcedDevelopmentMode()) {\n      return true;\n    }\n\n    if (!isLocalhost()) {\n      return false;\n    }\n\n    if (FlowClients) {\n      return !isFlowProductionMode();\n    }\n\n    return !isMinified();\n  } catch (e) {\n    // Some error in this code, assume production so no further actions will be taken\n    return false;\n  }\n}\n\nfunction isForcedDevelopmentMode() {\n  return localStorage.getItem(\"vaadin.developmentmode.force\");\n}\n\nfunction isLocalhost() {\n  return ([\"localhost\",\"127.0.0.1\"].indexOf(window.location.hostname) >= 0);\n}\n\nfunction isFlowProductionMode() {\n  if (FlowClients) {\n    const productionModeApps = Object.keys(FlowClients)\n      .map(key => FlowClients[key])\n      .filter(client => client.productionMode);\n    if (productionModeApps.length > 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction uncommentAndRun(callback, args) {\n  if (typeof callback !== 'function') {\n    return;\n  }\n\n  const match = DEV_MODE_CODE_REGEXP.exec(callback.toString());\n  if (match) {\n    try {\n      // requires CSP: script-src 'unsafe-eval'\n      callback = new Function(match[1]);\n    } catch (e) {\n      // eat the exception\n      console.log('vaadin-development-mode-detector: uncommentAndRun() failed', e)\n    }\n  }\n\n  return callback(args);\n}\n\n// A guard against polymer-modulizer removing the window.Vaadin\n// initialization above.\nwindow['Vaadin'] = window['Vaadin'] || {};\n\n/**\n * Inspects the source code of the given `callback` function for\n * specially-marked _commented_ code. If such commented code is found in the\n * callback source, uncomments and runs that code instead of the callback\n * itself. Otherwise runs the callback as is.\n *\n * The optional arguments are passed into the callback / uncommented code,\n * the result is returned.\n *\n * See the `isMinified()` function source code in this file for an example.\n *\n */\nexport const runIfDevelopmentMode = function(callback, args) {\n  if (window.Vaadin.developmentMode) {\n    return uncommentAndRun(callback, args);\n  }\n};\n\nif (window.Vaadin.developmentMode === undefined) {\n  window.Vaadin.developmentMode = isDevelopmentMode();\n}\n","/* This file is autogenerated from src/vaadin-usage-statistics.tpl.html */\n/*\n\nThis script gathers usage statistics from the application running in development mode.\n\nStatistics gathering is automatically disabled and excluded from production builds.\n\nFor details and to opt-out, see https://github.com/vaadin/vaadin-usage-statistics.\n\n*/\n/*\n  FIXME(polymer-modulizer): the above comments were extracted\n  from HTML and may be out of place here. Review them and\n  then delete this comment!\n*/\nimport { runIfDevelopmentMode } from '@vaadin/vaadin-development-mode-detector/vaadin-development-mode-detector.js';\n\nfunction maybeGatherAndSendStats() {\n  /** vaadin-dev-mode:start\n  (function () {\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar getPolymerVersion = function getPolymerVersion() {\n  return window.Polymer && window.Polymer.version;\n};\n\nvar StatisticsGatherer = function () {\n  function StatisticsGatherer(logger) {\n    classCallCheck(this, StatisticsGatherer);\n\n    this.now = new Date().getTime();\n    this.logger = logger;\n  }\n\n  createClass(StatisticsGatherer, [{\n    key: 'frameworkVersionDetectors',\n    value: function frameworkVersionDetectors() {\n      return {\n        'Flow': function Flow() {\n          if (window.Vaadin && window.Vaadin.Flow && window.Vaadin.Flow.clients) {\n            var flowVersions = Object.keys(window.Vaadin.Flow.clients).map(function (key) {\n              return window.Vaadin.Flow.clients[key];\n            }).filter(function (client) {\n              return client.getVersionInfo;\n            }).map(function (client) {\n              return client.getVersionInfo().flow;\n            });\n            if (flowVersions.length > 0) {\n              return flowVersions[0];\n            }\n          }\n        },\n        'Vaadin Framework': function VaadinFramework() {\n          if (window.vaadin && window.vaadin.clients) {\n            var frameworkVersions = Object.values(window.vaadin.clients).filter(function (client) {\n              return client.getVersionInfo;\n            }).map(function (client) {\n              return client.getVersionInfo().vaadinVersion;\n            });\n            if (frameworkVersions.length > 0) {\n              return frameworkVersions[0];\n            }\n          }\n        },\n        'AngularJs': function AngularJs() {\n          if (window.angular && window.angular.version && window.angular.version) {\n            return window.angular.version.full;\n          }\n        },\n        'Angular': function Angular() {\n          if (window.ng) {\n            var tags = document.querySelectorAll(\"[ng-version]\");\n            if (tags.length > 0) {\n              return tags[0].getAttribute(\"ng-version\");\n            }\n            return \"Unknown\";\n          }\n        },\n        'Backbone.js': function BackboneJs() {\n          if (window.Backbone) {\n            return window.Backbone.VERSION;\n          }\n        },\n        'React': function React() {\n          var reactSelector = '[data-reactroot], [data-reactid]';\n          if (!!document.querySelector(reactSelector)) {\n            // React does not publish the version by default\n            return \"unknown\";\n          }\n        },\n        'Ember': function Ember() {\n          if (window.Em && window.Em.VERSION) {\n            return window.Em.VERSION;\n          } else if (window.Ember && window.Ember.VERSION) {\n            return window.Ember.VERSION;\n          }\n        },\n        'jQuery': function (_jQuery) {\n          function jQuery() {\n            return _jQuery.apply(this, arguments);\n          }\n\n          jQuery.toString = function () {\n            return _jQuery.toString();\n          };\n\n          return jQuery;\n        }(function () {\n          if (typeof jQuery === 'function' && jQuery.prototype.jquery !== undefined) {\n            return jQuery.prototype.jquery;\n          }\n        }),\n        'Polymer': function Polymer() {\n          var version = getPolymerVersion();\n          if (version) {\n            return version;\n          }\n        },\n        'LitElement': function LitElement() {\n          var version = window.litElementVersions && window.litElementVersions[0];\n          if (version) {\n            return version;\n          }\n        },\n        'LitHtml': function LitHtml() {\n          var version = window.litHtmlVersions && window.litHtmlVersions[0];\n          if (version) {\n            return version;\n          }\n        },\n        'Vue.js': function VueJs() {\n          if (window.Vue) {\n            return window.Vue.version;\n          }\n        }\n      };\n    }\n  }, {\n    key: 'getUsedVaadinElements',\n    value: function getUsedVaadinElements(elements) {\n      var version = getPolymerVersion();\n      var elementClasses = void 0;\n      // NOTE: In case you edit the code here, YOU MUST UPDATE any statistics reporting code in Flow.\n      // Check all locations calling the method getEntries() in\n      // https://github.com/vaadin/flow/blob/master/flow-server/src/main/java/com/vaadin/flow/internal/UsageStatistics.java#L106\n      // Currently it is only used by BootstrapHandler.\n      if (version && version.indexOf('2') === 0) {\n        // Polymer 2: components classes are stored in window.Vaadin\n        elementClasses = Object.keys(window.Vaadin).map(function (c) {\n          return window.Vaadin[c];\n        }).filter(function (c) {\n          return c.is;\n        });\n      } else {\n        // Polymer 3: components classes are stored in window.Vaadin.registrations\n        elementClasses = window.Vaadin.registrations || [];\n      }\n      elementClasses.forEach(function (klass) {\n        var version = klass.version ? klass.version : \"0.0.0\";\n        elements[klass.is] = { version: version };\n      });\n    }\n  }, {\n    key: 'getUsedVaadinThemes',\n    value: function getUsedVaadinThemes(themes) {\n      ['Lumo', 'Material'].forEach(function (themeName) {\n        var theme;\n        var version = getPolymerVersion();\n        if (version && version.indexOf('2') === 0) {\n          // Polymer 2: themes are stored in window.Vaadin\n          theme = window.Vaadin[themeName];\n        } else {\n          // Polymer 3: themes are stored in custom element registry\n          theme = customElements.get('vaadin-' + themeName.toLowerCase() + '-styles');\n        }\n        if (theme && theme.version) {\n          themes[themeName] = { version: theme.version };\n        }\n      });\n    }\n  }, {\n    key: 'getFrameworks',\n    value: function getFrameworks(frameworks) {\n      var detectors = this.frameworkVersionDetectors();\n      Object.keys(detectors).forEach(function (framework) {\n        var detector = detectors[framework];\n        try {\n          var version = detector();\n          if (version) {\n            frameworks[framework] = { version: version };\n          }\n        } catch (e) {}\n      });\n    }\n  }, {\n    key: 'gather',\n    value: function gather(storage) {\n      var storedStats = storage.read();\n      var gatheredStats = {};\n      var types = [\"elements\", \"frameworks\", \"themes\"];\n\n      types.forEach(function (type) {\n        gatheredStats[type] = {};\n        if (!storedStats[type]) {\n          storedStats[type] = {};\n        }\n      });\n\n      var previousStats = JSON.stringify(storedStats);\n\n      this.getUsedVaadinElements(gatheredStats.elements);\n      this.getFrameworks(gatheredStats.frameworks);\n      this.getUsedVaadinThemes(gatheredStats.themes);\n\n      var now = this.now;\n      types.forEach(function (type) {\n        var keys = Object.keys(gatheredStats[type]);\n        keys.forEach(function (key) {\n          if (!storedStats[type][key] || _typeof(storedStats[type][key]) != _typeof({})) {\n            storedStats[type][key] = { firstUsed: now };\n          }\n          // Discards any previously logged version number\n          storedStats[type][key].version = gatheredStats[type][key].version;\n          storedStats[type][key].lastUsed = now;\n        });\n      });\n\n      var newStats = JSON.stringify(storedStats);\n      storage.write(newStats);\n      if (newStats != previousStats && Object.keys(storedStats).length > 0) {\n        this.logger.debug(\"New stats: \" + newStats);\n      }\n    }\n  }]);\n  return StatisticsGatherer;\n}();\n\nvar StatisticsStorage = function () {\n  function StatisticsStorage(key) {\n    classCallCheck(this, StatisticsStorage);\n\n    this.key = key;\n  }\n\n  createClass(StatisticsStorage, [{\n    key: 'read',\n    value: function read() {\n      var localStorageStatsString = localStorage.getItem(this.key);\n      try {\n        return JSON.parse(localStorageStatsString ? localStorageStatsString : '{}');\n      } catch (e) {\n        return {};\n      }\n    }\n  }, {\n    key: 'write',\n    value: function write(data) {\n      localStorage.setItem(this.key, data);\n    }\n  }, {\n    key: 'clear',\n    value: function clear() {\n      localStorage.removeItem(this.key);\n    }\n  }, {\n    key: 'isEmpty',\n    value: function isEmpty() {\n      var storedStats = this.read();\n      var empty = true;\n      Object.keys(storedStats).forEach(function (key) {\n        if (Object.keys(storedStats[key]).length > 0) {\n          empty = false;\n        }\n      });\n\n      return empty;\n    }\n  }]);\n  return StatisticsStorage;\n}();\n\nvar StatisticsSender = function () {\n  function StatisticsSender(url, logger) {\n    classCallCheck(this, StatisticsSender);\n\n    this.url = url;\n    this.logger = logger;\n  }\n\n  createClass(StatisticsSender, [{\n    key: 'send',\n    value: function send(data, errorHandler) {\n      var logger = this.logger;\n\n      if (navigator.onLine === false) {\n        logger.debug(\"Offline, can't send\");\n        errorHandler();\n        return;\n      }\n      logger.debug(\"Sending data to \" + this.url);\n\n      var req = new XMLHttpRequest();\n      req.withCredentials = true;\n      req.addEventListener(\"load\", function () {\n        // Stats sent, nothing more to do\n        logger.debug(\"Response: \" + req.responseText);\n      });\n      req.addEventListener(\"error\", function () {\n        logger.debug(\"Send failed\");\n        errorHandler();\n      });\n      req.addEventListener(\"abort\", function () {\n        logger.debug(\"Send aborted\");\n        errorHandler();\n      });\n      req.open(\"POST\", this.url);\n      req.setRequestHeader(\"Content-Type\", \"application/json\");\n      req.send(data);\n    }\n  }]);\n  return StatisticsSender;\n}();\n\nvar StatisticsLogger = function () {\n  function StatisticsLogger(id) {\n    classCallCheck(this, StatisticsLogger);\n\n    this.id = id;\n  }\n\n  createClass(StatisticsLogger, [{\n    key: '_isDebug',\n    value: function _isDebug() {\n      return localStorage.getItem(\"vaadin.\" + this.id + \".debug\");\n    }\n  }, {\n    key: 'debug',\n    value: function debug(msg) {\n      if (this._isDebug()) {\n        console.info(this.id + \": \" + msg);\n      }\n    }\n  }]);\n  return StatisticsLogger;\n}();\n\nvar UsageStatistics = function () {\n  function UsageStatistics() {\n    classCallCheck(this, UsageStatistics);\n\n    this.now = new Date();\n    this.timeNow = this.now.getTime();\n    this.gatherDelay = 10; // Delay between loading this file and gathering stats\n    this.initialDelay = 24 * 60 * 60;\n\n    this.logger = new StatisticsLogger(\"statistics\");\n    this.storage = new StatisticsStorage(\"vaadin.statistics.basket\");\n    this.gatherer = new StatisticsGatherer(this.logger);\n    this.sender = new StatisticsSender(\"https://tools.vaadin.com/usage-stats/submit\", this.logger);\n  }\n\n  createClass(UsageStatistics, [{\n    key: 'maybeGatherAndSend',\n    value: function maybeGatherAndSend() {\n      var _this = this;\n\n      if (localStorage.getItem(UsageStatistics.optOutKey)) {\n        return;\n      }\n      this.gatherer.gather(this.storage);\n      setTimeout(function () {\n        _this.maybeSend();\n      }, this.gatherDelay * 1000);\n    }\n  }, {\n    key: 'lottery',\n    value: function lottery() {\n      return true;\n    }\n  }, {\n    key: 'currentMonth',\n    value: function currentMonth() {\n      return this.now.getYear() * 12 + this.now.getMonth();\n    }\n  }, {\n    key: 'maybeSend',\n    value: function maybeSend() {\n      var firstUse = Number(localStorage.getItem(UsageStatistics.firstUseKey));\n      var monthProcessed = Number(localStorage.getItem(UsageStatistics.monthProcessedKey));\n\n      if (!firstUse) {\n        // Use a grace period to avoid interfering with tests, incognito mode etc\n        firstUse = this.timeNow;\n        localStorage.setItem(UsageStatistics.firstUseKey, firstUse);\n      }\n\n      if (this.timeNow < firstUse + this.initialDelay * 1000) {\n        this.logger.debug(\"No statistics will be sent until the initial delay of \" + this.initialDelay + \"s has passed\");\n        return;\n      }\n      if (this.currentMonth() <= monthProcessed) {\n        this.logger.debug(\"This month has already been processed\");\n        return;\n      }\n      localStorage.setItem(UsageStatistics.monthProcessedKey, this.currentMonth());\n      // Use random sampling\n      if (this.lottery()) {\n        this.logger.debug(\"Congratulations, we have a winner!\");\n      } else {\n        this.logger.debug(\"Sorry, no stats from you this time\");\n        return;\n      }\n\n      this.send();\n    }\n  }, {\n    key: 'send',\n    value: function send() {\n      // Ensure we have the latest data\n      this.gatherer.gather(this.storage);\n\n      // Read, send and clean up\n      var data = this.storage.read();\n      data[\"firstUse\"] = Number(localStorage.getItem(UsageStatistics.firstUseKey));\n      data[\"usageStatisticsVersion\"] = UsageStatistics.version;\n      var info = 'This request contains usage statistics gathered from the application running in development mode. \\n\\nStatistics gathering is automatically disabled and excluded from production builds.\\n\\nFor details and to opt-out, see https://github.com/vaadin/vaadin-usage-statistics.\\n\\n\\n\\n';\n      var self = this;\n      this.sender.send(info + JSON.stringify(data), function () {\n        // Revert the 'month processed' flag\n        localStorage.setItem(UsageStatistics.monthProcessedKey, self.currentMonth() - 1);\n      });\n    }\n  }], [{\n    key: 'version',\n    get: function get$1() {\n      return '2.1.0';\n    }\n  }, {\n    key: 'firstUseKey',\n    get: function get$1() {\n      return 'vaadin.statistics.firstuse';\n    }\n  }, {\n    key: 'monthProcessedKey',\n    get: function get$1() {\n      return 'vaadin.statistics.monthProcessed';\n    }\n  }, {\n    key: 'optOutKey',\n    get: function get$1() {\n      return 'vaadin.statistics.optout';\n    }\n  }]);\n  return UsageStatistics;\n}();\n\ntry {\n  window.Vaadin = window.Vaadin || {};\n  window.Vaadin.usageStatsChecker = window.Vaadin.usageStatsChecker || new UsageStatistics();\n  window.Vaadin.usageStatsChecker.maybeGatherAndSend();\n} catch (e) {\n  // Intentionally ignored as this is not a problem in the app being developed\n}\n\n}());\n\n  vaadin-dev-mode:end **/\n}\n\nexport const usageStatistics = function() {\n  if (typeof runIfDevelopmentMode === 'function') {\n    return runIfDevelopmentMode(maybeGatherAndSendStats);\n  }\n};\n","import {usageStatistics} from '@vaadin/vaadin-usage-statistics/vaadin-usage-statistics.js';\n\nwindow.Vaadin = window.Vaadin || {};\nwindow.Vaadin.registrations = window.Vaadin.registrations || [];\n\nwindow.Vaadin.registrations.push({\n  is: '@vaadin/router',\n  version: '1.7.4',\n});\n\nusageStatistics();\n","import CLICK from './triggers/click.js';\nimport POPSTATE from './triggers/popstate.js';\nimport {Router} from './router.js';\nimport './router-meta.js';\nRouter.NavigationTrigger = {POPSTATE, CLICK};\nexport {Router};\n","/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n  return result;\n}\n\nmodule.exports = arrayMap;\n","/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\nmodule.exports = listCacheClear;\n","/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\nmodule.exports = eq;\n","var eq = require('./eq');\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\nmodule.exports = assocIndexOf;\n","var assocIndexOf = require('./_assocIndexOf');\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype;\n\n/** Built-in value references. */\nvar splice = arrayProto.splice;\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\nmodule.exports = listCacheDelete;\n","var assocIndexOf = require('./_assocIndexOf');\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\nmodule.exports = listCacheGet;\n","var assocIndexOf = require('./_assocIndexOf');\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\nmodule.exports = listCacheHas;\n","var listCacheClear = require('./_listCacheClear'),\n    listCacheDelete = require('./_listCacheDelete'),\n    listCacheGet = require('./_listCacheGet'),\n    listCacheHas = require('./_listCacheHas'),\n    listCacheSet = require('./_listCacheSet');\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\nmodule.exports = ListCache;\n","var assocIndexOf = require('./_assocIndexOf');\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\nmodule.exports = listCacheSet;\n","var ListCache = require('./_ListCache');\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\nmodule.exports = stackClear;\n","/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\nmodule.exports = stackDelete;\n","/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\nmodule.exports = stackGet;\n","/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\nmodule.exports = stackHas;\n","var root = require('./_root');\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\nmodule.exports = Symbol;\n","var Symbol = require('./_Symbol');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\nmodule.exports = getRawTag;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nmodule.exports = objectToString;\n","var Symbol = require('./_Symbol'),\n    getRawTag = require('./_getRawTag'),\n    objectToString = require('./_objectToString');\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]',\n    undefinedTag = '[object Undefined]';\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\nmodule.exports = baseGetTag;\n","/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\nmodule.exports = isObject;\n","var baseGetTag = require('./_baseGetTag'),\n    isObject = require('./isObject');\n\n/** `Object#toString` result references. */\nvar asyncTag = '[object AsyncFunction]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    proxyTag = '[object Proxy]';\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\nmodule.exports = isFunction;\n","var coreJsData = require('./_coreJsData');\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\nmodule.exports = isMasked;\n","var root = require('./_root');\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\nmodule.exports = coreJsData;\n","/** Used for built-in method references. */\nvar funcProto = Function.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\nmodule.exports = toSource;\n","var isFunction = require('./isFunction'),\n    isMasked = require('./_isMasked'),\n    isObject = require('./isObject'),\n    toSource = require('./_toSource');\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\nmodule.exports = baseIsNative;\n","/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\nmodule.exports = getValue;\n","var getNative = require('./_getNative'),\n    root = require('./_root');\n\n/* Built-in method references that are verified to be native. */\nvar Map = getNative(root, 'Map');\n\nmodule.exports = Map;\n","var baseIsNative = require('./_baseIsNative'),\n    getValue = require('./_getValue');\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\nmodule.exports = getNative;\n","var getNative = require('./_getNative');\n\n/* Built-in method references that are verified to be native. */\nvar nativeCreate = getNative(Object, 'create');\n\nmodule.exports = nativeCreate;\n","var nativeCreate = require('./_nativeCreate');\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\nmodule.exports = hashClear;\n","/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\nmodule.exports = hashDelete;\n","var nativeCreate = require('./_nativeCreate');\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\nmodule.exports = hashGet;\n","var nativeCreate = require('./_nativeCreate');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\nmodule.exports = hashHas;\n","var hashClear = require('./_hashClear'),\n    hashDelete = require('./_hashDelete'),\n    hashGet = require('./_hashGet'),\n    hashHas = require('./_hashHas'),\n    hashSet = require('./_hashSet');\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\nmodule.exports = Hash;\n","var nativeCreate = require('./_nativeCreate');\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\nmodule.exports = hashSet;\n","var Hash = require('./_Hash'),\n    ListCache = require('./_ListCache'),\n    Map = require('./_Map');\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\nmodule.exports = mapCacheClear;\n","/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\nmodule.exports = isKeyable;\n","var isKeyable = require('./_isKeyable');\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\nmodule.exports = getMapData;\n","var getMapData = require('./_getMapData');\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\nmodule.exports = mapCacheDelete;\n","var getMapData = require('./_getMapData');\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\nmodule.exports = mapCacheGet;\n","var getMapData = require('./_getMapData');\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\nmodule.exports = mapCacheHas;\n","var mapCacheClear = require('./_mapCacheClear'),\n    mapCacheDelete = require('./_mapCacheDelete'),\n    mapCacheGet = require('./_mapCacheGet'),\n    mapCacheHas = require('./_mapCacheHas'),\n    mapCacheSet = require('./_mapCacheSet');\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\nmodule.exports = MapCache;\n","var getMapData = require('./_getMapData');\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\nmodule.exports = mapCacheSet;\n","var ListCache = require('./_ListCache'),\n    stackClear = require('./_stackClear'),\n    stackDelete = require('./_stackDelete'),\n    stackGet = require('./_stackGet'),\n    stackHas = require('./_stackHas'),\n    stackSet = require('./_stackSet');\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\nmodule.exports = Stack;\n","var ListCache = require('./_ListCache'),\n    Map = require('./_Map'),\n    MapCache = require('./_MapCache');\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\nmodule.exports = stackSet;\n","/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\nmodule.exports = setCacheAdd;\n","var MapCache = require('./_MapCache'),\n    setCacheAdd = require('./_setCacheAdd'),\n    setCacheHas = require('./_setCacheHas');\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\nmodule.exports = SetCache;\n","/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\nmodule.exports = setCacheHas;\n","/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nmodule.exports = arraySome;\n","/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\nmodule.exports = cacheHas;\n","var SetCache = require('./_SetCache'),\n    arraySome = require('./_arraySome'),\n    cacheHas = require('./_cacheHas');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Check that cyclic values are equal.\n  var arrStacked = stack.get(array);\n  var othStacked = stack.get(other);\n  if (arrStacked && othStacked) {\n    return arrStacked == other && othStacked == array;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\nmodule.exports = equalArrays;\n","var root = require('./_root');\n\n/** Built-in value references. */\nvar Uint8Array = root.Uint8Array;\n\nmodule.exports = Uint8Array;\n","/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\nmodule.exports = mapToArray;\n","/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\nmodule.exports = setToArray;\n","var Symbol = require('./_Symbol'),\n    Uint8Array = require('./_Uint8Array'),\n    eq = require('./eq'),\n    equalArrays = require('./_equalArrays'),\n    mapToArray = require('./_mapToArray'),\n    setToArray = require('./_setToArray');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** `Object#toString` result references. */\nvar boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]';\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\nmodule.exports = equalByTag;\n","/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\nmodule.exports = arrayPush;\n","/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\nmodule.exports = isArray;\n","var arrayPush = require('./_arrayPush'),\n    isArray = require('./isArray');\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\nmodule.exports = baseGetAllKeys;\n","/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\nmodule.exports = arrayFilter;\n","/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\nmodule.exports = stubArray;\n","var arrayFilter = require('./_arrayFilter'),\n    stubArray = require('./stubArray');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols;\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\nmodule.exports = getSymbols;\n","/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\nmodule.exports = baseTimes;\n","/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\nmodule.exports = isObjectLike;\n","var baseGetTag = require('./_baseGetTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]';\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\nmodule.exports = baseIsArguments;\n","var baseIsArguments = require('./_baseIsArguments'),\n    isObjectLike = require('./isObjectLike');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\nmodule.exports = isArguments;\n","/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  var type = typeof value;\n  length = length == null ? MAX_SAFE_INTEGER : length;\n\n  return !!length &&\n    (type == 'number' ||\n      (type != 'symbol' && reIsUint.test(value))) &&\n        (value > -1 && value % 1 == 0 && value < length);\n}\n\nmodule.exports = isIndex;\n","/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\nmodule.exports = isLength;\n","var baseGetTag = require('./_baseGetTag'),\n    isLength = require('./isLength'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\nmodule.exports = baseIsTypedArray;\n","/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\nmodule.exports = baseUnary;\n","var baseIsTypedArray = require('./_baseIsTypedArray'),\n    baseUnary = require('./_baseUnary'),\n    nodeUtil = require('./_nodeUtil');\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\nmodule.exports = isTypedArray;\n","var baseTimes = require('./_baseTimes'),\n    isArguments = require('./isArguments'),\n    isArray = require('./isArray'),\n    isBuffer = require('./isBuffer'),\n    isIndex = require('./_isIndex'),\n    isTypedArray = require('./isTypedArray');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = arrayLikeKeys;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\nmodule.exports = isPrototype;\n","var overArg = require('./_overArg');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeKeys = overArg(Object.keys, Object);\n\nmodule.exports = nativeKeys;\n","/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\nmodule.exports = overArg;\n","var isPrototype = require('./_isPrototype'),\n    nativeKeys = require('./_nativeKeys');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseKeys;\n","var isFunction = require('./isFunction'),\n    isLength = require('./isLength');\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\nmodule.exports = isArrayLike;\n","var arrayLikeKeys = require('./_arrayLikeKeys'),\n    baseKeys = require('./_baseKeys'),\n    isArrayLike = require('./isArrayLike');\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\nmodule.exports = keys;\n","var baseGetAllKeys = require('./_baseGetAllKeys'),\n    getSymbols = require('./_getSymbols'),\n    keys = require('./keys');\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\nmodule.exports = getAllKeys;\n","var getAllKeys = require('./_getAllKeys');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1;\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Check that cyclic values are equal.\n  var objStacked = stack.get(object);\n  var othStacked = stack.get(other);\n  if (objStacked && othStacked) {\n    return objStacked == other && othStacked == object;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\nmodule.exports = equalObjects;\n","var getNative = require('./_getNative'),\n    root = require('./_root');\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView');\n\nmodule.exports = DataView;\n","var getNative = require('./_getNative'),\n    root = require('./_root');\n\n/* Built-in method references that are verified to be native. */\nvar Promise = getNative(root, 'Promise');\n\nmodule.exports = Promise;\n","var getNative = require('./_getNative'),\n    root = require('./_root');\n\n/* Built-in method references that are verified to be native. */\nvar Set = getNative(root, 'Set');\n\nmodule.exports = Set;\n","var getNative = require('./_getNative'),\n    root = require('./_root');\n\n/* Built-in method references that are verified to be native. */\nvar WeakMap = getNative(root, 'WeakMap');\n\nmodule.exports = WeakMap;\n","var DataView = require('./_DataView'),\n    Map = require('./_Map'),\n    Promise = require('./_Promise'),\n    Set = require('./_Set'),\n    WeakMap = require('./_WeakMap'),\n    baseGetTag = require('./_baseGetTag'),\n    toSource = require('./_toSource');\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    setTag = '[object Set]',\n    weakMapTag = '[object WeakMap]';\n\nvar dataViewTag = '[object DataView]';\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\nmodule.exports = getTag;\n","var Stack = require('./_Stack'),\n    equalArrays = require('./_equalArrays'),\n    equalByTag = require('./_equalByTag'),\n    equalObjects = require('./_equalObjects'),\n    getTag = require('./_getTag'),\n    isArray = require('./isArray'),\n    isBuffer = require('./isBuffer'),\n    isTypedArray = require('./isTypedArray');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    objectTag = '[object Object]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\nmodule.exports = baseIsEqualDeep;\n","var baseIsEqualDeep = require('./_baseIsEqualDeep'),\n    isObjectLike = require('./isObjectLike');\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\nmodule.exports = baseIsEqual;\n","var Stack = require('./_Stack'),\n    baseIsEqual = require('./_baseIsEqual');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/**\n * The base implementation of `_.isMatch` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to inspect.\n * @param {Object} source The object of property values to match.\n * @param {Array} matchData The property names, values, and compare flags to match.\n * @param {Function} [customizer] The function to customize comparisons.\n * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n */\nfunction baseIsMatch(object, source, matchData, customizer) {\n  var index = matchData.length,\n      length = index,\n      noCustomizer = !customizer;\n\n  if (object == null) {\n    return !length;\n  }\n  object = Object(object);\n  while (index--) {\n    var data = matchData[index];\n    if ((noCustomizer && data[2])\n          ? data[1] !== object[data[0]]\n          : !(data[0] in object)\n        ) {\n      return false;\n    }\n  }\n  while (++index < length) {\n    data = matchData[index];\n    var key = data[0],\n        objValue = object[key],\n        srcValue = data[1];\n\n    if (noCustomizer && data[2]) {\n      if (objValue === undefined && !(key in object)) {\n        return false;\n      }\n    } else {\n      var stack = new Stack;\n      if (customizer) {\n        var result = customizer(objValue, srcValue, key, object, source, stack);\n      }\n      if (!(result === undefined\n            ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)\n            : result\n          )) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\nmodule.exports = baseIsMatch;\n","var isObject = require('./isObject');\n\n/**\n * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` if suitable for strict\n *  equality comparisons, else `false`.\n */\nfunction isStrictComparable(value) {\n  return value === value && !isObject(value);\n}\n\nmodule.exports = isStrictComparable;\n","var isStrictComparable = require('./_isStrictComparable'),\n    keys = require('./keys');\n\n/**\n * Gets the property names, values, and compare flags of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the match data of `object`.\n */\nfunction getMatchData(object) {\n  var result = keys(object),\n      length = result.length;\n\n  while (length--) {\n    var key = result[length],\n        value = object[key];\n\n    result[length] = [key, value, isStrictComparable(value)];\n  }\n  return result;\n}\n\nmodule.exports = getMatchData;\n","/**\n * A specialized version of `matchesProperty` for source values suitable\n * for strict equality comparisons, i.e. `===`.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction matchesStrictComparable(key, srcValue) {\n  return function(object) {\n    if (object == null) {\n      return false;\n    }\n    return object[key] === srcValue &&\n      (srcValue !== undefined || (key in Object(object)));\n  };\n}\n\nmodule.exports = matchesStrictComparable;\n","var baseIsMatch = require('./_baseIsMatch'),\n    getMatchData = require('./_getMatchData'),\n    matchesStrictComparable = require('./_matchesStrictComparable');\n\n/**\n * The base implementation of `_.matches` which doesn't clone `source`.\n *\n * @private\n * @param {Object} source The object of property values to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction baseMatches(source) {\n  var matchData = getMatchData(source);\n  if (matchData.length == 1 && matchData[0][2]) {\n    return matchesStrictComparable(matchData[0][0], matchData[0][1]);\n  }\n  return function(object) {\n    return object === source || baseIsMatch(object, source, matchData);\n  };\n}\n\nmodule.exports = baseMatches;\n","var baseGetTag = require('./_baseGetTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && baseGetTag(value) == symbolTag);\n}\n\nmodule.exports = isSymbol;\n","var isArray = require('./isArray'),\n    isSymbol = require('./isSymbol');\n\n/** Used to match property names within property paths. */\nvar reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n    reIsPlainProp = /^\\w*$/;\n\n/**\n * Checks if `value` is a property name and not a property path.\n *\n * @private\n * @param {*} value The value to check.\n * @param {Object} [object] The object to query keys on.\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n */\nfunction isKey(value, object) {\n  if (isArray(value)) {\n    return false;\n  }\n  var type = typeof value;\n  if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n      value == null || isSymbol(value)) {\n    return true;\n  }\n  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n    (object != null && value in Object(object));\n}\n\nmodule.exports = isKey;\n","var MapCache = require('./_MapCache');\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided, it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is used as the map cache key. The `func`\n * is invoked with the `this` binding of the memoized function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `clear`, `delete`, `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoized function.\n * @example\n *\n * var object = { 'a': 1, 'b': 2 };\n * var other = { 'c': 3, 'd': 4 };\n *\n * var values = _.memoize(_.values);\n * values(object);\n * // => [1, 2]\n *\n * values(other);\n * // => [3, 4]\n *\n * object.a = 2;\n * values(object);\n * // => [1, 2]\n *\n * // Modify the result cache.\n * values.cache.set(object, ['a', 'b']);\n * values(object);\n * // => ['a', 'b']\n *\n * // Replace `_.memoize.Cache`.\n * _.memoize.Cache = WeakMap;\n */\nfunction memoize(func, resolver) {\n  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var memoized = function() {\n    var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    var result = func.apply(this, args);\n    memoized.cache = cache.set(key, result) || cache;\n    return result;\n  };\n  memoized.cache = new (memoize.Cache || MapCache);\n  return memoized;\n}\n\n// Expose `MapCache`.\nmemoize.Cache = MapCache;\n\nmodule.exports = memoize;\n","var memoizeCapped = require('./_memoizeCapped');\n\n/** Used to match property names within property paths. */\nvar rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar = /\\\\(\\\\)?/g;\n\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\nvar stringToPath = memoizeCapped(function(string) {\n  var result = [];\n  if (string.charCodeAt(0) === 46 /* . */) {\n    result.push('');\n  }\n  string.replace(rePropName, function(match, number, quote, subString) {\n    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));\n  });\n  return result;\n});\n\nmodule.exports = stringToPath;\n","var memoize = require('./memoize');\n\n/** Used as the maximum memoize cache size. */\nvar MAX_MEMOIZE_SIZE = 500;\n\n/**\n * A specialized version of `_.memoize` which clears the memoized function's\n * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n *\n * @private\n * @param {Function} func The function to have its output memoized.\n * @returns {Function} Returns the new memoized function.\n */\nfunction memoizeCapped(func) {\n  var result = memoize(func, function(key) {\n    if (cache.size === MAX_MEMOIZE_SIZE) {\n      cache.clear();\n    }\n    return key;\n  });\n\n  var cache = result.cache;\n  return result;\n}\n\nmodule.exports = memoizeCapped;\n","var Symbol = require('./_Symbol'),\n    arrayMap = require('./_arrayMap'),\n    isArray = require('./isArray'),\n    isSymbol = require('./isSymbol');\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isArray(value)) {\n    // Recursively convert values (susceptible to call stack limits).\n    return arrayMap(value, baseToString) + '';\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\nmodule.exports = baseToString;\n","var baseToString = require('./_baseToString');\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\nmodule.exports = toString;\n","var isArray = require('./isArray'),\n    isKey = require('./_isKey'),\n    stringToPath = require('./_stringToPath'),\n    toString = require('./toString');\n\n/**\n * Casts `value` to a path array if it's not one.\n *\n * @private\n * @param {*} value The value to inspect.\n * @param {Object} [object] The object to query keys on.\n * @returns {Array} Returns the cast property path array.\n */\nfunction castPath(value, object) {\n  if (isArray(value)) {\n    return value;\n  }\n  return isKey(value, object) ? [value] : stringToPath(toString(value));\n}\n\nmodule.exports = castPath;\n","var isSymbol = require('./isSymbol');\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */\nfunction toKey(value) {\n  if (typeof value == 'string' || isSymbol(value)) {\n    return value;\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\nmodule.exports = toKey;\n","var castPath = require('./_castPath'),\n    toKey = require('./_toKey');\n\n/**\n * The base implementation of `_.get` without support for default values.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @returns {*} Returns the resolved value.\n */\nfunction baseGet(object, path) {\n  path = castPath(path, object);\n\n  var index = 0,\n      length = path.length;\n\n  while (object != null && index < length) {\n    object = object[toKey(path[index++])];\n  }\n  return (index && index == length) ? object : undefined;\n}\n\nmodule.exports = baseGet;\n","var baseGet = require('./_baseGet');\n\n/**\n * Gets the value at `path` of `object`. If the resolved value is\n * `undefined`, the `defaultValue` is returned in its place.\n *\n * @static\n * @memberOf _\n * @since 3.7.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n * @returns {*} Returns the resolved value.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n *\n * _.get(object, 'a[0].b.c');\n * // => 3\n *\n * _.get(object, ['a', '0', 'b', 'c']);\n * // => 3\n *\n * _.get(object, 'a.b.c', 'default');\n * // => 'default'\n */\nfunction get(object, path, defaultValue) {\n  var result = object == null ? undefined : baseGet(object, path);\n  return result === undefined ? defaultValue : result;\n}\n\nmodule.exports = get;\n","/**\n * The base implementation of `_.hasIn` without support for deep paths.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {Array|string} key The key to check.\n * @returns {boolean} Returns `true` if `key` exists, else `false`.\n */\nfunction baseHasIn(object, key) {\n  return object != null && key in Object(object);\n}\n\nmodule.exports = baseHasIn;\n","var castPath = require('./_castPath'),\n    isArguments = require('./isArguments'),\n    isArray = require('./isArray'),\n    isIndex = require('./_isIndex'),\n    isLength = require('./isLength'),\n    toKey = require('./_toKey');\n\n/**\n * Checks if `path` exists on `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @param {Function} hasFunc The function to check properties.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n */\nfunction hasPath(object, path, hasFunc) {\n  path = castPath(path, object);\n\n  var index = -1,\n      length = path.length,\n      result = false;\n\n  while (++index < length) {\n    var key = toKey(path[index]);\n    if (!(result = object != null && hasFunc(object, key))) {\n      break;\n    }\n    object = object[key];\n  }\n  if (result || ++index != length) {\n    return result;\n  }\n  length = object == null ? 0 : object.length;\n  return !!length && isLength(length) && isIndex(key, length) &&\n    (isArray(object) || isArguments(object));\n}\n\nmodule.exports = hasPath;\n","var baseHasIn = require('./_baseHasIn'),\n    hasPath = require('./_hasPath');\n\n/**\n * Checks if `path` is a direct or inherited property of `object`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n * @example\n *\n * var object = _.create({ 'a': _.create({ 'b': 2 }) });\n *\n * _.hasIn(object, 'a');\n * // => true\n *\n * _.hasIn(object, 'a.b');\n * // => true\n *\n * _.hasIn(object, ['a', 'b']);\n * // => true\n *\n * _.hasIn(object, 'b');\n * // => false\n */\nfunction hasIn(object, path) {\n  return object != null && hasPath(object, path, baseHasIn);\n}\n\nmodule.exports = hasIn;\n","var baseIsEqual = require('./_baseIsEqual'),\n    get = require('./get'),\n    hasIn = require('./hasIn'),\n    isKey = require('./_isKey'),\n    isStrictComparable = require('./_isStrictComparable'),\n    matchesStrictComparable = require('./_matchesStrictComparable'),\n    toKey = require('./_toKey');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/**\n * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\n *\n * @private\n * @param {string} path The path of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction baseMatchesProperty(path, srcValue) {\n  if (isKey(path) && isStrictComparable(srcValue)) {\n    return matchesStrictComparable(toKey(path), srcValue);\n  }\n  return function(object) {\n    var objValue = get(object, path);\n    return (objValue === undefined && objValue === srcValue)\n      ? hasIn(object, path)\n      : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);\n  };\n}\n\nmodule.exports = baseMatchesProperty;\n","/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\nmodule.exports = identity;\n","/**\n * The base implementation of `_.property` without support for deep paths.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @returns {Function} Returns the new accessor function.\n */\nfunction baseProperty(key) {\n  return function(object) {\n    return object == null ? undefined : object[key];\n  };\n}\n\nmodule.exports = baseProperty;\n","var baseGet = require('./_baseGet');\n\n/**\n * A specialized version of `baseProperty` which supports deep paths.\n *\n * @private\n * @param {Array|string} path The path of the property to get.\n * @returns {Function} Returns the new accessor function.\n */\nfunction basePropertyDeep(path) {\n  return function(object) {\n    return baseGet(object, path);\n  };\n}\n\nmodule.exports = basePropertyDeep;\n","var baseProperty = require('./_baseProperty'),\n    basePropertyDeep = require('./_basePropertyDeep'),\n    isKey = require('./_isKey'),\n    toKey = require('./_toKey');\n\n/**\n * Creates a function that returns the value at `path` of a given object.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {Array|string} path The path of the property to get.\n * @returns {Function} Returns the new accessor function.\n * @example\n *\n * var objects = [\n *   { 'a': { 'b': 2 } },\n *   { 'a': { 'b': 1 } }\n * ];\n *\n * _.map(objects, _.property('a.b'));\n * // => [2, 1]\n *\n * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');\n * // => [1, 2]\n */\nfunction property(path) {\n  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);\n}\n\nmodule.exports = property;\n","var baseMatches = require('./_baseMatches'),\n    baseMatchesProperty = require('./_baseMatchesProperty'),\n    identity = require('./identity'),\n    isArray = require('./isArray'),\n    property = require('./property');\n\n/**\n * The base implementation of `_.iteratee`.\n *\n * @private\n * @param {*} [value=_.identity] The value to convert to an iteratee.\n * @returns {Function} Returns the iteratee.\n */\nfunction baseIteratee(value) {\n  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.\n  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.\n  if (typeof value == 'function') {\n    return value;\n  }\n  if (value == null) {\n    return identity;\n  }\n  if (typeof value == 'object') {\n    return isArray(value)\n      ? baseMatchesProperty(value[0], value[1])\n      : baseMatches(value);\n  }\n  return property(value);\n}\n\nmodule.exports = baseIteratee;\n","var createBaseFor = require('./_createBaseFor');\n\n/**\n * The base implementation of `baseForOwn` which iterates over `object`\n * properties returned by `keysFunc` and invokes `iteratee` for each property.\n * Iteratee functions may exit iteration early by explicitly returning `false`.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @returns {Object} Returns `object`.\n */\nvar baseFor = createBaseFor();\n\nmodule.exports = baseFor;\n","/**\n * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n *\n * @private\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseFor(fromRight) {\n  return function(object, iteratee, keysFunc) {\n    var index = -1,\n        iterable = Object(object),\n        props = keysFunc(object),\n        length = props.length;\n\n    while (length--) {\n      var key = props[fromRight ? length : ++index];\n      if (iteratee(iterable[key], key, iterable) === false) {\n        break;\n      }\n    }\n    return object;\n  };\n}\n\nmodule.exports = createBaseFor;\n","var baseForOwn = require('./_baseForOwn'),\n    createBaseEach = require('./_createBaseEach');\n\n/**\n * The base implementation of `_.forEach` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array|Object} Returns `collection`.\n */\nvar baseEach = createBaseEach(baseForOwn);\n\nmodule.exports = baseEach;\n","var isArrayLike = require('./isArrayLike');\n\n/**\n * Creates a `baseEach` or `baseEachRight` function.\n *\n * @private\n * @param {Function} eachFunc The function to iterate over a collection.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseEach(eachFunc, fromRight) {\n  return function(collection, iteratee) {\n    if (collection == null) {\n      return collection;\n    }\n    if (!isArrayLike(collection)) {\n      return eachFunc(collection, iteratee);\n    }\n    var length = collection.length,\n        index = fromRight ? length : -1,\n        iterable = Object(collection);\n\n    while ((fromRight ? index-- : ++index < length)) {\n      if (iteratee(iterable[index], index, iterable) === false) {\n        break;\n      }\n    }\n    return collection;\n  };\n}\n\nmodule.exports = createBaseEach;\n","var baseFor = require('./_baseFor'),\n    keys = require('./keys');\n\n/**\n * The base implementation of `_.forOwn` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Object} Returns `object`.\n */\nfunction baseForOwn(object, iteratee) {\n  return object && baseFor(object, iteratee, keys);\n}\n\nmodule.exports = baseForOwn;\n","var baseEach = require('./_baseEach'),\n    isArrayLike = require('./isArrayLike');\n\n/**\n * The base implementation of `_.map` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction baseMap(collection, iteratee) {\n  var index = -1,\n      result = isArrayLike(collection) ? Array(collection.length) : [];\n\n  baseEach(collection, function(value, key, collection) {\n    result[++index] = iteratee(value, key, collection);\n  });\n  return result;\n}\n\nmodule.exports = baseMap;\n","var arrayMap = require('./_arrayMap'),\n    baseIteratee = require('./_baseIteratee'),\n    baseMap = require('./_baseMap'),\n    isArray = require('./isArray');\n\n/**\n * Creates an array of values by running each element in `collection` thru\n * `iteratee`. The iteratee is invoked with three arguments:\n * (value, index|key, collection).\n *\n * Many lodash methods are guarded to work as iteratees for methods like\n * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.\n *\n * The guarded methods are:\n * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,\n * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,\n * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,\n * `template`, `trim`, `trimEnd`, `trimStart`, and `words`\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n * @example\n *\n * function square(n) {\n *   return n * n;\n * }\n *\n * _.map([4, 8], square);\n * // => [16, 64]\n *\n * _.map({ 'a': 4, 'b': 8 }, square);\n * // => [16, 64] (iteration order is not guaranteed)\n *\n * var users = [\n *   { 'user': 'barney' },\n *   { 'user': 'fred' }\n * ];\n *\n * // The `_.property` iteratee shorthand.\n * _.map(users, 'user');\n * // => ['barney', 'fred']\n */\nfunction map(collection, iteratee) {\n  var func = isArray(collection) ? arrayMap : baseMap;\n  return func(collection, baseIteratee(iteratee, 3));\n}\n\nmodule.exports = map;\n","const API_URL_BASE = process.env.API_URL_BASE || \"http://localhost:3000\";\nimport { rtdb } from \"./rtdb\";\nimport { ref, onValue } from \"firebase/database\";\nimport { Storage } from \"./types/storage\";\nimport { Router } from \"@vaadin/router\";\nimport map from \"lodash/map\";\nexport const state = {\n  data: {\n    userId: \"\",\n    userName: \"\",\n    email: \"\",\n    messages: [],\n    rtdbRoomId: \"\",\n    roomId: \"\",\n  },\n  listeners: [],\n  storage: new Storage(),\n  init() {\n    const cs = state.getState();\n    Router.go(location.pathname);\n    // console.log(\"se leyo el state del storage\", cs);\n    this.setState({ ...this.data, ...cs });\n    if (cs.rtdbRoomId && cs.userId) {\n      this.accessRoom();\n      Router.go(\"/chat\");\n    }\n  },\n  getState() {\n    const data = this.storage.get(\"chat-state\");\n    return data;\n  },\n  setState(newState) {\n    // console.log(\"soy el state eh cambiado: \", newState);\n    this.data = newState;\n    this.storage.save(\"chat-state\", this.data);\n    for (const cb of this.listeners) {\n      cb();\n    }\n  },\n  setRoomId(roomId: string) {\n    const cs = this.getState();\n    cs.roomId = roomId;\n    this.setState(cs);\n  },\n  subscribe(callback) {\n    this.listeners.push(callback);\n  },\n  setNombre(nombre) {\n    const lastState = this.getState();\n    lastState.nombre = nombre;\n    this.storage.save(\"nombre\", { nombre });\n    this.setState(lastState);\n  },\n  getName() {\n    const lastState = this.getState();\n    return lastState.nombre;\n  },\n  async pushMessage(message: string) {\n    const cs = this.getState();\n    if (!cs.roomId) {\n      // console.error(\"falta roomId\");\n      return;\n    }\n\n    const res = await fetch(`${API_URL_BASE}/rooms/${cs.roomId}/messages`, {\n      method: \"post\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ userId: cs.userId, message: message }),\n    });\n    const data = await res.json();\n    if (data.ok) {\n      cs.messages.push({ from: cs.name, message: message });\n      this.setState(cs);\n    } else {\n      // console.error(data);\n    }\n  },\n  setEmailAndName(email: string, name: string) {\n    const cs = this.getState();\n    cs.name = name;\n    cs.email = email;\n    this.setState(cs);\n  },\n  // se ejecuta cuando se presiona comenzar\n  //primero hay que setear los datos\n  async signIn(cb) {\n    const cs = this.getState();\n    if (cs.email) {\n      const response = await fetch(`${API_URL_BASE}/users/auth`, {\n        method: \"post\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ email: cs.email }),\n      });\n      const data = await response.json();\n      if (!data.ok) {\n        cb(data);\n        return;\n      }\n      cs.userId = data.id;\n      this.setState(cs);\n      cb();\n    } else {\n      cb({ ok: false, message: \"falta email\" });\n    }\n  },\n  // genera un nuevo room\n  async askNewRoom() {\n    const cs = this.getState();\n    if (!cs.userId) {\n      // console.error(\"no hay userId en el state\");\n      return;\n    }\n    const res = await fetch(API_URL_BASE + \"/rooms\", {\n      method: \"post\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ userId: cs.userId }),\n    });\n    const data = await res.json();\n    // console.log(\" data que llega en ask new room\", data);\n    cs.roomId = data.roomId;\n    this.setState(cs);\n  },\n  //accede, obtiene el rtdbRoomId\n  async accessRoom() {\n    const cs = this.getState();\n    const res = await fetch(\n      `${API_URL_BASE}/rooms/${cs.roomId}?userId=${cs.userId}`,\n      {\n        method: \"get\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      }\n    );\n    const data = await res.json();\n    // console.log(\"se obtuvo la data  del server\", data);\n    cs.rtdbRoomId = data.rtdbRoomId;\n    this.setState(cs);\n    this.listenRoom();\n  },\n  // se queda escuchando a los cambios de la rtdb\n  listenRoom() {\n    const cs = this.getState();\n    const chat = ref(rtdb, `/rooms/${cs.rtdbRoomId}`);\n    onValue(chat, (snapShot) => {\n      const cs = this.getState();\n      const messagesFromServer = snapShot.val();\n      const messagesList = map(messagesFromServer.messages);\n      cs.messages = messagesList;\n      this.setState(cs);\n    });\n  },\n  async createUser(userData: any) {\n    const res = await fetch(`${API_URL_BASE}/users/signup`, {\n      method: \"post\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(userData),\n    });\n    const data = await res.json();\n  },\n};\n","export class Storage {\n  save(key: string, data: {}) {\n    localStorage.setItem(key, JSON.stringify(data));\n  }\n\n  get(key: string): { data: {} } {\n    const data: string = localStorage.getItem(key) || \"undefined\";\n    if (data != \"undefined\") {\n      return JSON.parse(data);\n    }\n    return { data: {} };\n  }\n}\n","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"hvwKx\")).toString();","import { Message } from \"../../types/message\";\nimport { state } from \"../../state\";\nconst sendImg = require(\"url:./send.svg\");\nclass Chat extends HTMLElement {\n  messages: Message[];\n  shadow: ShadowRoot;\n  constructor() {\n    super();\n    this.messages = [];\n    this.shadow = this.attachShadow({ mode: \"open\" });\n    this.render();\n  }\n\n  connectedCallback() {\n    this.render();\n    state.subscribe(() => {\n      const cs = state.getState();\n      this.messages = cs.messages;\n      this.render();\n    });\n  }\n  addListeners() {\n    const form = this.shadow.querySelector(\".submit-message\");\n    form?.addEventListener(\"submit\", (e) => {\n      e.preventDefault();\n      const target = e.target as any;\n      const newMessage = target[\"new-message\"].value;\n      state.pushMessage(newMessage);\n    });\n  }\n\n  render() {\n    const style = document.createElement(\"style\");\n    style.innerHTML = `\n      .container {\n        box-sizing:border-box;\n        height:100vh;\n        display:grid;\n        grid-template-columns: 0.5fr 6fr 0.5fr;\n        grid-template-rows: 60px auto ;\n\n        grid-template-areas: \n          \"header header header\"\n          \". chat .\"\n      }\n      .chat {\n        box-sizing:border-box;\n        grid-area:chat;\n        display:flex;\n        margin-top:20px;\n        height:90%;\n        max-height:90%;\n        flex-direction:column;\n        justify-content:space-between;\n        border:solid 4px var(--grey);\n        border-radius:5px;\n        padding:15px;\n        width:675px;\n        max-width:650px;\n        min-width:300px;\n        justify-self:center;\n\n      }\n      x-header {\n        grid-area:header;\n      }\n      .button {\n        box-sizing:border-box;\n        padding:0;\n        height: 55px;\n        min-width:55px;\n        border-radius:100%;\n        border:none;\n        background-color: var(--grey);\n        cursor:pointer;\n      }\n      .submit-message {\n        display:flex;\n        align-items: center;\n        justify-content:center;\n        gap:30px;\n        border-top:2px solid var(--grey);\n        padding-top:15px;\n      }\n      .submit-message > input {\n        width:100%;\n        border-radius:4px;\n        border:none;\n        height:35px;\n        font-size:22px;\n      }\n      .msg-container {\n        height:100%;\n        max-height:800px;\n        display:flex;\n        flex-direction:column;\n        gap:15px;\n        overflow: scroll;\n        overflow-x: hidden;\n        padding-right: 15px;\n        margin-bottom:20px;\n      }\n      #style-1::-webkit-scrollbar-track\n      {\n        -webkit-box-shadow: inset 0 0 6px rgba(0,0,0,0.3);\n        border-radius: 10px;\n        background-color: #000;\n      }\n\n      #style-1::-webkit-scrollbar\n      {\n        width: 12px;\n        background-color: #F5F5F5;\n      }\n\n      #style-1::-webkit-scrollbar-thumb\n      {\n        border-radius: 10px;\n        -webkit-box-shadow: inset 0 0 6px rgba(0,0,0,.3);\n        background-color: #555;\n      }\n    `;\n\n    this.shadow.innerHTML = `\n      <div class=\"container\">\n        <x-header></x-header>\n        <div class=\"chat\">\n          <div class=\"msg-container\" id=\"style-1\">\n            ${this.messages\n              .map((m) => {\n                return `\n                  <x-message\n                    from=\"${m.from}\"\n                    message=\"${m.message}\"\n                  > \n                  </x-message>`;\n              })\n              .join(\"\")}\n          </div>\n          <form class=\"submit-message\">\n            <input type=\"text\" name=\"new-message\">\n            <button class=\"button\">\n              <img src=\"${sendImg}\"/>\n            </button>\n          </form>\n        </div>\n      </div>\n    `;\n    this.shadow.appendChild(style);\n    this.addListeners();\n  }\n}\ncustomElements.define(\"chat-page\", Chat);\n","import { Router } from \"@vaadin/router\";\nimport { state } from \"../../state\";\nclass HomePage extends HTMLElement {\n  shadow: ShadowRoot;\n  constructor() {\n    super();\n    this.shadow = this.attachShadow({ mode: \"open\" });\n    this.render();\n  }\n\n  addListeners() {\n    const form: any = <HTMLElement>this.shadow.querySelector(\".form\");\n    const select = <HTMLSelectElement>this.shadow.querySelector(\".select\");\n\n    const button = this.shadow.querySelector(\".btn-comenzar\");\n\n    button?.addEventListener(\"click\", (e) => {\n      e.preventDefault();\n      const name: string = form.name.value;\n      const email: string = form.email.value;\n      state.setEmailAndName(email, name);\n      state.signIn(async (err: any) => {\n        console.log(\"entro a la callback\");\n        if (!err) {\n          const opcion = select.value;\n          if (opcion === \"nuevo\") {\n            console.log(\"se selecciono un room nuevo\");\n            await state.askNewRoom();\n          }\n          if (opcion === \"existente\") {\n            const roomIdInput = <HTMLInputElement>(\n              this.shadow.querySelector(\".room-id\")\n            );\n            const roomId = roomIdInput.value;\n            state.setRoomId(roomId);\n          }\n          await state.accessRoom();\n          Router.go(\"/chat\");\n        } else {\n          console.error(err);\n        }\n      });\n    });\n\n    select.addEventListener(\"change\", (evt: any) => {\n      const { value } = evt.target;\n      const roomIdInput = <HTMLInputElement>(\n        this.shadow.querySelector(\".room-id\")\n      );\n      if (value === \"nuevo\") {\n        roomIdInput.disabled = true;\n      } else if (value === \"existente\") {\n        roomIdInput.disabled = false;\n      }\n    });\n    const btnRegister = <HTMLElement>this.shadow.querySelector(\".btn-register\");\n    btnRegister.addEventListener(\"click\", (evt) => {\n      evt.preventDefault();\n      Router.go(\"/signup\");\n    });\n  }\n\n  connectedCallback() {\n    this.render();\n  }\n\n  render() {\n    const style = document.createElement(\"style\");\n    style.innerHTML = `\n      .container {\n        height:100vh;\n        display:grid;\n        grid-template-columns: 1fr 2fr 1fr;\n        grid-template-rows: 60px auto ;\n        grid-template-areas: \n          \"header header header\"\n          \". form .\"\n      }\n      .form {\n        color:var(--orange);\n        height:auto;\n        display:flex;\n        flex-direction:column;\n        align-items:center;\n        justify-content:center;\n        gap:10px;\n        grid-area:form;\n        align-self:center;\n      }\n      .form > input {\n        box-sizing:border-box;\n        width:312px;\n        height:55px;\n        grid-area:form;\n        border-radius:4px;\n        border:solid 2px black;\n\n      }\n      .label {\n        font-size:22px;\n        text-align:left;\n        width:312px;\n        margin:0;\n      }\n\n      .header{\n        grid-area:header;\n      }\n\n      .select{\n        width:312px;\n        height:55px;\n        font-size:22px;\n        border-radius:4px;\n        border:solid 2px black;\n      }\n      .btn {\n        margin-top:20px;\n      }\n    `;\n    this.shadow.innerHTML = `\n    <div class=\"container\">\n      <x-header class=\"header\"></x-header>\n      <form class=\"form\">\n        <x-btn text=\"Registrarse\" class=\"btn-register\"></x-btn>\n        <label class=\"label\" for=\"email\" >E-mail</label>\n        <input type=\"email\" name=\"email\" />\n\n        <label for=\"name\" class=\"label\">tu nombre</label>\n        <input type=\"text\" name=\"name\">\n\n        <label class=\"label\" for=\"opciones\">Room:</label>\n        <select name=\"opciones\" class=\"select\">\n          <option value=\"nuevo\">Nuevo Room</option>\n          <option value=\"existente\">Room Existente</option>\n        </select>\n\n        <label class=\"label\" for=\"room-id\">Room-Id:</label>\n        <input class=\"room-id\" type=\"text\" name=\"room-id\" disabled=\"true\" />\n\n        <x-btn text=\"Comenzar\" class=\"btn-comenzar\"></x-btn>\n      </form>\n    <div>\n    `;\n    this.addListeners();\n    this.shadow.appendChild(style);\n  }\n}\ncustomElements.define(\"home-page\", HomePage);\n","import { Router } from \"@vaadin/router\";\nimport { state } from \"../../state\";\nclass SignUpPage extends HTMLElement {\n  shadow: ShadowRoot;\n  constructor() {\n    super();\n    this.shadow = this.attachShadow({ mode: \"open\" });\n    this.render();\n  }\n  addListeners() {\n    const registerBtn = <HTMLElement>this.shadow.querySelector(\".register\");\n    registerBtn.addEventListener(\"click\", (evt) => {\n      evt.preventDefault();\n      type FormData = {\n        name: string;\n        email: string;\n      };\n      const form = <HTMLFormElement>this.shadow.querySelector(\".form\");\n      const data = new FormData(form);\n      const formData: FormData = { name: \"\", email: \"\" };\n      for (const [name, value] of data) {\n        formData[name] = value;\n      }\n      const validEmail = this.validateEmail(formData.email);\n      const validName = this.validateName(formData.name);\n      if (validEmail && validName) {\n        console.log(\"datos validos\");\n        state.createUser(formData);\n        alert(\"usuario creado con éxito\");\n        Router.go(\"/\");\n      } else {\n        if (validEmail) {\n          console.error(\"nombre menor a 4 caracteres\");\n        } else {\n          console.error(\"email inválido\");\n        }\n      }\n    });\n\n    const comeBackBtn = <HTMLElement>this.shadow.querySelector(\".btn-volver\");\n    comeBackBtn.addEventListener(\"click\", (evt) => {\n      evt.preventDefault();\n      Router.go(\"/\");\n    });\n  }\n  validateEmail(mail) {\n    if (/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/.test(mail)) {\n      return true;\n    }\n    return false;\n  }\n  validateName(name: string): boolean {\n    return name.length >= 4 ? true : false;\n  }\n  render() {\n    const style = document.createElement(\"style\");\n    style.innerHTML = `\n      .container {\n        height:100vh;\n        display:grid;\n        grid-template-columns: 1fr 2fr 1fr;\n        grid-template-rows: 60px auto ;\n        grid-template-areas: \n          \"header header header\"\n          \". form .\"\n      }\n      .form {\n        color:var(--orange);\n        height:auto;\n        display:flex;\n        flex-direction:column;\n        align-items:center;\n        justify-content:center;\n        gap:10px;\n        grid-area:form;\n        align-self:center;\n      }\n      .form > input {\n        box-sizing:border-box;\n        width:312px;\n        height:55px;\n        grid-area:form;\n        border-radius:4px;\n        border:solid 2px black;\n\n      }\n      .label {\n        font-size:22px;\n        text-align:left;\n        width:312px;\n        margin:0;\n      }\n\n      .header{\n        grid-area:header;\n      }\n\n      .select{\n        width:312px;\n        height:55px;\n        font-size:22px;\n        border-radius:4px;\n        border:solid 2px black;\n      }\n      .register {\n        margin-top:20px;\n      }\n      .btn-volver {\n        margin-bottom:20px;\n      }\n    `;\n    this.shadow.innerHTML = `\n    <div class=\"container\">\n      <x-header class=\"header\"></x-header>\n      <form class=\"form\">\n        <x-btn text=\"Volver\" class=\"btn-volver\"></x-btn>\n\n        <label class=\"label\" for=\"email\" >E-mail</label>\n        <input type=\"email\" name=\"email\" required/>\n\n        <label for=\"name\" class=\"label\" required>tu nombre</label>\n        <input type=\"text\" name=\"name\" required>\n\n        <x-btn text=\"Registrarse\" class=\"register\"></x-btn>\n      </form>\n    <div>\n    `;\n    this.addListeners();\n    this.shadow.appendChild(style);\n  }\n}\ncustomElements.define(\"sign-up\", SignUpPage);\n","import { Router } from \"@vaadin/router\";\nconst router = new Router(document.getElementById(\"root\"));\nrouter.setRoutes([\n  { path: \"/\", component: \"home-page\" },\n  { path: \"/chat\", component: \"chat-page\" },\n  { path: \"/signup\", component: \"sign-up\" },\n]);\n\nexport { router };\n","// 'path' module extracted from Node.js v8.11.1 (only the posix part)\n// transplited with Babel\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError('Path must be a string. Received ' + JSON.stringify(path));\n  }\n}\n\n// Resolves . and .. elements in a path with directory names\nfunction normalizeStringPosix(path, allowAboveRoot) {\n  var res = '';\n  var lastSegmentLength = 0;\n  var lastSlash = -1;\n  var dots = 0;\n  var code;\n  for (var i = 0; i <= path.length; ++i) {\n    if (i < path.length)\n      code = path.charCodeAt(i);\n    else if (code === 47 /*/*/)\n      break;\n    else\n      code = 47 /*/*/;\n    if (code === 47 /*/*/) {\n      if (lastSlash === i - 1 || dots === 1) {\n        // NOOP\n      } else if (lastSlash !== i - 1 && dots === 2) {\n        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 /*.*/ || res.charCodeAt(res.length - 2) !== 46 /*.*/) {\n          if (res.length > 2) {\n            var lastSlashIndex = res.lastIndexOf('/');\n            if (lastSlashIndex !== res.length - 1) {\n              if (lastSlashIndex === -1) {\n                res = '';\n                lastSegmentLength = 0;\n              } else {\n                res = res.slice(0, lastSlashIndex);\n                lastSegmentLength = res.length - 1 - res.lastIndexOf('/');\n              }\n              lastSlash = i;\n              dots = 0;\n              continue;\n            }\n          } else if (res.length === 2 || res.length === 1) {\n            res = '';\n            lastSegmentLength = 0;\n            lastSlash = i;\n            dots = 0;\n            continue;\n          }\n        }\n        if (allowAboveRoot) {\n          if (res.length > 0)\n            res += '/..';\n          else\n            res = '..';\n          lastSegmentLength = 2;\n        }\n      } else {\n        if (res.length > 0)\n          res += '/' + path.slice(lastSlash + 1, i);\n        else\n          res = path.slice(lastSlash + 1, i);\n        lastSegmentLength = i - lastSlash - 1;\n      }\n      lastSlash = i;\n      dots = 0;\n    } else if (code === 46 /*.*/ && dots !== -1) {\n      ++dots;\n    } else {\n      dots = -1;\n    }\n  }\n  return res;\n}\n\nfunction _format(sep, pathObject) {\n  var dir = pathObject.dir || pathObject.root;\n  var base = pathObject.base || (pathObject.name || '') + (pathObject.ext || '');\n  if (!dir) {\n    return base;\n  }\n  if (dir === pathObject.root) {\n    return dir + base;\n  }\n  return dir + sep + base;\n}\n\nvar posix = {\n  // path.resolve([from ...], to)\n  resolve: function resolve() {\n    var resolvedPath = '';\n    var resolvedAbsolute = false;\n    var cwd;\n\n    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n      var path;\n      if (i >= 0)\n        path = arguments[i];\n      else {\n        if (cwd === undefined)\n          cwd = process.cwd();\n        path = cwd;\n      }\n\n      assertPath(path);\n\n      // Skip empty entries\n      if (path.length === 0) {\n        continue;\n      }\n\n      resolvedPath = path + '/' + resolvedPath;\n      resolvedAbsolute = path.charCodeAt(0) === 47 /*/*/;\n    }\n\n    // At this point the path should be resolved to a full absolute path, but\n    // handle relative paths to be safe (might happen when process.cwd() fails)\n\n    // Normalize the path\n    resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);\n\n    if (resolvedAbsolute) {\n      if (resolvedPath.length > 0)\n        return '/' + resolvedPath;\n      else\n        return '/';\n    } else if (resolvedPath.length > 0) {\n      return resolvedPath;\n    } else {\n      return '.';\n    }\n  },\n\n  normalize: function normalize(path) {\n    assertPath(path);\n\n    if (path.length === 0) return '.';\n\n    var isAbsolute = path.charCodeAt(0) === 47 /*/*/;\n    var trailingSeparator = path.charCodeAt(path.length - 1) === 47 /*/*/;\n\n    // Normalize the path\n    path = normalizeStringPosix(path, !isAbsolute);\n\n    if (path.length === 0 && !isAbsolute) path = '.';\n    if (path.length > 0 && trailingSeparator) path += '/';\n\n    if (isAbsolute) return '/' + path;\n    return path;\n  },\n\n  isAbsolute: function isAbsolute(path) {\n    assertPath(path);\n    return path.length > 0 && path.charCodeAt(0) === 47 /*/*/;\n  },\n\n  join: function join() {\n    if (arguments.length === 0)\n      return '.';\n    var joined;\n    for (var i = 0; i < arguments.length; ++i) {\n      var arg = arguments[i];\n      assertPath(arg);\n      if (arg.length > 0) {\n        if (joined === undefined)\n          joined = arg;\n        else\n          joined += '/' + arg;\n      }\n    }\n    if (joined === undefined)\n      return '.';\n    return posix.normalize(joined);\n  },\n\n  relative: function relative(from, to) {\n    assertPath(from);\n    assertPath(to);\n\n    if (from === to) return '';\n\n    from = posix.resolve(from);\n    to = posix.resolve(to);\n\n    if (from === to) return '';\n\n    // Trim any leading backslashes\n    var fromStart = 1;\n    for (; fromStart < from.length; ++fromStart) {\n      if (from.charCodeAt(fromStart) !== 47 /*/*/)\n        break;\n    }\n    var fromEnd = from.length;\n    var fromLen = fromEnd - fromStart;\n\n    // Trim any leading backslashes\n    var toStart = 1;\n    for (; toStart < to.length; ++toStart) {\n      if (to.charCodeAt(toStart) !== 47 /*/*/)\n        break;\n    }\n    var toEnd = to.length;\n    var toLen = toEnd - toStart;\n\n    // Compare paths to find the longest common path from root\n    var length = fromLen < toLen ? fromLen : toLen;\n    var lastCommonSep = -1;\n    var i = 0;\n    for (; i <= length; ++i) {\n      if (i === length) {\n        if (toLen > length) {\n          if (to.charCodeAt(toStart + i) === 47 /*/*/) {\n            // We get here if `from` is the exact base path for `to`.\n            // For example: from='/foo/bar'; to='/foo/bar/baz'\n            return to.slice(toStart + i + 1);\n          } else if (i === 0) {\n            // We get here if `from` is the root\n            // For example: from='/'; to='/foo'\n            return to.slice(toStart + i);\n          }\n        } else if (fromLen > length) {\n          if (from.charCodeAt(fromStart + i) === 47 /*/*/) {\n            // We get here if `to` is the exact base path for `from`.\n            // For example: from='/foo/bar/baz'; to='/foo/bar'\n            lastCommonSep = i;\n          } else if (i === 0) {\n            // We get here if `to` is the root.\n            // For example: from='/foo'; to='/'\n            lastCommonSep = 0;\n          }\n        }\n        break;\n      }\n      var fromCode = from.charCodeAt(fromStart + i);\n      var toCode = to.charCodeAt(toStart + i);\n      if (fromCode !== toCode)\n        break;\n      else if (fromCode === 47 /*/*/)\n        lastCommonSep = i;\n    }\n\n    var out = '';\n    // Generate the relative path based on the path difference between `to`\n    // and `from`\n    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\n      if (i === fromEnd || from.charCodeAt(i) === 47 /*/*/) {\n        if (out.length === 0)\n          out += '..';\n        else\n          out += '/..';\n      }\n    }\n\n    // Lastly, append the rest of the destination (`to`) path that comes after\n    // the common path parts\n    if (out.length > 0)\n      return out + to.slice(toStart + lastCommonSep);\n    else {\n      toStart += lastCommonSep;\n      if (to.charCodeAt(toStart) === 47 /*/*/)\n        ++toStart;\n      return to.slice(toStart);\n    }\n  },\n\n  _makeLong: function _makeLong(path) {\n    return path;\n  },\n\n  dirname: function dirname(path) {\n    assertPath(path);\n    if (path.length === 0) return '.';\n    var code = path.charCodeAt(0);\n    var hasRoot = code === 47 /*/*/;\n    var end = -1;\n    var matchedSlash = true;\n    for (var i = path.length - 1; i >= 1; --i) {\n      code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          if (!matchedSlash) {\n            end = i;\n            break;\n          }\n        } else {\n        // We saw the first non-path separator\n        matchedSlash = false;\n      }\n    }\n\n    if (end === -1) return hasRoot ? '/' : '.';\n    if (hasRoot && end === 1) return '//';\n    return path.slice(0, end);\n  },\n\n  basename: function basename(path, ext) {\n    if (ext !== undefined && typeof ext !== 'string') throw new TypeError('\"ext\" argument must be a string');\n    assertPath(path);\n\n    var start = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i;\n\n    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {\n      if (ext.length === path.length && ext === path) return '';\n      var extIdx = ext.length - 1;\n      var firstNonSlashEnd = -1;\n      for (i = path.length - 1; i >= 0; --i) {\n        var code = path.charCodeAt(i);\n        if (code === 47 /*/*/) {\n            // If we reached a path separator that was not part of a set of path\n            // separators at the end of the string, stop now\n            if (!matchedSlash) {\n              start = i + 1;\n              break;\n            }\n          } else {\n          if (firstNonSlashEnd === -1) {\n            // We saw the first non-path separator, remember this index in case\n            // we need it if the extension ends up not matching\n            matchedSlash = false;\n            firstNonSlashEnd = i + 1;\n          }\n          if (extIdx >= 0) {\n            // Try to match the explicit extension\n            if (code === ext.charCodeAt(extIdx)) {\n              if (--extIdx === -1) {\n                // We matched the extension, so mark this as the end of our path\n                // component\n                end = i;\n              }\n            } else {\n              // Extension does not match, so our result is the entire path\n              // component\n              extIdx = -1;\n              end = firstNonSlashEnd;\n            }\n          }\n        }\n      }\n\n      if (start === end) end = firstNonSlashEnd;else if (end === -1) end = path.length;\n      return path.slice(start, end);\n    } else {\n      for (i = path.length - 1; i >= 0; --i) {\n        if (path.charCodeAt(i) === 47 /*/*/) {\n            // If we reached a path separator that was not part of a set of path\n            // separators at the end of the string, stop now\n            if (!matchedSlash) {\n              start = i + 1;\n              break;\n            }\n          } else if (end === -1) {\n          // We saw the first non-path separator, mark this as the end of our\n          // path component\n          matchedSlash = false;\n          end = i + 1;\n        }\n      }\n\n      if (end === -1) return '';\n      return path.slice(start, end);\n    }\n  },\n\n  extname: function extname(path) {\n    assertPath(path);\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    var preDotState = 0;\n    for (var i = path.length - 1; i >= 0; --i) {\n      var code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            startPart = i + 1;\n            break;\n          }\n          continue;\n        }\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === 46 /*.*/) {\n          // If this is our first dot, mark it as the start of our extension\n          if (startDot === -1)\n            startDot = i;\n          else if (preDotState !== 1)\n            preDotState = 1;\n      } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 ||\n        // We saw a non-dot character immediately before the dot\n        preDotState === 0 ||\n        // The (right-most) trimmed path component is exactly '..'\n        preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      return '';\n    }\n    return path.slice(startDot, end);\n  },\n\n  format: function format(pathObject) {\n    if (pathObject === null || typeof pathObject !== 'object') {\n      throw new TypeError('The \"pathObject\" argument must be of type Object. Received type ' + typeof pathObject);\n    }\n    return _format('/', pathObject);\n  },\n\n  parse: function parse(path) {\n    assertPath(path);\n\n    var ret = { root: '', dir: '', base: '', ext: '', name: '' };\n    if (path.length === 0) return ret;\n    var code = path.charCodeAt(0);\n    var isAbsolute = code === 47 /*/*/;\n    var start;\n    if (isAbsolute) {\n      ret.root = '/';\n      start = 1;\n    } else {\n      start = 0;\n    }\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i = path.length - 1;\n\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    var preDotState = 0;\n\n    // Get non-dir info\n    for (; i >= start; --i) {\n      code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            startPart = i + 1;\n            break;\n          }\n          continue;\n        }\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === 46 /*.*/) {\n          // If this is our first dot, mark it as the start of our extension\n          if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;\n        } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 ||\n    // We saw a non-dot character immediately before the dot\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly '..'\n    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      if (end !== -1) {\n        if (startPart === 0 && isAbsolute) ret.base = ret.name = path.slice(1, end);else ret.base = ret.name = path.slice(startPart, end);\n      }\n    } else {\n      if (startPart === 0 && isAbsolute) {\n        ret.name = path.slice(1, startDot);\n        ret.base = path.slice(1, end);\n      } else {\n        ret.name = path.slice(startPart, startDot);\n        ret.base = path.slice(startPart, end);\n      }\n      ret.ext = path.slice(startDot, end);\n    }\n\n    if (startPart > 0) ret.dir = path.slice(0, startPart - 1);else if (isAbsolute) ret.dir = '/';\n\n    return ret;\n  },\n\n  sep: '/',\n  delimiter: ':',\n  win32: null,\n  posix: null\n};\n\nposix.posix = posix;\n\nmodule.exports = posix;\n","const fs = require('fs')\nconst path = require('path')\nconst os = require('os')\nconst packageJson = require('../package.json')\n\nconst version = packageJson.version\n\nconst LINE = /(?:^|^)\\s*(?:export\\s+)?([\\w.-]+)(?:\\s*=\\s*?|:\\s+?)(\\s*'(?:\\\\'|[^'])*'|\\s*\"(?:\\\\\"|[^\"])*\"|\\s*`(?:\\\\`|[^`])*`|[^#\\r\\n]+)?\\s*(?:#.*)?(?:$|$)/mg\n\n// Parser src into an Object\nfunction parse (src) {\n  const obj = {}\n\n  // Convert buffer to string\n  let lines = src.toString()\n\n  // Convert line breaks to same format\n  lines = lines.replace(/\\r\\n?/mg, '\\n')\n\n  let match\n  while ((match = LINE.exec(lines)) != null) {\n    const key = match[1]\n\n    // Default undefined or null to empty string\n    let value = (match[2] || '')\n\n    // Remove whitespace\n    value = value.trim()\n\n    // Check if double quoted\n    const maybeQuote = value[0]\n\n    // Remove surrounding quotes\n    value = value.replace(/^(['\"`])([\\s\\S]*)\\1$/mg, '$2')\n\n    // Expand newlines if double quoted\n    if (maybeQuote === '\"') {\n      value = value.replace(/\\\\n/g, '\\n')\n      value = value.replace(/\\\\r/g, '\\r')\n    }\n\n    // Add to object\n    obj[key] = value\n  }\n\n  return obj\n}\n\nfunction _log (message) {\n  console.log(`[dotenv@${version}][DEBUG] ${message}`)\n}\n\nfunction _resolveHome (envPath) {\n  return envPath[0] === '~' ? path.join(os.homedir(), envPath.slice(1)) : envPath\n}\n\n// Populates process.env from .env file\nfunction config (options) {\n  let dotenvPath = path.resolve(process.cwd(), '.env')\n  let encoding = 'utf8'\n  const debug = Boolean(options && options.debug)\n  const override = Boolean(options && options.override)\n\n  if (options) {\n    if (options.path != null) {\n      dotenvPath = _resolveHome(options.path)\n    }\n    if (options.encoding != null) {\n      encoding = options.encoding\n    }\n  }\n\n  try {\n    // Specifying an encoding returns a string instead of a buffer\n    const parsed = DotenvModule.parse(fs.readFileSync(dotenvPath, { encoding }))\n\n    Object.keys(parsed).forEach(function (key) {\n      if (!Object.prototype.hasOwnProperty.call(process.env, key)) {\n        process.env[key] = parsed[key]\n      } else {\n        if (override === true) {\n          process.env[key] = parsed[key]\n        }\n\n        if (debug) {\n          if (override === true) {\n            _log(`\"${key}\" is already defined in \\`process.env\\` and WAS overwritten`)\n          } else {\n            _log(`\"${key}\" is already defined in \\`process.env\\` and was NOT overwritten`)\n          }\n        }\n      }\n    })\n\n    return { parsed }\n  } catch (e) {\n    if (debug) {\n      _log(`Failed to load ${dotenvPath} ${e.message}`)\n    }\n\n    return { error: e }\n  }\n}\n\nconst DotenvModule = {\n  config,\n  parse\n}\n\nmodule.exports.config = DotenvModule.config\nmodule.exports.parse = DotenvModule.parse\nmodule.exports = DotenvModule\n","{\n  \"name\": \"dotenv\",\n  \"version\": \"16.0.3\",\n  \"description\": \"Loads environment variables from .env file\",\n  \"main\": \"lib/main.js\",\n  \"types\": \"lib/main.d.ts\",\n  \"exports\": {\n    \".\": {\n      \"require\": \"./lib/main.js\",\n      \"types\": \"./lib/main.d.ts\",\n      \"default\": \"./lib/main.js\"\n    },\n    \"./config\": \"./config.js\",\n    \"./config.js\": \"./config.js\",\n    \"./lib/env-options\": \"./lib/env-options.js\",\n    \"./lib/env-options.js\": \"./lib/env-options.js\",\n    \"./lib/cli-options\": \"./lib/cli-options.js\",\n    \"./lib/cli-options.js\": \"./lib/cli-options.js\",\n    \"./package.json\": \"./package.json\"\n  },\n  \"scripts\": {\n    \"dts-check\": \"tsc --project tests/types/tsconfig.json\",\n    \"lint\": \"standard\",\n    \"lint-readme\": \"standard-markdown\",\n    \"pretest\": \"npm run lint && npm run dts-check\",\n    \"test\": \"tap tests/*.js --100 -Rspec\",\n    \"prerelease\": \"npm test\",\n    \"release\": \"standard-version\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/motdotla/dotenv.git\"\n  },\n  \"keywords\": [\n    \"dotenv\",\n    \"env\",\n    \".env\",\n    \"environment\",\n    \"variables\",\n    \"config\",\n    \"settings\"\n  ],\n  \"readmeFilename\": \"README.md\",\n  \"license\": \"BSD-2-Clause\",\n  \"devDependencies\": {\n    \"@types/node\": \"^17.0.9\",\n    \"decache\": \"^4.6.1\",\n    \"dtslint\": \"^3.7.0\",\n    \"sinon\": \"^12.0.1\",\n    \"standard\": \"^16.0.4\",\n    \"standard-markdown\": \"^7.1.0\",\n    \"standard-version\": \"^9.3.2\",\n    \"tap\": \"^15.1.6\",\n    \"tar\": \"^6.1.11\",\n    \"typescript\": \"^4.5.4\"\n  },\n  \"engines\": {\n    \"node\": \">=12\"\n  }\n}\n","exports.endianness = function () { return 'LE' };\n\nexports.hostname = function () {\n    if (typeof location !== 'undefined') {\n        return location.hostname\n    }\n    else return '';\n};\n\nexports.loadavg = function () { return [] };\n\nexports.uptime = function () { return 0 };\n\nexports.freemem = function () {\n    return Number.MAX_VALUE;\n};\n\nexports.totalmem = function () {\n    return Number.MAX_VALUE;\n};\n\nexports.cpus = function () { return [] };\n\nexports.type = function () { return 'Browser' };\n\nexports.release = function () {\n    if (typeof navigator !== 'undefined') {\n        return navigator.appVersion;\n    }\n    return '';\n};\n\nexports.networkInterfaces\n= exports.getNetworkInterfaces\n= function () { return {} };\n\nexports.arch = function () { return 'javascript' };\n\nexports.platform = function () { return 'browser' };\n\nexports.tmpdir = exports.tmpDir = function () {\n    return '/tmp';\n};\n\nexports.EOL = '\\n';\n\nexports.homedir = function () {\n\treturn '/'\n};\n","import \"./components/header\";\nimport \"./components/button\";\nimport \"./components/text-field\";\nimport \"./components/message\";\nimport \"./pages/chat\";\nimport \"./pages/home\";\nimport \"./pages/signup\";\nimport \"./router\";\nimport * as dotenv from \"dotenv\"\ndotenv.config()\n\nimport { state } from \"./state\";\n(async () => {\n  state.init();\n})();\n"],"names":["$18c11f3350a906ea$export$6503ec6e8aabbaf","$18c11f3350a906ea$export$f7ad0328861e2f03","$18c11f3350a906ea$var$mapping","pairs","keys","Object","i","length","id","resolved","Error","$23YZo","parcelRequire","freeExports","exports","nodeType","freeModule","module","Buffer","undefined","isBuffer","$fiQnm","$ljJ8G","$180b2bc3c0deaf6c$var$freeSelf","self","$180b2bc3c0deaf6c$var$root","Function","$f84e62f9db5b9ccd$var$freeGlobal","$parcel$global","freeProcess","process","nodeUtil","types","require","binding","e","register","JSON","parse","$ede9449cce8c6582$var$CustomHeader","HTMLElement","constructor","super","this","shadow","attachShadow","mode","render","div","document","createElement","classList","add","style","textContent","appendChild","customElements","define","$f72f61df59b29cd9$var$Button","text","getAttribute","connectedCallback","innerHTML","$0d22134af1179217$var$TextMessage","sender","textMessage","owner","$cfae44f0dfdf62c0$var$cachedSetTimeout","$cfae44f0dfdf62c0$var$cachedClearTimeout","$cfae44f0dfdf62c0$var$process","$cfae44f0dfdf62c0$exports","$cfae44f0dfdf62c0$var$defaultSetTimout","$cfae44f0dfdf62c0$var$defaultClearTimeout","$cfae44f0dfdf62c0$var$runTimeout","fun","setTimeout","e1","call","clearTimeout","$cfae44f0dfdf62c0$var$currentQueue","$cfae44f0dfdf62c0$var$queue","$cfae44f0dfdf62c0$var$draining","$cfae44f0dfdf62c0$var$queueIndex","$cfae44f0dfdf62c0$var$cleanUpNextTick","concat","$cfae44f0dfdf62c0$var$drainQueue","timeout","len","run","marker","$cfae44f0dfdf62c0$var$runClearTimeout","$cfae44f0dfdf62c0$var$Item","array","$cfae44f0dfdf62c0$var$noop","nextTick","args","Array","arguments","push","prototype","apply","title","browser","env","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","name","cwd","chdir","dir","umask","assertion","message","$c38e0f42709c826a$export$a39cad550e7ab28a","$c38e0f42709c826a$export$588c7fdda06fbb0a","$c38e0f42709c826a$var$stringToByteArray$1","str","out","p","c","charCodeAt","charToByteMapWebSafe_","ENCODED_VALS_BASE","HAS_NATIVE_SUPPORT","atob","encodeByteArray","input","webSafe","isArray","init_","byteToCharMap","byteToCharMapWebSafe_","byteToCharMap_","output","byte1","haveByte2","byte2","haveByte3","byte3","outByte1","outByte2","outByte3","outByte4","join","encodeString","btoa","decodeString","bytes","pos","c1","String","fromCharCode","stringToByteArray","c2","u","c22","c31","$c38e0f42709c826a$var$byteArrayToString","decodeStringToByteArray","charToByteMap","charToByteMap_","charAt","byte4","ENCODED_VALS","ENCODED_VALS_WEBSAFE","$c38e0f42709c826a$export$e510a73ee562749","utf8Bytes","$c38e0f42709c826a$export$b3b2de96497acc47","$c38e0f42709c826a$export$4b5284a3025a455","replace","$c38e0f42709c826a$export$c62426fdd000a97e","console","error","$c38e0f42709c826a$export$6c40052bed430212","value","$c38e0f42709c826a$export$54e9fb29908872fa","target","source","Date","getTime","prop","$c38e0f42709c826a$export$c36915b22ce77c19","navigator","$c38e0f42709c826a$export$872f8323f01d7ae0","window","test","$c38e0f42709c826a$export$5d1d834fbbf8bab7","$c38e0f42709c826a$export$3865db50535c2055","indexedDB","$c38e0f42709c826a$var$getDefaultsFromGlobal","$c38e0f42709c826a$export$a4e55266d2135a7f","__FIREBASE_DEFAULTS__","$c38e0f42709c826a$var$getDefaults","$c38e0f42709c826a$var$getDefaultsFromEnvVariable","match","cookie","decoded","$c38e0f42709c826a$var$getDefaultsFromCookie","info","$c38e0f42709c826a$export$a3febcf1f14a3a0c","productName","host","_a","_b","emulatorHosts","$c38e0f42709c826a$export$9c11895284c8adad","separatorIndex","lastIndexOf","resolve","promise","Promise","reject","wrapCallback","callback","catch","token","projectId","uid","iat","sub","user_id","assign","iss","project","aud","auth_time","firebase","stringify","payload","code","customData","setPrototypeOf","$c38e0f42709c826a$export$dd24e9cd51226c56","captureStackTrace","$c38e0f42709c826a$export$3fa6e1b18a3b2d40","create","service","serviceName","errors","data","fullCode","template","$c38e0f42709c826a$var$PATTERN","_","key","$c38e0f42709c826a$var$replaceTemplate","fullMessage","$c38e0f42709c826a$export$c5a53ce6a17cf18d","$c38e0f42709c826a$export$fac44ee5b035f737","$c38e0f42709c826a$export$2f872c0f2117be69","header","claims","signature","parts","split","hasOwnProperty","$c38e0f42709c826a$export$2344b14b097df817","obj","$c38e0f42709c826a$export$dd1bc94b04021eeb","$c38e0f42709c826a$export$871de8747c9eaa88","fn","contextObj","res","$c38e0f42709c826a$export$9cb4719e2e525b7a","a","b","aKeys","bKeys","k","includes","aProp","bProp","$c38e0f42709c826a$var$isObject","k1","$a83e7ccd68ca8d4e$export$16fa2f45be04daa8","instanceFactory","type","multipleInstances","serviceProps","instantiationMode","onInstanceCreated","setServiceProps","props","container","component","instances","Map","instancesDeferred","instancesOptions","onInitCallbacks","has","normalizedIdentifier","deferred","$c38e0f42709c826a$export$85f6557964517f1a","set","isInitialized","shouldAutoInitialize","get","normalizeInstanceIdentifier","options","identifier","optional","$a83e7ccd68ca8d4e$var$isComponentEager","getOrInitializeService","instanceIdentifier","$a83e7ccd68ca8d4e$var$DEFAULT_ENTRY_NAME","instanceDeferred","entries","instance","delete","services","from","values","all","filter","map","INTERNAL","_delete","isComponentSet","opts","onInit","existingCallbacks","Set","existingInstance","invokeOnInitCallbacks","callbacks","$45b460d9de9b230f$var$instances","$45b460d9de9b230f$export$243e62d78d3b544d","LogLevel","DEBUG","VERBOSE","INFO","warn","WARN","ERROR","silent","SILENT","$45b460d9de9b230f$var$defaultLogLevel","$45b460d9de9b230f$var$ConsoleMethod","$45b460d9de9b230f$var$defaultLogHandler","logType","logLevel","now","toISOString","method","_logLevel","_logHandler","_userLogHandler","val","TypeError","$45b460d9de9b230f$var$levelStringToEnum","userLogHandler","$e67bf383372d72f4$var$idbProxyableTypes","$e67bf383372d72f4$var$cursorAdvanceMethods","$e67bf383372d72f4$var$cursorRequestMap","WeakMap","$e67bf383372d72f4$var$transactionDoneMap","$e67bf383372d72f4$var$transactionStoreNamesMap","$e67bf383372d72f4$var$transformCache","$e67bf383372d72f4$export$407448d2b89b1813","$e67bf383372d72f4$var$idbProxyTraps","receiver","IDBTransaction","objectStoreNames","objectStore","$e67bf383372d72f4$export$efccba1c4a2ef57b","$e67bf383372d72f4$var$wrapFunction","func","IDBDatabase","transaction","IDBCursor","advance","continue","continuePrimaryKey","$e67bf383372d72f4$export$3b14a55fb2447963","storeNames","tx","sort","$e67bf383372d72f4$var$transformCachableValue","done","unlisten","removeEventListener","complete","DOMException","addEventListener","$e67bf383372d72f4$var$cacheDonePromiseForTransaction","object","IDBObjectStore","IDBIndex","some","Proxy","IDBRequest","request","success","result","then","$e67bf383372d72f4$var$promisifyRequest","newValue","$da032767b57a4aa4$export$ca0ed41b1a2af7e","blocked","upgrade","blocking","terminated","open","openPromise","event","oldVersion","newVersion","db","$da032767b57a4aa4$var$readMethods","$da032767b57a4aa4$var$writeMethods","$da032767b57a4aa4$var$cachedMethods","$da032767b57a4aa4$var$getMethod","targetFuncName","useIndex","isWrite","async","storeName","store","index","shift","oldTraps","$57d436074e210fb5$var$PlatformLoggerServiceImpl","getPlatformInfoString","databaseCompatName","$45b460d9de9b230f$export$efa9a398d6368992","$57d436074e210fb5$export$9f30fa0c10967f7f","$57d436074e210fb5$var$PLATFORM_LOG_STRING","$57d436074e210fb5$var$name$o","$57d436074e210fb5$export$b4e3c36c855b14b5","$57d436074e210fb5$export$fa5244b94c62d36a","app","addComponent","$57d436074e210fb5$var$logger","debug","$57d436074e210fb5$export$c930050e7bb63965","componentName","$57d436074e210fb5$export$9566bce3835c0f28","$57d436074e210fb5$export$fa0d6da0f5838f50","heartbeatController","getProvider","getImmediate","triggerHeartbeat","$57d436074e210fb5$var$ERROR_FACTORY","config","_options","_config","_name","_automaticDataCollectionEnabled","automaticDataCollectionEnabled","_container","checkDestroyed","isDeleted","_isDeleted","appName","rawConfig","name1","existingApp","newApp","$57d436074e210fb5$var$FirebaseAppImpl","$57d436074e210fb5$export$c55cfd413944906d","libraryKeyOrName","variant","library","versionMismatch","libraryMismatch","warning","preExist","DB_CHECK_NAME","onsuccess","close","deleteDatabase","onupgradeneeded","onerror","$da38ac6aa733c404$var$SDK_VERSION","$da38ac6aa733c404$var$DOMStorageWrapper","domStorage_","removeItem","prefixedName_","storedVal","getItem","remove","prefix_","toString","$da38ac6aa733c404$var$MemoryStorage","cache_","isInMemoryStorage","$da38ac6aa733c404$var$createStoragefor","domStorageName","domStorage","setItem","$da38ac6aa733c404$var$PersistentStorage","$da38ac6aa733c404$var$SessionStorage","$da38ac6aa733c404$var$sha1","$c38e0f42709c826a$export$655666783217a925","sha1","$c38e0f42709c826a$export$c85d589bf4e25fef","update","digest","sha1Bytes","varArgs","arg","$da38ac6aa733c404$var$buildLogMessage_","$da38ac6aa733c404$var$logger","$da38ac6aa733c404$var$enableLogging$1","logger_","persistent","$c38e0f42709c826a$export$a7a9523472993e97","$da38ac6aa733c404$var$logClient","log","bind","$da38ac6aa733c404$var$log","$da38ac6aa733c404$var$firstLog_","$da38ac6aa733c404$var$logWrapper","prefix","$da38ac6aa733c404$var$error","$da38ac6aa733c404$var$fatal","$da38ac6aa733c404$var$isInvalidJSONNumber","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","$da38ac6aa733c404$var$MIN_NAME","$da38ac6aa733c404$var$MAX_NAME","$da38ac6aa733c404$var$nameCompare","bAsInt","aAsInt","$da38ac6aa733c404$var$requireKey","$da38ac6aa733c404$var$ObjectToUniqueKey","dataSegs","segsize","substring","$da38ac6aa733c404$var$each","$da38ac6aa733c404$var$doubleToIEEE754String","v","bias","s","f","ln","Infinity","Math","abs","pow","round","bits","floor","hexByteString","hexByte","parseInt","substr","toLowerCase","$da38ac6aa733c404$var$INTEGER_REGEXP_","RegExp","$da38ac6aa733c404$var$tryParseInt","intVal","$da38ac6aa733c404$var$exceptionGuard","stack","$da38ac6aa733c404$var$warn","$da38ac6aa733c404$var$setTimeoutNonBlocking","time","Deno","unrefTimer","$da38ac6aa733c404$var$AppCheckTokenProvider","appName_","appCheckProvider","appCheck","getToken","forceRefresh","addTokenChangeListener","listener","addTokenListener","notifyForInvalidToken","$da38ac6aa733c404$var$FirebaseAuthTokenProvider","firebaseOptions_","authProvider_","auth_","auth","addAuthTokenListener","removeAuthTokenListener","errorMessage","$da38ac6aa733c404$var$EmulatorTokenProvider","accessToken","OWNER","$da38ac6aa733c404$var$PROTOCOL_VERSION","$da38ac6aa733c404$var$RepoInfo","secure","namespace","webSocketOnly","nodeAdmin","persistenceKey","includeNamespaceInQueryParams","_host","_domain","indexOf","internalHost","newHost","isCacheableHost","toURLString","protocol","query","$da38ac6aa733c404$var$repoInfoConnectionURL","repoInfo","params","$da38ac6aa733c404$var$WEBSOCKET","connURL","counters_","amount","hashString","$da38ac6aa733c404$var$collections","$da38ac6aa733c404$var$StatsCollection","onMessage_","pendingResponses","currentResponseNum","closeAfterResponse","onClose","closeAfter","responseNum","requestNum","toProcess","$da38ac6aa733c404$var$FIREBASE_LONGPOLL_START_PARAM","connId","applicationId","appCheckToken","authToken","transportSessionId","lastSessionId","bytesSent","everConnected_","log_","stats_","$da38ac6aa733c404$var$statsManagerGetCollection","urlFn","$da38ac6aa733c404$var$APP_CHECK_TOKEN_PARAM","$da38ac6aa733c404$var$LONG_POLLING","onMessage","onDisconnect","curSegmentNum","onDisconnect_","myPacketOrderer","$da38ac6aa733c404$var$PacketReceiver","isClosed_","connectTimeoutTimer_","onClosed_","readyState","wrappedFn","body","called","attachEvent","$da38ac6aa733c404$var$executeWhenDOMReady","scriptTagHolder","$da38ac6aa733c404$var$FirebaseIFrameScriptHolder","command","arg1","arg2","arg3","arg4","incrementIncomingBytes_","password","sendNewPolls","urlParams","random","uniqueCallbackIdentifier","location","hostname","$da38ac6aa733c404$var$FORGE_DOMAIN_RE","connectURL","addTag","startLongPoll","addDisconnectPingFrame","static","$da38ac6aa733c404$var$BrowserPollConnection","forceAllow_","forceDisallow_","Windows","UI","shutdown_","myDisconnFrame","removeChild","send","dataStr","incrementCounter","base64data","$da38ac6aa733c404$var$splitStringBySize","$da38ac6aa733c404$var$MAX_URL_DATA_SIZE","enqueueSegment","pw","src","display","bytesReceived","commandCB","onMessageCB","outstandingRequests","pendingSegs","currentSerial","$da38ac6aa733c404$var$LUIDGenerator","myIFrame","createIFrame_","script","domain","iframeContents","doc","write","iframe","contentWindow","contentDocument","alive","myID","myPW","newRequest_","size","theURL","d","curDataString","theSeg","seg","ts","addLongPollTag_","segnum","totalsegs","url","serial","doNewRequest","keepaliveTimeout","loadCB","doNodeLongPoll","newScript","onload","onreadystatechange","rstate","parentNode","MozWebSocket","$da38ac6aa733c404$var$WebSocketImpl","WebSocket","$da38ac6aa733c404$var$WebSocketConnection","keepaliveTimer","frames","totalFrames","connectionURL_","device","headers","platform","proxy","origin","mySock","onclose","onmessage","m","handleIncomingFrame","start","userAgent","oldAndroidRegex","oldAndroidMatch","parseFloat","isOldAndroid","jsonMess","fullMess","frameCount","extractFrameCount_","isNaN","handleNewFrameCount_","mess","resetKeepAlive","appendFrame_","remainingData","sendString_","clearInterval","setInterval","responsesRequiredToBeHealthy","healthyTimeout","$da38ac6aa733c404$var$TransportManager","initTransports_","ALL_TRANSPORTS","IS_TRANSPORT_INITIALIZED","globalTransportInitialized_","isWebSocketsAvailable","isSkipPollConnection","previouslyFailed","transports_","transports","transport","initialTransport","upgradeTransport","$da38ac6aa733c404$var$Connection","repoInfo_","applicationId_","appCheckToken_","authToken_","onReady_","onKill_","pendingDataMessages","state_","transportManager_","start_","conn","conn_","nextTransportId_","primaryResponsesRequired_","onMessageReceived","connReceiver_","onConnectionLost","disconnReceiver_","tx_","rx_","healthyTimeoutMS","healthyTimeout_","markConnectionHealthy","connectionCount","everConnected","onConnectionLost_","secondaryConn_","onSecondaryConnectionLost_","onPrimaryMessageReceived_","onSecondaryMessageReceived_","sendRequest","dataMsg","msg","t","sendData_","controlData","cmd","upgradeIfSecondaryHealthy_","secondaryResponsesRequired_","parsedData","layer","onSecondaryControl_","isHealthy_","proceedWithUpgrade_","tryCleanupConnection","onControl_","onDataMessage_","onPrimaryResponse_","onHandshake_","onReset_","sendPingOnPrimaryIfNecessary_","handshake","h","sessionId","onConnectionEstablished_","timestamp","tryStartUpgrade_","closeConnections_","reason","pathString","onComplete","hash","reportStats","stats","allowedEvents_","listeners_","trigger","eventType","context","validateEventType_","eventData","find","et","$da38ac6aa733c404$var$EventEmitter","online_","$da38ac6aa733c404$var$OnlineMonitor","pathOrString","pieceNum","pieces_","copyTo","pieceNum_","$da38ac6aa733c404$var$newEmptyPath","$da38ac6aa733c404$var$Path","$da38ac6aa733c404$var$pathGetFront","path","$da38ac6aa733c404$var$pathGetLength","$da38ac6aa733c404$var$pathPopFront","$da38ac6aa733c404$var$pathSlice","begin","slice","$da38ac6aa733c404$var$pathParent","pieces","childPathObj","i1","childPieces","i2","$da38ac6aa733c404$var$pathIsEmpty","$da38ac6aa733c404$var$newRelativePath","outerPath","innerPath","inner","$da38ac6aa733c404$var$pathEquals","other","j","$da38ac6aa733c404$var$ValidationPath","errorPrefix_","parts_","byteLength_","max","$c38e0f42709c826a$export$9536dc0a75b20bf9","$da38ac6aa733c404$var$validationPathCheckValid","validationPath","$da38ac6aa733c404$var$validationPathToErrorString","$da38ac6aa733c404$var$VisibilityMonitor","visibilityChange","hidden","visible_","visible","$da38ac6aa733c404$var$PersistentConnection","$da38ac6aa733c404$var$ServerActions","onDataUpdate_","onConnectStatus_","onServerInfoUpdate_","authTokenProvider_","appCheckTokenProvider_","authOverride_","nextPersistentConnectionId_","interruptReasons_","listens","outstandingPuts_","outstandingGets_","outstandingPutCount_","outstandingGetCount_","onDisconnectRequestQueue_","connected_","reconnectDelay_","$da38ac6aa733c404$var$RECONNECT_MIN_DELAY","maxReconnectDelay_","securityDebugCallback_","establishConnectionTimer_","requestCBHash_","requestNumber_","realtime_","forceTokenRefresh_","invalidAuthTokenCount_","invalidAppCheckTokenCount_","firstConnection_","lastConnectionAttemptTime_","lastConnectionEstablishedTime_","getInstance","onVisible_","onOnline_","action","onResponse","curReqNum","initConnection_","outstandingGet","_path","q","_queryObject","sendGet_","listen","currentHashFn","tag","queryId","_queryIdentifier","_queryParams","isDefault","loadsAllData","listenSpec","hashFn","sendListen_","req","status","warnOnListenWarnings_","removeListen_","warnings","$c38e0f42709c826a$export$e51ae4db7b428f67","indexSpec","getIndex","indexPath","refreshAuthToken","tryAuth","reduceReconnectDelayIfAdminCredential_","credential","$c38e0f42709c826a$export$fc970ed23da99565","refreshAppCheckToken","tryAppCheck","authMethod","$c38e0f42709c826a$export$9565ca3d387f8aa0","requestData","cred","onAuthRevoked_","onAppCheckRevoked_","sendUnlisten_","queryObj","onDisconnectPut","sendOnDisconnect_","onDisconnectMerge","setMaxNode","MAX_NODE","onDisconnectCancel","response","put","putInternal","merge","sendPut_","queued","errorReason","reqNum","onListenRevoked_","onSecurityDebugPacket_","handleTimestamp_","sendConnectStats_","restoreState_","scheduleConnect_","online","nodeFromJSON","shouldReconnect_","timeSinceLastConnectAttempt","reconnectDelay","min","onDataMessage","onReady","onRealtimeDisconnect_","nextConnectionId_","canceled","connection","closeFn","sendRequestFn","interrupt","delta","serverTimeOffset","cancelSentTransactions_","normalizedPathString","statusCode","explanation","queries","clientName","currentlyOnline","$da38ac6aa733c404$var$NamedNode","node","compare","oldNode","newNode","oldWrapped","newWrapped","minPost","MIN","$da38ac6aa733c404$var$__EMPTY_NODE","$da38ac6aa733c404$var$KeyIndex","$da38ac6aa733c404$var$Index","__EMPTY_NODE","makePost","indexValue","$da38ac6aa733c404$var$KEY_INDEX","$da38ac6aa733c404$var$SortedMapIterator","startKey","comparator","isReverse_","resultGenerator_","nodeStack_","cmp","isEmpty","left","right","pop","$da38ac6aa733c404$var$LLRBNode","color","RED","$da38ac6aa733c404$var$SortedMap","EMPTY_NODE","copy","count","inorderTraversal","reverseTraversal","min_","minKey","maxKey","n","insert","fixUp_","removeMin_","isRed_","moveRedLeft_","smallest","rotateRight_","moveRedRight_","rotateLeft_","colorFlip_","nl","nr","checkMaxDepth_","blackDepth","check_","BLACK","comparator_","root_","getPredecessorKey","rightParent","getIterator","resultGenerator","getIteratorFrom","$da38ac6aa733c404$var$MAX_NODE$2","priority","$da38ac6aa733c404$var$validatePriorityNode","priorityNode","isLeafNode","getPriority","$da38ac6aa733c404$var$__childrenNodeConstructor","$da38ac6aa733c404$var$LeafNode","value_","priorityNode_","__childrenNodeConstructor","lazyHash_","updatePriority","newPriorityNode","getImmediateChild","childName","getChild","getPredecessorChildName","childNode","updateImmediateChild","newChildNode","updateChild","front","numChildren","forEachChild","exportFormat","getValue","toHash","$da38ac6aa733c404$var$priorityHashText","compareTo","compareToLeafNode_","otherLeaf","otherLeafType","thisLeafType","otherIndex","VALUE_TYPE_ORDER","thisIndex","isIndexed","equals","aPriority","bPriority","indexCmp","isDefinedOn","indexedValueChanged","maxPost","$da38ac6aa733c404$var$MAX_NODE$1","$da38ac6aa733c404$var$LOG_2","num","bits_","mask","current_","childList","keyFn","mapSortFn","low","high","namedNode","buildBalancedTree","middle","root","base12","buildPennant","chunkSize","childTree","attachPennant","pennant","isOne","nextBitIsOne","buildFrom12Array","$da38ac6aa733c404$var$Base12Num","indexes_","indexSet_","Default","$da38ac6aa733c404$var$fallbackObject","$da38ac6aa733c404$var$PRIORITY_INDEX","$da38ac6aa733c404$var$_defaultIndexMap","$da38ac6aa733c404$var$IndexMap","indexKey","sortedMap","indexDefinition","existingChildren","sawIndexedValue","iter","Wrap","newIndex","next","getNext","$da38ac6aa733c404$var$buildChildSet","getCompare","indexName","newIndexSet","newIndexes","addToIndexes","indexedChildren","existingSnap","newChildren","removeFromIndexes","$da38ac6aa733c404$var$ChildrenNode","indexMap_","children_","$da38ac6aa733c404$var$EMPTY_NODE","$da38ac6aa733c404$var$NAME_COMPARATOR","child","hasChild","newIndexMap","newPriority","newImmediateChild","numKeys","allIntegerKeys","INTEGER_REGEXP_","childHash","idx","resolveIndex_","predecessor","getFirstChildName","getFirstChild","getLastChildName","wrappedNode","startPost","iterator","peek","endPost","getReverseIteratorFrom","$da38ac6aa733c404$var$MAX_NODE","hasIndex","addIndex","otherChildrenNode","thisIter","otherIter","thisCurrent","otherCurrent","MAX","$da38ac6aa733c404$var$nodeFromJSON","json","childData","children","childrenHavePriority","childSet","$da38ac6aa733c404$var$NAME_ONLY_COMPARATOR","sortedChildSet","$da38ac6aa733c404$var$PathIndex","indexPath_","extractChild","snap","aChild","bChild","valueNode","$da38ac6aa733c404$var$changeValue","snapshotNode","$da38ac6aa733c404$var$changeChildAdded","$da38ac6aa733c404$var$changeChildRemoved","$da38ac6aa733c404$var$changeChildChanged","oldSnap","index_","newChild","affectedPath","optChangeAccumulator","oldChild","trackChildChange","newSnap","withIndex","$da38ac6aa733c404$var$RangedFilter","startPost_","getStartPost_","startIsInclusive_","startAfterSet_","endIsInclusive_","endBeforeSet_","isWithinStart","getStartPost","isWithinEnd","getEndPost","matches","indexedFilter_","filtered","updateFullNode","filtersNodes","hasStart","startName","getIndexStartName","getIndexStartValue","hasEnd","endName","getIndexEndName","getIndexEndValue","$da38ac6aa733c404$var$LimitedFilter","withinDirectionalStart","reverse_","withinEndPost","withinStartPost","withinDirectionalEnd","rangedFilter_","compareRes","limit_","getLimit","isViewFromLeft","getIndexedFilter","fullLimitUpdateChild_","hasNext","iterator1","getReverseIterator","count1","next1","childKey","childSnap","changeAccumulator","oldEventCache","newChildNamedNode","windowBoundary","getLastChild","inRange","nextChild","getChildAfterChild","compareNext","oldChildSnap","newEventCache","startSet_","viewFrom_","indexStartValue_","startNameSet_","indexStartName_","endSet_","indexEndValue_","endNameSet_","indexEndName_","limitSet_","$da38ac6aa733c404$var$queryParamsToRestQueryStringParameters","queryParams","qs","orderBy","$da38ac6aa733c404$var$VALUE_INDEX","startParam","endParam","viewFrom","$da38ac6aa733c404$var$ReadonlyRestClient","listens_","listenId","getListenId_","thisListen","queryStringParameters","restRequest_","referenceConstructor","$c38e0f42709c826a$export$ac4103b836844853","xhr","XMLHttpRequest","responseText","rootNode_","newSnapshotNode","$da38ac6aa733c404$var$newSparseSnapshotTree","$da38ac6aa733c404$var$sparseSnapshotTreeRemember","sparseSnapshotTree","clear","$da38ac6aa733c404$var$sparseSnapshotTreeForEachTree","prefixPath","forEach","tree","$da38ac6aa733c404$var$StatsListener","collection_","last_","newStats","stat","collection","server_","reportStats_","statsListener_","reportedStats","haveStatsToReport","statsToReport_","$da38ac6aa733c404$var$OperationType","OperationType","$da38ac6aa733c404$var$newOperationSourceServerTaggedQuery","fromUser","tagged","$da38ac6aa733c404$var$AckUserWrite","affectedTree","revert","ACK_USER_WRITE","fromServer","operationForChild","subtree","LISTEN_COMPLETE","$da38ac6aa733c404$var$ListenComplete","$da38ac6aa733c404$var$Overwrite","OVERWRITE","$da38ac6aa733c404$var$Merge","MERGE","node_","fullyInitialized_","filtered_","isFullyInitialized","isFiltered","$da38ac6aa733c404$var$EventGenerator","query_","$da38ac6aa733c404$var$eventGeneratorGenerateEventsForType","eventGenerator","events","changes","registrations","eventCache","filteredChanges","change","aWrapped","bWrapped","$da38ac6aa733c404$var$eventGeneratorCompareChanges","materializedChange","prevName","$da38ac6aa733c404$var$eventGeneratorMaterializeSingleChange","registration","respondsTo","createEvent","$da38ac6aa733c404$var$newViewCache","serverCache","viewCache","eventSnap","$da38ac6aa733c404$var$CacheNode","$da38ac6aa733c404$var$viewCacheUpdateServerSnap","serverSnap","$da38ac6aa733c404$var$viewCacheGetCompleteEventSnap","getNode","$da38ac6aa733c404$var$viewCacheGetCompleteServerSnap","$da38ac6aa733c404$var$emptyChildrenSingleton","$da38ac6aa733c404$var$ImmutableTree","$da38ac6aa733c404$var$stringCompare","$da38ac6aa733c404$var$EmptyChildren","childPath","findRootMostMatchingPathAndValue","relativePath","predicate","childExistingPathAndValue","$da38ac6aa733c404$var$pathChild","findRootMostValueAndPath","toSet","errorPrefix","setTree","newTree","fold","fold_","pathSoFar","accum","findOnPath","findOnPath_","pathToFollow","foreachOnPath_","currentRelativePath","foreach","foreach_","$da38ac6aa733c404$var$CompoundWrite","writeTree_","rootmost","compoundWrite","rootMostPath","newWriteTree","$da38ac6aa733c404$var$compoundWriteAddWrites","updates","$da38ac6aa733c404$var$compoundWriteAddWrite","newWrite","$da38ac6aa733c404$var$compoundWriteRemoveWrite","empty","$da38ac6aa733c404$var$compoundWriteHasCompleteWrite","$da38ac6aa733c404$var$compoundWriteGetCompleteNode","$da38ac6aa733c404$var$compoundWriteChildCompoundWrite","shadowingNode","$da38ac6aa733c404$var$compoundWriteIsEmpty","$da38ac6aa733c404$var$compoundWriteApply","writeTree","priorityWrite","$da38ac6aa733c404$var$applySubtreeWrite","$da38ac6aa733c404$var$writeTreeChildWrites","$da38ac6aa733c404$var$newWriteTreeRef","$da38ac6aa733c404$var$writeTreeRemoveWrite","writeId","allWrites","findIndex","writeToRemove","splice","removedWriteWasVisible","removedWriteOverlapsWithOtherWrites","currentWrite","$da38ac6aa733c404$var$writeTreeRecordContainsPath_","$da38ac6aa733c404$var$pathContains","visibleWrites","$da38ac6aa733c404$var$writeTreeLayerTree_","$da38ac6aa733c404$var$writeTreeDefaultFilter_","lastWriteId","$da38ac6aa733c404$var$writeTreeResetTree_","writeRecord","writes","treeRoot","writePath","deepNode","$da38ac6aa733c404$var$writeTreeCalcCompleteEventCache","treePath","completeServerCache","writeIdsToExclude","includeHiddenWrites","subMerge","$da38ac6aa733c404$var$writeTreeRefCalcCompleteEventCache","writeTreeRef","$da38ac6aa733c404$var$writeTreeRefCalcCompleteEventChildren","completeServerChildren","completeChildren","topLevelSet","$da38ac6aa733c404$var$writeTreeCalcCompleteEventChildren","$da38ac6aa733c404$var$writeTreeRefCalcEventCacheAfterServerOverwrite","existingEventSnap","existingServerSnap","childMerge","$da38ac6aa733c404$var$writeTreeCalcEventCacheAfterServerOverwrite","$da38ac6aa733c404$var$writeTreeRefShadowingWrite","completeServerData","reverse","toIterate","nodes","existingServerCache","isCompleteForChild","changeMap","oldChange","oldType","getChanges","$da38ac6aa733c404$var$NO_COMPLETE_CHILD_SOURCE","getCompleteChild","$da38ac6aa733c404$var$WriteTreeCompleteChildSource","writes_","viewCache_","optCompleteServerCache_","serverNode","$da38ac6aa733c404$var$writeTreeRefCalcCompleteChild","$da38ac6aa733c404$var$writeTreeRefCalcIndexedSlice","accumulator","$da38ac6aa733c404$var$ChildChangeAccumulator","newViewCache","filterServerNode","operation","overwrite","$da38ac6aa733c404$var$viewProcessorApplyUserOverwrite","viewProcessor","oldViewCache","writesCache","completeCache","$da38ac6aa733c404$var$viewProcessorApplyServerOverwrite","changedChildren","curViewCache","$da38ac6aa733c404$var$viewProcessorCacheHasChild","$da38ac6aa733c404$var$viewProcessorApplyUserMerge","$da38ac6aa733c404$var$viewProcessorApplyServerMerge","ackUserWrite","serverChildren","$da38ac6aa733c404$var$viewProcessorRevertUserWrite","ackPath","isCompleteForPath","changedChildren1","mergePath","serverCachePath","$da38ac6aa733c404$var$viewProcessorAckUserWrite","oldServerNode","$da38ac6aa733c404$var$viewProcessorGenerateEventCacheAfterServerEvent","$da38ac6aa733c404$var$viewProcessorListenComplete","isLeafOrEmpty","oldCompleteSnap","$da38ac6aa733c404$var$viewProcessorMaybeAddValueEvent","changePath","completeEventChildren","completeNode","oldEventNode","oldEventSnap","updatedPriority","childChangePath","eventChildUpdate","newEventChild","$da38ac6aa733c404$var$viewCacheUpdateEventSnap","changedSnap","serverFilter","newServerCache","oldServerSnap","newServerNode","$da38ac6aa733c404$var$pathGetBack","$da38ac6aa733c404$var$viewProcessorApplyMerge","viewMergeTree","childMergeTree","isUnknownDeepMerge","$da38ac6aa733c404$var$View","initialViewCache","eventRegistrations_","indexFilter","$da38ac6aa733c404$var$IndexedFilter","hasLimit","processor_","$da38ac6aa733c404$var$newViewProcessor","initialServerCache","initialEventCache","eventGenerator_","$da38ac6aa733c404$var$viewGetCompleteServerCache","view","cache","$da38ac6aa733c404$var$viewIsEmpty","$da38ac6aa733c404$var$viewRemoveEventRegistration","eventRegistration","cancelError","cancelEvents","maybeEvent","createCancelEvent","remaining","existing","hasAnyCallback","$da38ac6aa733c404$var$viewApplyOperation","$da38ac6aa733c404$var$viewProcessorApplyOperation","$da38ac6aa733c404$var$viewGenerateEventsForChanges_","eventRegistrations","moves","$da38ac6aa733c404$var$eventGeneratorGenerateEventsForChanges","$da38ac6aa733c404$var$referenceConstructor$1","$da38ac6aa733c404$var$referenceConstructor","$da38ac6aa733c404$var$SyncPoint","views","$da38ac6aa733c404$var$syncPointApplyOperation","syncPoint","optCompleteServerCache","view1","$da38ac6aa733c404$var$syncPointGetView","serverCacheComplete","eventCacheComplete","$da38ac6aa733c404$var$syncPointAddEventRegistration","initialChanges","$da38ac6aa733c404$var$viewGetInitialEvents","$da38ac6aa733c404$var$syncPointRemoveEventRegistration","hadCompleteView","$da38ac6aa733c404$var$syncPointHasCompleteView","viewQueryId","removed","_repo","$da38ac6aa733c404$var$syncPointGetQueryViews","$da38ac6aa733c404$var$syncPointGetCompleteServerCache","$da38ac6aa733c404$var$syncPointViewForQuery","$da38ac6aa733c404$var$syncPointGetCompleteView","$da38ac6aa733c404$var$syncPointViewExistsForQuery","$da38ac6aa733c404$var$syncTreeNextQueryTag_","$da38ac6aa733c404$var$SyncTree","listenProvider_","syncPointTree_","pendingWriteTree_","tagToQueryMap","queryToTagMap","$da38ac6aa733c404$var$syncTreeApplyUserOverwrite","syncTree","newData","$da38ac6aa733c404$var$writeTreeAddOverwrite","$da38ac6aa733c404$var$syncTreeApplyOperationToSyncPoints_","$da38ac6aa733c404$var$syncTreeAckUserWrite","record","$da38ac6aa733c404$var$writeTreeGetWrite","$da38ac6aa733c404$var$syncTreeApplyServerOverwrite","$da38ac6aa733c404$var$syncTreeRemoveEventRegistration","skipListenerDedup","maybeSyncPoint","removedAndEvents","removingDefault","covered","parentSyncPoint","newViews","$da38ac6aa733c404$var$syncTreeCollectDistinctViewsForSubTree_","newQuery","$da38ac6aa733c404$var$syncTreeCreateListenerForView_","startListening","$da38ac6aa733c404$var$syncTreeQueryForListening_","$da38ac6aa733c404$var$syncTreeTagForQuery","defaultTag","stopListening","queryToRemove","tagToRemove","$da38ac6aa733c404$var$syncTreeMakeQueryKey_","$da38ac6aa733c404$var$syncTreeRemoveTags_","$da38ac6aa733c404$var$syncTreeApplyTaggedQueryOverwrite","$da38ac6aa733c404$var$syncTreeQueryKeyForTag_","r","$da38ac6aa733c404$var$syncTreeParseQueryKey_","queryKey","queryPath","$da38ac6aa733c404$var$syncTreeApplyTaggedOperation_","$da38ac6aa733c404$var$syncTreeAddEventRegistration","skipSetupListener","foundAncestorDefaultView","foreachOnPath","pathToSyncPoint","sp","foreachChild","childSyncPoint","viewAlreadyExists","enableLoggingImpl","SDK_VERSION","$da38ac6aa733c404$var$syncTreeSetupListener_","$da38ac6aa733c404$var$syncTreeCalcCompleteEventCache","$da38ac6aa733c404$var$syncTreeApplyOperationHelper_","syncPointTree","$da38ac6aa733c404$var$syncTreeApplyOperationDescendantsHelper_","childOperation","childServerCache","childWritesCache","$da38ac6aa733c404$var$writeTreeRefChild","toUpperCase","last","search","creatorFunction","$da38ac6aa733c404$var$reporters","changeTree","fromObject","$0c45c971111478f0$export$8a7957e57f12f09c","apiKey","databaseURL","authDomain","$f9d9d110dea7aeee$var$toArray","objectOrArray","$f9d9d110dea7aeee$var$log","$f9d9d110dea7aeee$var$MODULE","$f9d9d110dea7aeee$var$NOMODULE","$f9d9d110dea7aeee$var$bundleKeys","$f9d9d110dea7aeee$var$ensureBundle","$f9d9d110dea7aeee$var$ensureRoute","route","$f9d9d110dea7aeee$var$isString","bundle","stringKeys","$f9d9d110dea7aeee$var$isFunction","$f9d9d110dea7aeee$var$isObject","redirect","overriddenProp","$f9d9d110dea7aeee$var$ensureRoutes","routes","$f9d9d110dea7aeee$var$loadScript","head","querySelector","setAttribute","__dynamicImportLoaded","$f9d9d110dea7aeee$var$fireRouterEvent","detail","dispatchEvent","CustomEvent","cancelable","o","$f9d9d110dea7aeee$var$getNotFoundError","pathname","$f9d9d110dea7aeee$var$notFoundResult","$f9d9d110dea7aeee$var$vaadinRouterGlobalClickHandler","defaultPrevented","button","shiftKey","ctrlKey","altKey","metaKey","anchor","composedPath","nodeName","hasAttribute","port","$f9d9d110dea7aeee$var$getAnchorOrigin","preventDefault","scrollTo","$f9d9d110dea7aeee$var$CLICK","activate","inactivate","$f9d9d110dea7aeee$var$vaadinRouterGlobalPopstateHandler","state","PopStateEvent","inType","initEvent","Boolean","bubbles","Event","$f9d9d110dea7aeee$var$POPSTATE","$f9d9d110dea7aeee$var$pathToRegexp_1","$f9d9d110dea7aeee$var$pathToRegexp","$f9d9d110dea7aeee$var$parse_1","$f9d9d110dea7aeee$var$parse","$f9d9d110dea7aeee$var$compile_1","$f9d9d110dea7aeee$var$tokensToFunction","$f9d9d110dea7aeee$var$tokensToFunction_1","$f9d9d110dea7aeee$var$tokensToRegExp_1","$f9d9d110dea7aeee$var$tokensToRegExp","$f9d9d110dea7aeee$var$PATH_REGEXP","tokens","defaultDelimiter","delimiter","delimiters","pathEscaped","exec","escaped","offset","prev","capture","group","modifier","partial","repeat","pattern","$f9d9d110dea7aeee$var$escapeGroup","$f9d9d110dea7aeee$var$escapeString","encode","encodeURIComponent","segment","$f9d9d110dea7aeee$var$flags","sensitive","strict","end","endsWith","isEndDelimited","groups","$f9d9d110dea7aeee$var$regexpToRegexp","$f9d9d110dea7aeee$var$arrayToRegexp","$f9d9d110dea7aeee$var$stringToRegexp","$f9d9d110dea7aeee$var$hasOwnProperty","$f9d9d110dea7aeee$var$cache","$f9d9d110dea7aeee$var$decodeParam","decodeURIComponent","err","$f9d9d110dea7aeee$var$matchRoute","ignoreLeadingSlash","parentKeys","parentParams","childMatches","childIndex","routepath","routeToSkip","__children","exact","cacheKey","regexp","pathToRegexp","$f9d9d110dea7aeee$var$matchPath","childRoute","parent","matchedLength","childMatch","$f9d9d110dea7aeee$var$resolveRoute","$f9d9d110dea7aeee$export$8b4c839865b08288","baseUrl","errorHandler","resolveRoute","resolver","__synthetic","getRoutes","setRoutes","newRoutes","addRoutes","removeRoutes","pathnameOrContext","__normalizePathname","nextMatches","currentContext","resume","prevResult","parentRoute","$f9d9d110dea7aeee$var$isChildRoute","chain","item","$f9d9d110dea7aeee$var$updateChainForRoute","resolution","routePath","$f9d9d110dea7aeee$var$generateErrorMessage","base","URL","__effectiveBaseUrl","__createUrl","baseURI","href","normalizedUrl","$f9d9d110dea7aeee$var$cacheRoutes","routesByName","$f9d9d110dea7aeee$var$getRouteByName","routeName","$f9d9d110dea7aeee$var$getRoutePath","$f9d9d110dea7aeee$var$generateUrls","router","fullPath","rt","toPath","tokensToFunction","stringifyQueryParams","keys1","$f9d9d110dea7aeee$var$triggers","$f9d9d110dea7aeee$var$animate","elem","className","getComputedStyle","getPropertyValue","$f9d9d110dea7aeee$var$willAnimate","rect","getBoundingClientRect","bottom","top","cb","$f9d9d110dea7aeee$var$waitForAnimation","removeAttribute","$f9d9d110dea7aeee$var$isResultNotEmpty","$f9d9d110dea7aeee$var$createLocation","redirectFrom","getUrl","userParams","$f9d9d110dea7aeee$var$getPathnameForRouter","$f9d9d110dea7aeee$export$55185c17a0fcbe46","compile","$f9d9d110dea7aeee$var$getMatchedPath","$f9d9d110dea7aeee$var$createRedirect","$f9d9d110dea7aeee$var$runCallbackIfPossible","thisArg","$f9d9d110dea7aeee$var$amend","amendmentFunction","element","amendmentResult","cancel","$f9d9d110dea7aeee$var$removeDomNodes","reduce","outlet","baseElement","baseHref","__resolveRoute","triggers","NavigationTrigger","setTriggers","ready","__lastStartedRenderId","__navigationEventHandler","__onNavigationEvent","setOutlet","subscribe","__createdByRouter","__addedByRouter","$f9d9d110dea7aeee$var$copyContextWithoutNext","childRoutes","$f9d9d110dea7aeee$var$processNewChildren","commands","__isLatestRender","race","__ensureOutlet","__outlet","getOutlet","skipRender","__previousContext","__urlForName","shouldUpdateHistory","renderId","__renderId","__fullyResolveChain","previousContext","__updateBrowserHistory","__skipAttach","__copyUnchangedElements","__addAppearingContent","animationDone","__animateIfNeeded","__runOnAfterEnterCallbacks","__runOnAfterLeaveCallbacks","__removeDisappearingContent","topOfTheChainContextBeforeRedirects","contextBeforeRedirects","__findComponentContextAfterAllRedirects","contextAfterRedirects","topOfTheChainContextAfterRedirects","isFound","findNextContextIfAny","nextContext","__amendWithOnBeforeCallbacks","$f9d9d110dea7aeee$var$renderElement","__redirect","__redirectCount","stringType","$f9d9d110dea7aeee$var$logValue","contextWithFullChain","__runOnBeforeCallbacks","amendedContext","newContext","previousChain","newChain","prevent","__divergedChainIndex","__isReusableElement","__runOnBeforeLeaveCallbacks","__runOnBeforeEnterCallbacks","i3","i4","chainElement","afterLeaveFunction","beforeEnterFunction","otherElement","localName","redirectData","counter","urlForPath","Node","changeState","history","deepestCommonParent","unchangedElement","__removeAppearingContent","__appearingContent","__disappearingContent","parentElement","elementToAdd","targetContext","currentComponent","onAfterLeave","onAfterEnter","to","promises","animate","leave","enter","unsubscribe","newTriggers","urlForName","$f9d9d110dea7aeee$var$DEV_MODE_CODE_REGEXP","$f9d9d110dea7aeee$var$FlowClients","Vaadin","Flow","clients","$f9d9d110dea7aeee$var$uncommentAndRun","$f9d9d110dea7aeee$var$runIfDevelopmentMode","developmentMode","$f9d9d110dea7aeee$var$maybeGatherAndSendStats","localStorage","client","productionMode","$f9d9d110dea7aeee$var$isFlowProductionMode","$f9d9d110dea7aeee$var$isDevelopmentMode","is","$d26d80da1ba3948c$exports","iteratee","$83df40714bf7006e$exports","__data__","$50557587dab070a0$exports","$87257b05f5d9ad81$exports","$d22fe27824ff9351$var$splice","$d22fe27824ff9351$exports","$b2e6263d81cdc1b3$exports","$29e2bc7b7348833e$exports","$dd14efc87ba1cd5b$var$ListCache","entry","$ff9311500b60ab72$exports","$dd14efc87ba1cd5b$exports","$e8ee1d354807980a$exports","$b2ddb9d63293f3a5$exports","$80d0940a423a17dc$exports","$010f38d5d914cfa2$exports","$3ba72ebe7e4419b5$exports","Symbol","$dabe9ecbecc6d0b5$var$objectProto","$dabe9ecbecc6d0b5$var$hasOwnProperty","$dabe9ecbecc6d0b5$var$nativeObjectToString","$dabe9ecbecc6d0b5$var$symToStringTag","toStringTag","$dabe9ecbecc6d0b5$exports","isOwn","unmasked","$3fce91ec3914aaed$var$nativeObjectToString","$3fce91ec3914aaed$exports","$a7f8a2555793d7d3$var$symToStringTag","$a7f8a2555793d7d3$exports","$f9ff2e983beb6b86$exports","$004783abbde551e4$exports","$baf78e1246b3b18f$var$coreJsData","$5e8d211f630cd46d$var$maskSrcKey","$baf78e1246b3b18f$exports","IE_PROTO","$5e8d211f630cd46d$exports","$9c6b3ec69362487e$var$funcToString","$9c6b3ec69362487e$exports","$8360225fb63098b3$var$reIsHostCtor","$8360225fb63098b3$var$funcProto","$8360225fb63098b3$var$objectProto","$8360225fb63098b3$var$funcToString","$8360225fb63098b3$var$hasOwnProperty","$8360225fb63098b3$var$reIsNative","$8360225fb63098b3$exports","$d50b255f8680c47a$exports","$19b02faa57603249$var$Map","$5037fd2e597c2a03$exports","$19b02faa57603249$exports","$e95343b7bf5d617b$var$nativeCreate","$e95343b7bf5d617b$exports","$80f20c637ba11563$exports","$60a2188452e03a76$exports","$0ade0ffa62051a98$var$hasOwnProperty","$0ade0ffa62051a98$exports","$0d7f9677a17b6bef$var$hasOwnProperty","$0d7f9677a17b6bef$exports","$8d50e526a9e9b7fa$var$Hash","$d33db65186b62952$exports","$8d50e526a9e9b7fa$exports","$df2cd4bc93f21548$exports","string","$09c4668903e66c1d$exports","$c0b23e5f03c2595b$exports","$44464964ade29765$exports","$ba80406da5503086$exports","$d3abe18ea687dfb7$exports","$4902f64a16640324$var$MapCache","$347643e3dcfcc207$exports","$4902f64a16640324$exports","$bbb2d98cae25b61a$var$Stack","$9280d00f89f25fa9$exports","$9280d00f89f25fa9$var$LARGE_ARRAY_SIZE","$bbb2d98cae25b61a$exports","$dda8f7b6b589544e$exports","$a29ccdc0f60e279e$var$SetCache","$66732c92c350622c$exports","$a29ccdc0f60e279e$exports","$aae24ad60cc3cfcb$exports","$1b44096ad4b9e2d5$exports","$1081bd3a2e361911$exports","bitmask","customizer","equalFunc","isPartial","arrLength","othLength","arrStacked","othStacked","seen","arrValue","othValue","compared","othIndex","$facf83d1449a27b8$var$Uint8Array","Uint8Array","$facf83d1449a27b8$exports","$91d4444cbb077e0c$exports","$11f509f8f53d8c36$exports","$baf52b9e146f3da7$var$symbolProto","$baf52b9e146f3da7$var$symbolValueOf","valueOf","$baf52b9e146f3da7$exports","byteLength","byteOffset","buffer","convert","stacked","$cc77dbb7c08db6a8$exports","$0488fde9aa355453$var$isArray","$0488fde9aa355453$exports","$9144d49da7a47a72$exports","keysFunc","symbolsFunc","$6549fed720324048$exports","resIndex","$8fc9f7df9b0c06bb$exports","$51326a29f571e7cd$var$propertyIsEnumerable","propertyIsEnumerable","$51326a29f571e7cd$var$nativeGetSymbols","getOwnPropertySymbols","$51326a29f571e7cd$exports","symbol","$b14d62a510ae7f2d$exports","$61269cf1f3e020be$exports","$fb8f823cdc90f511$exports","$7d0c6fd0eb26be0e$var$objectProto","$7d0c6fd0eb26be0e$var$hasOwnProperty","$7d0c6fd0eb26be0e$var$propertyIsEnumerable","$7d0c6fd0eb26be0e$var$isArguments","$7d0c6fd0eb26be0e$exports","$d83738e053b5eb08$var$reIsUint","$d83738e053b5eb08$exports","$15d215b19bcf1187$exports","$9d076681a0e29d68$var$typedArrayTags","$9d076681a0e29d68$exports","$692cb5474f422969$exports","$156c3727697ab085$var$nodeIsTypedArray","$jIny1","isTypedArray","$156c3727697ab085$var$isTypedArray","$156c3727697ab085$exports","$64568844439edb7f$var$hasOwnProperty","$64568844439edb7f$exports","inherited","isArr","isArg","isBuff","$f504n","isType","skipIndexes","$292432068be14a79$var$objectProto","$292432068be14a79$exports","Ctor","$0b26005314403d97$var$nativeKeys","transform","$ff813e49bf3cca3d$exports","$0b26005314403d97$exports","$e811d2e210fb58cc$var$hasOwnProperty","$e811d2e210fb58cc$exports","$ac2c42592aa05543$exports","$08f0eaf3fbcb2fde$exports","$7958eecccfe4cef6$exports","$ac8a81cbae0357e8$var$hasOwnProperty","$ac8a81cbae0357e8$exports","objProps","objLength","objStacked","skipCtor","objValue","objCtor","othCtor","$41ce0ff3b38ee753$exports","$b0226bdea11cb834$exports","$05f44e958da968eb$exports","$aedce50092a1e6a6$exports","$474f685f496bfe31$var$mapTag","$474f685f496bfe31$var$promiseTag","$474f685f496bfe31$var$setTag","$474f685f496bfe31$var$weakMapTag","$474f685f496bfe31$var$dataViewTag","$474f685f496bfe31$var$dataViewCtorString","$474f685f496bfe31$var$mapCtorString","$474f685f496bfe31$var$promiseCtorString","$474f685f496bfe31$var$setCtorString","$474f685f496bfe31$var$weakMapCtorString","$474f685f496bfe31$var$getTag","ArrayBuffer","ctorString","$474f685f496bfe31$exports","$567f2dd161ebd4f6$var$argsTag","$567f2dd161ebd4f6$var$arrayTag","$567f2dd161ebd4f6$var$objectTag","$567f2dd161ebd4f6$var$hasOwnProperty","$567f2dd161ebd4f6$exports","objIsArr","othIsArr","objTag","othTag","objIsObj","othIsObj","isSameTag","objIsWrapped","othIsWrapped","objUnwrapped","othUnwrapped","$769812b29c18141e$exports","$769812b29c18141e$var$baseIsEqual","$ec073f38db6e7d54$exports","matchData","noCustomizer","srcValue","$ec073f38db6e7d54$var$COMPARE_PARTIAL_FLAG","$0ff8edf4f90a7955$exports","$6b4f84f6be7f825c$exports","$1f9d5e891556ddb9$exports","$e780807e2b795134$exports","$6b5a5095e0934938$exports","$03e9beb856e9b4cd$var$reIsDeepProp","$03e9beb856e9b4cd$var$reIsPlainProp","$03e9beb856e9b4cd$exports","$17f5c88c594eac51$var$memoize","memoized","Cache","$17f5c88c594eac51$exports","$f9135a667399ede4$var$rePropName","$f9135a667399ede4$var$reEscapeChar","$f9135a667399ede4$var$stringToPath","$6aae515404bf5dd2$exports","number","quote","subString","$f9135a667399ede4$exports","$f16f644742c27c21$var$symbolProto","$f16f644742c27c21$var$symbolToString","$f16f644742c27c21$exports","$f16f644742c27c21$var$baseToString","$f5d9385a9cc7e413$exports","$38afcbfab85a0553$exports","$4d60aa8c33155976$exports","$fd2d90f592c63519$exports","$d299ac421c05c135$exports","defaultValue","$d53c6080f339a51f$exports","$85aaea8f77d790ae$exports","hasFunc","$221e04e57e35dd04$exports","$d5fe8a98fe4800eb$exports","$d5fe8a98fe4800eb$var$COMPARE_PARTIAL_FLAG","$37dff9aa04444f9c$exports","$d45a621b4548f6bb$exports","$e029d02f9dd10368$exports","$87123e72266aa58c$exports","$5aba4f6d9f8304a3$exports","$9f0778b809a8c692$var$baseFor","fromRight","iterable","$e7bbde6376f4568a$exports","$9f0778b809a8c692$exports","$35fa3296f177aa01$var$baseEach","eachFunc","$f03eae3721f9ace8$exports","$35fa3296f177aa01$exports","$b613e194c1b157de$exports","$2f2d1bf022ac3e3d$exports","$d3e88702e16f14b7$var$API_URL_BASE","$d3e88702e16f14b7$export$ca000e230c0caa3e","userId","userName","email","messages","rtdbRoomId","roomId","storage","save","init","cs","getState","go","setState","accessRoom","newState","setRoomId","setNombre","nombre","lastState","getName","fetch","ok","setEmailAndName","listenRoom","$da38ac6aa733c404$export$ad30f661f41f4d90","$da38ac6aa733c404$export$eff4d24c3ff7876e","snapShot","messagesFromServer","messagesList","$parcel$interopDefault","userData","$7860c193d961c5ef$exports","import","meta","$5b1df92360908e82$var$Chat","addListeners","newMessage","pushMessage","$ce40d7bf13cba8a9$var$HomePage","form","select","signIn","opcion","askNewRoom","evt","roomIdInput","disabled","$a9d4a7803023255b$var$SignUpPage","FormData","formData","validEmail","validateEmail","validName","validateName","createUser","alert","mail","getElementById","$3bfdb7183e8721d6$var$assertPath","$3bfdb7183e8721d6$var$normalizeStringPosix","allowAboveRoot","lastSegmentLength","lastSlash","dots","lastSlashIndex","$3bfdb7183e8721d6$var$posix","resolvedPath","resolvedAbsolute","normalize","isAbsolute","trailingSeparator","joined","relative","fromStart","fromEnd","fromLen","toStart","toLen","lastCommonSep","fromCode","_makeLong","dirname","hasRoot","matchedSlash","basename","ext","extIdx","firstNonSlashEnd","extname","startDot","startPart","preDotState","format","pathObject","sep","$3bfdb7183e8721d6$var$_format","ret","win32","posix","$3bfdb7183e8721d6$exports","$630dda8d81b1b9e8$var$version","$630dda8d81b1b9e8$var$LINE","$630dda8d81b1b9e8$var$_log","$630dda8d81b1b9e8$var$DotenvModule","dotenvPath","encoding","override","envPath","parsed","$eca075ad100d834d$exports","readFileSync","lines","trim","maybeQuote","$630dda8d81b1b9e8$exports"],"version":3,"file":"index.67207471.js.map"}